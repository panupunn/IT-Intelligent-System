#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
iTao iT Stock (Streamlit + Google Sheets)
Stable hotfix with restored multi-issue (OUT) flow.

- Restores Dashboard controls (Pie/Bar, Top-N, per-row, date range)
- Keeps all menus: Dashboard, Stock, Tickets, Issue/Receive, Reports, Users, Import/Modify, Settings
- Users/Stock/Tickets pages support "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" checkbox in the top table to load row for editing
- Import submenus present: Categories, Branches, Items, Ticket Categories, Users (CSV/Excel)
- Service Account loading: secrets ‚Üí env ‚Üí local file ‚Üí embedded B64 (no re-upload on wake if configured)
- Worksheet read caching via st.cache_data(ttl=60) to avoid quota spikes without altering behaviors
- Version footer: iTao iT (V.1.1)
"""
from __future__ import annotations
import os, io, uuid, re, time, base64, json
from datetime import datetime, date, timedelta, time as dtime
import pytz, pandas as pd, streamlit as st
import altair as alt
import bcrypt
import gspread
from gspread.exceptions import APIError, WorksheetNotFound
from google.oauth2.service_account import Credentials


# === PATCH: Requests integration constants ===
MENU_REQUESTS = "üß∫ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å"
REQUESTS_SHEET = "Requests"
NOTIFS_SHEET   = "Notifications"

REQUESTS_HEADERS = [
    "Branch","Requester","CreatedAt","OrderNo","ItemCode","ItemName","Qty",
    "Status","Approver","LastUpdate","Note"
]
NOTIFS_HEADERS = [
    "NotiID","CreatedAt","TargetApp","TargetBranch","Type","RefID","Message","ReadFlag","ReadAt"
]
# === END PATCH ===

# -------------------- Global constants --------------------
APP_TITLE   = "‡πÑ‡∏≠‡∏ï‡πâ‡∏≤‡∏ß ‡πÑ‡∏≠‡∏ó‡∏µ (iTao iT)"
APP_TAGLINE = "POWER By ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô=> ‡πÑ‡∏≠‡∏ó‡∏µ‡∏™‡∏∏‡∏î‡∏´‡∏•‡πà‡∏≠"
TZ = pytz.timezone("Asia/Bangkok")

DEFAULT_SHEET_URL = "https://docs.google.com/spreadsheets/d/1SGKzZ9WKkRtcmvN3vZj9w2yeM6xNoB6QV3-gtnJY-Bw/edit?gid=0#gid=0"
CREDENTIALS_FILE  = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS", "service_account.json")

SHEET_ITEMS       = "Items"
SHEET_TXNS        = "Transactions"
SHEET_USERS       = "Users"
SHEET_CATS        = "Categories"
SHEET_BRANCHES    = "Branches"
SHEET_TICKETS     = "Tickets"
SHEET_TICKET_CATS = "TicketCategories"

ITEMS_HEADERS     = ["‡∏£‡∏´‡∏±‡∏™","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]
TXNS_HEADERS      = ["TxnID","‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó","‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
USERS_HEADERS     = ["Username","DisplayName","Role","PasswordHash","Active"]
CATS_HEADERS      = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]
BR_HEADERS        = ["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]
TICKETS_HEADERS   = ["TicketID","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
TICKET_CAT_HEADERS= ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]

MINIMAL_CSS = """
<style>
:root { --radius: 16px; }
section.main > div { padding-top: 8px; }
.block-card { background: #fff; border:1px solid #eee; border-radius:16px; padding:16px; }
.kpi { display:grid; grid-template-columns: repeat(auto-fit,minmax(160px,1fr)); gap:12px; }
.danger { color:#b00020; }
</style>"""

# --------- Embedded credentials (optional) ---------
# Put base64 of your service_account.json here to avoid re-upload.
EMBEDDED_GOOGLE_CREDENTIALS_B64 = os.environ.get("EMBEDDED_SA_B64", "").strip()

# --- Defensive shim for cache_resource (older Streamlit) ---
if not hasattr(st, "cache_resource"):
    def _no_cache_decorator(*args, **kwargs):
        def _wrap(func): return func
        return _wrap
    st.cache_resource = _no_cache_decorator

# -------------------- Credentials handling --------------------
GOOGLE_SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

def _try_load_sa_from_secrets():
    try:
        if "gcp_service_account" in st.secrets:
            return dict(st.secrets["gcp_service_account"])
        if "service_account" in st.secrets:
            return dict(st.secrets["service_account"])
        if "service_account_json" in st.secrets:
            raw = str(st.secrets["service_account_json"])
            return json.loads(raw)
    except Exception:
        pass
    return None

def _try_load_sa_from_env():
    raw = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS_JSON") \
          or os.environ.get("SERVICE_ACCOUNT_JSON") \
          or os.environ.get("GOOGLE_CREDENTIALS_JSON")
    if not raw: return None
    try:
        raw = raw.strip()
        if raw.lstrip().startswith("{"):
            return json.loads(raw)
        return json.loads(base64.b64decode(raw).decode("utf-8"))
    except Exception:
        return None

def _try_load_sa_from_file():
    for p in ("./service_account.json", "/mount/data/service_account.json", "/mnt/data/service_account.json"):
        try:
            with open(p, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            continue
    return None

def _try_load_sa_from_embedded():
    b64 = EMBEDDED_GOOGLE_CREDENTIALS_B64
    if not b64: return None
    try:
        return json.loads(base64.b64decode(b64).decode("utf-8"))
    except Exception:
        return None

def _ensure_credentials_available():
    info = (_try_load_sa_from_secrets()
            or _try_load_sa_from_env()
            or _try_load_sa_from_file()
            or _try_load_sa_from_embedded())
    if info is not None:
        return ("dict", info)
    # Last resort: if no persistent source -> allow manual upload once
    up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå service_account.json", type=["json"], key="sa_json_once")
    if not up:
        st.stop()
    try:
        return ("dict", json.loads(up.getvalue().decode("utf-8")))
    except Exception as e:
        st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå service_account.json ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()

@st.cache_resource(show_spinner=False)
def get_client():
    mode, info = _ensure_credentials_available()
    if mode == "dict":
        creds = Credentials.from_service_account_info(info, scopes=GOOGLE_SCOPES)
    else:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=GOOGLE_SCOPES)
    return gspread.authorize(creds)

# Convenience wrappers
@st.cache_resource(show_spinner=False)
def open_sheet_by_url(sheet_url: str):
    return get_client().open_by_url(sheet_url)

@st.cache_resource(show_spinner=False)
def open_sheet_by_key(sheet_key: str):
    return get_client().open_by_key(sheet_key)

# -------------------- Cached worksheet reads --------------------
def _open_sheet_by_key_nocache(sheet_key: str):
    return get_client().open_by_key(sheet_key)

def _open_sheet_by_url_nocache(sheet_url: str):
    return get_client().open_by_url(sheet_url)

@st.cache_data(ttl=60, show_spinner=False)
def _cached_ws_records_by_key(sheet_key: str, ws_title: str):
    sh = _open_sheet_by_key_nocache(sheet_key)
    ws = sh.worksheet(ws_title)
    return ws.get_all_records()

@st.cache_data(ttl=60, show_spinner=False)
def _cached_ws_records_by_url(sheet_url: str, ws_title: str):
    sh = _open_sheet_by_url_nocache(sheet_url)
    ws = sh.worksheet(ws_title)
    return ws.get_all_records()

def clear_read_cache():
    try:
        st.cache_data.clear()
    except Exception:
        pass

# -------------------- Utility helpers --------------------
def fmt_dt(dt_obj: datetime) -> str:
    return dt_obj.strftime("%Y-%m-%d %H:%M:%S")

def get_now_str():
    return fmt_dt(datetime.now(TZ))

def combine_date_time(d: date, t: dtime) -> datetime:
    naive = datetime.combine(d, t)
    return TZ.localize(naive)

def read_df(sh, sheet_name: str, headers=None) -> pd.DataFrame:
    """Read a worksheet into DataFrame with caching if possible."""
    sheet_key = getattr(sh, "id", None) or getattr(sh, "spreadsheet_id", None) or ""
    sheet_url = st.session_state.get("sheet_url", "") or ""

    if sheet_key:
        records = _cached_ws_records_by_key(str(sheet_key), str(sheet_name))
    elif sheet_url:
        records = _cached_ws_records_by_url(str(sheet_url), str(sheet_name))
    else:
        ws = sh.worksheet(sheet_name)
        records = ws.get_all_records()

    df = pd.DataFrame(records)
    if headers:
        for h in headers:
            if h not in df.columns:
                df[h] = ""
        try:
            df = df[headers]
        except Exception:
            pass
    return df

def write_df(sh, title, df):
    if title==SHEET_ITEMS: cols=ITEMS_HEADERS
    elif title==SHEET_TXNS: cols=TXNS_HEADERS
    elif title==SHEET_USERS: cols=USERS_HEADERS
    elif title==SHEET_CATS: cols=CATS_HEADERS
    elif title==SHEET_BRANCHES: cols=BR_HEADERS
    elif title==SHEET_TICKETS: cols=TICKETS_HEADERS
    elif title==SHEET_TICKET_CATS: cols=TICKET_CAT_HEADERS
    else: cols = df.columns.tolist()
    for c in cols:
        if c not in df.columns: df[c] = ""
    df = df[cols]
    ws = sh.worksheet(title)
    ws.clear()
    ws.update([df.columns.values.tolist()] + df.values.tolist())
    clear_read_cache()

def append_row(sh, title, row):
    sh.worksheet(title).append_row(row)
    clear_read_cache()

def ensure_credentials_ui():
    # No-op when credentials are already resolved via get_client()
    return True

def setup_responsive():
    st.markdown("""
    <style>
    @media (max-width: 640px) {
        .block-container { padding: 0.6rem 0.7rem !important; }
        [data-testid="column"] { width: 100% !important; flex: 1 1 100% !important; padding-right: 0 !important; }
        .stButton > button, .stSelectbox, .stTextInput, .stTextArea, .stDateInput { width: 100% !important; }
        .stDataFrame { width: 100% !important; }
        .js-plotly-plot, .vega-embed { width: 100% !important; }
    }
    </style>
    """, unsafe_allow_html=True)

def get_username():
    return (
        st.session_state.get("user")
        or st.session_state.get("username")
        or st.session_state.get("display_name")
        or "unknown"
    )

# -------------------- Ensure worksheets exist --------------------
def ensure_sheets_exist(sh):
    required = [
        (SHEET_ITEMS, ITEMS_HEADERS, 1000, len(ITEMS_HEADERS)+5),
        (SHEET_TXNS, TXNS_HEADERS, 2000, len(TXNS_HEADERS)+5),
        (SHEET_USERS, USERS_HEADERS, 100, len(USERS_HEADERS)+2),
        (SHEET_CATS, CATS_HEADERS, 200, len(CATS_HEADERS)+2),
        (SHEET_BRANCHES, BR_HEADERS, 200, len(BR_HEADERS)+2),
        (SHEET_TICKETS, TICKETS_HEADERS, 1000, len(TICKETS_HEADERS)+5),
        (SHEET_TICKET_CATS, TICKET_CAT_HEADERS, 200, len(TICKET_CAT_HEADERS)+2),
    ]

    try:
        titles = [ws.title for ws in sh.worksheets()]
    except APIError:
        titles = None

    def ensure_one(name, headers, rows, cols):
        try:
            if titles is not None and name in titles:
                return
            # Verify directly
            try:
                sh.worksheet(name)
            except WorksheetNotFound:
                ws = sh.add_worksheet(name, rows, cols)
                ws.append_row(headers)
        except APIError as e:
            st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ï '{name}': {e}")

    for name, headers, r, c in required:
        ensure_one(name, headers, r, c)

    # Seed admin user if empty
    try:
        ws_users = sh.worksheet(SHEET_USERS)
        values = ws_users.get_all_values()
        if len(values) <= 1:
            default_pwd = bcrypt.hashpw("admin123".encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
            ws_users.append_row(["admin","Administrator","admin",default_pwd,"Y"])
    except Exception:
        pass

# -------------------- Auth block --------------------
def auth_block(sh):
    st.session_state.setdefault("user", None); st.session_state.setdefault("role", None)
    if st.session_state.get("user"):
        with st.sidebar:
            st.markdown(f"**üë§ {st.session_state['user']}**"); st.caption(f"Role: {st.session_state['role']}")
            if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"): st.session_state["user"]=None; st.session_state["role"]=None; st.rerun()
        return True
    st.sidebar.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    u = st.sidebar.text_input("Username"); p = st.sidebar.text_input("Password", type="password")
    if st.sidebar.button("Login", use_container_width=True):
        users = read_df(sh, SHEET_USERS, USERS_HEADERS)
        row = users[(users["Username"]==u) & (users["Active"].str.upper()=="Y")]
        if not row.empty:
            ok = False
            try: ok = bcrypt.checkpw(p.encode("utf-8"), row.iloc[0]["PasswordHash"].encode("utf-8"))
            except: ok = False
            if ok:
                st.session_state["user"]=u; st.session_state["role"]=row.iloc[0]["Role"]; st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); st.rerun()
            else: st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else: st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    return False

# -------------------- Dashboard --------------------
def parse_range(choice: str, d1: date=None, d2: date=None):
    today = datetime.now(TZ).date()
    if choice == "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ":
        return today, today
    if choice == "7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
        return today - timedelta(days=6), today
    if choice == "30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
        return today - timedelta(days=29), today
    if choice == "90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
        return today - timedelta(days=89), today
    if choice == "‡∏õ‡∏µ‡∏ô‡∏µ‡πâ":
        return date(today.year, 1, 1), today
    if choice == "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á" and d1 and d2:
        return d1, d2
    return today - timedelta(days=29), today

def make_pie(df: pd.DataFrame, label_col: str, value_col: str, top_n: int, title: str):
    if df.empty or (value_col in df.columns and pd.to_numeric(df[value_col], errors="coerce").fillna(0).sum() == 0):
        st.info(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü: {title}")
        return
    work = df.copy()
    if value_col in work.columns:
        work[value_col] = pd.to_numeric(work[value_col], errors="coerce").fillna(0)
    work = work.groupby(label_col, dropna=False)[value_col].sum().reset_index().rename(columns={value_col: "sum_val"})
    work[label_col] = work[label_col].replace("", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    work = work.sort_values("sum_val", ascending=False)
    if len(work) > top_n:
        top = work.head(top_n)
        others = pd.DataFrame({label_col:["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"], "sum_val":[work["sum_val"].iloc[top_n:].sum()]})
        work = pd.concat([top, others], ignore_index=True)
    total = work["sum_val"].sum()
    work["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå"] = (work["sum_val"] / total * 100).round(2) if total>0 else 0
    st.markdown(f"**{title}**")
    chart = alt.Chart(work).mark_arc(innerRadius=60).encode(
        theta="sum_val:Q",
        color=f"{label_col}:N",
        tooltip=[f"{label_col}:N","sum_val:Q","‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå:Q"]
    )
    st.altair_chart(chart, use_container_width=True)

def make_bar(df: pd.DataFrame, label_col: str, value_col: str, top_n: int, title: str):
    if df.empty or (value_col in df.columns and pd.to_numeric(df[value_col], errors="coerce").fillna(0).sum() == 0):
        st.info(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü: {title}")
        return
    work = df.copy()
    if value_col in work.columns:
        work[value_col] = pd.to_numeric(work[value_col], errors="coerce").fillna(0)
    work = work.groupby(label_col, dropna=False)[value_col].sum().reset_index().rename(columns={value_col: "sum_val"})
    work[label_col] = work[label_col].replace("", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    work = work.sort_values("sum_val", ascending=False)
    if len(work) > top_n:
        work = work.head(top_n)
    st.markdown(f"**{title}**")
    chart = alt.Chart(work).mark_bar().encode(
        x=alt.X(f"{label_col}:N", sort='-y'),
        y=alt.Y("sum_val:Q"),
        tooltip=[f"{label_col}:N","sum_val:Q"]
    )
    st.altair_chart(chart.properties(height=320), use_container_width=True)

def page_dashboard(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üìä Dashboard (‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ)")

    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    txns  = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    cats = read_df(sh, SHEET_CATS, CATS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    cat_map = {str(r['‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î']).strip(): str(r['‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î']).strip() for _, r in cats.iterrows()} if not cats.empty else {}
    br_map = {str(r['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤']).strip(): f"{str(r['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤']).strip()} | {str(r['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤']).strip()}" for _, r in branches.iterrows()} if not branches.empty else {}

    total_items = len(items)
    total_qty = items["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].apply(lambda x: int(float(x)) if str(x).strip() != "" else 0).sum() if not items.empty else 0
    low_df = items[(items["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"].str.upper() == "Y") & (items["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].astype(str) != "")]
    if not low_df.empty:
        low_df = low_df[pd.to_numeric(low_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors='coerce').fillna(0) <= pd.to_numeric(low_df["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors='coerce').fillna(0)]
    low_count = len(low_df) if not low_df.empty else 0

    c1, c2, c3 = st.columns(3)
    with c1: st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"{total_items:,}")
    with c2: st.metric("‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏°", f"{total_qty:,}")
    with c3: st.metric("‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", f"{low_count:,}")

    st.markdown("### üéõÔ∏è ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
    colA, colB, colC = st.columns([2,1,1])
    with colA:
        chart_opts = st.multiselect(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á",
            options=[
                "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö",
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)",
                "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT)",
                "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT)",
                "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤",
            ],
            default=["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)","Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
        )
    with colB:
        top_n = st.slider("Top-N ‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü", min_value=3, max_value=20, value=10, step=1)
    with colC:
        per_row = st.selectbox("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß", [1,2,3,4], index=1)
    chart_kind = st.radio("‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü", ["‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° (Pie)", "‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Bar)"], horizontal=True)

    st.markdown("### ‚è±Ô∏è ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó '‡πÄ‡∏ö‡∏¥‡∏Å ... (OUT)' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
    colR1, colR2, colR3 = st.columns(3)
    with colR1:
        range_choice = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ","7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏õ‡∏µ‡∏ô‡∏µ‡πâ","‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"], index=2)
    with colR2:
        d1 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=datetime.now(TZ).date()-timedelta(days=29))
    with colR3:
        d2 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=datetime.now(TZ).date())
    start_date, end_date = parse_range(range_choice, d1, d2)

    # Prepare txns OUT filtered
    if not txns.empty:
        tx = txns.copy()
        tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors='coerce')
        tx = tx.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        tx = tx[(tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= start_date) & (tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= end_date)]
        tx["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] = pd.to_numeric(tx["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], errors="coerce").fillna(0)
        tx_out = tx[tx["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]=="OUT"]
    else:
        tx_out = pd.DataFrame(columns=TXNS_HEADERS)

    charts = []
    if "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().reset_index()
        tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠"] = tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].map(cat_map).fillna(tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"])
        charts.append(("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"))

    if "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        tmp = tmp.groupby("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().reset_index()
        charts.append(("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", tmp, "‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"))

    if "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["count"] = 1
        tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["count"].sum().reset_index()
        tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠"] = tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].map(cat_map).fillna(tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"])
        charts.append(("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠", "count"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)" in chart_opts:
        if not tx_out.empty:
            tmp = tx_out.groupby("‡∏™‡∏≤‡∏Ç‡∏≤", dropna=False)["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            tmp["‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á"] = tmp["‡∏™‡∏≤‡∏Ç‡∏≤"].apply(lambda x: br_map.get(str(x).split(" | ")[0], str(x) if "|" in str(x) else str(x)))
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏≤‡∏Ç‡∏≤":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT)" in chart_opts:
        if not tx_out.empty:
            tmp = tx_out.groupby("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT)" in chart_opts:
        if not tx_out.empty and not items.empty:
            it = items[["‡∏£‡∏´‡∏±‡∏™","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"]].copy()
            tmp = tx_out.merge(it, left_on="‡∏£‡∏´‡∏±‡∏™", right_on="‡∏£‡∏´‡∏±‡∏™", how="left")
            tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    # Tickets for charts
    tickets_df = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    if not tickets_df.empty:
        tdf = tickets_df.copy()
        tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        tdf = tdf.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        tdf = tdf[(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= start_date) & (tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= end_date)]
    else:
        tdf = tickets_df

    if "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" in chart_opts:
        if not tdf.empty:
            tmp = tdf.groupby("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"})
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤" in chart_opts:
        if not tdf.empty:
            tmp = tdf.groupby("‡∏™‡∏≤‡∏Ç‡∏≤", dropna=False)["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"})
            tmp["‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á"] = tmp["‡∏™‡∏≤‡∏Ç‡∏≤"].apply(lambda x: br_map.get(str(x).split(" | ")[0], str(x) if "|" in str(x) else str(x)))
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏≤‡∏Ç‡∏≤":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if len(charts)==0:
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
    else:
        rows = (len(charts) + per_row - 1) // per_row
        idx = 0
        for r in range(rows):
            cols = st.columns(per_row)
            for c in range(per_row):
                if idx >= len(charts): break
                title, df, label_col, value_col = charts[idx]
                with cols[c]:
                    if chart_kind.endswith('(Bar)'):
                        make_bar(df, label_col, value_col, top_n, title)
                    else:
                        make_pie(df, label_col, value_col, top_n, title)
                idx += 1

    # Low stock list
    items_num = items.copy()
    if not items_num.empty:
        items_num["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(items_num["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        items_num["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"] = pd.to_numeric(items_num["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors="coerce").fillna(0)
        low_df2 = items_num[(items_num["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"].str.upper()=="Y") & (items_num["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] <= items_num["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"])]
    else:
        low_df2 = pd.DataFrame(columns=ITEMS_HEADERS)
    if not low_df2.empty:
        with st.expander("‚ö†Ô∏è ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (Reorder)", expanded=False):
            st.dataframe(low_df2[["‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]], height=240, use_container_width=True)

    st.markdown("</div>", unsafe_allow_html=True)

# -------------------- Stock page --------------------
def get_unit_options(items_df):
    opts = sorted([x for x in items_df["‡∏´‡∏ô‡πà‡∏ß‡∏¢"].dropna().astype(str).unique() if x.strip()!=""])
    if "‡∏ä‡∏¥‡πâ‡∏ô" not in opts: opts = ["‡∏ä‡∏¥‡πâ‡∏ô"] + opts
    return opts + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]

def get_loc_options(items_df):
    opts = sorted([x for x in items_df["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"].dropna().astype(str).unique() if x.strip()!=""])
    if "IT Room" not in opts: opts = ["IT Room"] + opts
    return opts + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]

def generate_item_code(sh, cat_code: str) -> str:
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    pattern = re.compile(rf"^{re.escape(cat_code)}-(\d+)$")
    max_num = 0
    for code in items["‡∏£‡∏´‡∏±‡∏™"].dropna().astype(str):
        m = pattern.match(code.strip())
        if m:
            try:
                num = int(m.group(1))
                if num > max_num: max_num = num
            except:
                pass
    next_num = max_num + 1
    return f"{cat_code}-{next_num:03d}"

def ensure_item_row(items_df, code): return (items_df["‡∏£‡∏´‡∏±‡∏™"]==code).any()

def adjust_stock(sh, code, delta, actor, branch="", note="", txn_type="OUT", ts_str=None):
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    if items.empty or not ensure_item_row(items, code): st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á"); return False
    row = items[items["‡∏£‡∏´‡∏±‡∏™"]==code].iloc[0]
    cur = int(float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"])) if str(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]).strip()!="" else 0
    if txn_type=="OUT" and cur+delta < 0: st.error("‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"); return False
    items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = cur+delta; write_df(sh, SHEET_ITEMS, items)
    ts = ts_str if ts_str else get_now_str()
    append_row(sh, SHEET_TXNS, [str(uuid.uuid4())[:8], ts, txn_type, code, row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], branch, abs(delta), actor, note])
    return True

def page_stock(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")

    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    cats  = read_df(sh, SHEET_CATS, CATS_HEADERS)
    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î)")
    view_df = items.copy()
    if q and not items.empty:
        mask = items["‡∏£‡∏´‡∏±‡∏™"].str.contains(q, case=False, na=False) | items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].str.contains(q, case=False, na=False) | items["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].str.contains(q, case=False, na=False)
        view_df = items[mask]
    # Selectable table
    chosen_code = None
    if hasattr(st, "data_editor"):
        show = view_df.copy()
        show["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] = False
        ed = st.data_editor(show[["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å","‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]],
                            use_container_width=True, height=320, num_rows="fixed",
                            column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn()})
        picked = ed[ed["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]==True]
        if not picked.empty:
            chosen_code = str(picked.iloc[0]["‡∏£‡∏´‡∏±‡∏™"])
    else:
        st.dataframe(view_df, height=320, use_container_width=True)

    unit_opts = get_unit_options(items)
    loc_opts  = get_loc_options(items)

    if st.session_state.get("role") in ("admin","staff"):
        t_add, t_edit = st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà)","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°)"])

        with t_add:
            with st.form("item_add", clear_on_submit=True):
                c1,c2,c3 = st.columns(3)
                with c1:
                    if cats.empty: st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï Categories (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°)"); cat_opt=""
                    else:
                        opts = (cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]+" | "+cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).tolist(); selected = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", options=opts)
                        cat_opt = selected.split(" | ")[0]
                    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
                with c2:
                    sel_unit = st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=unit_opts, index=0)
                    unit = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                    if sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": unit = sel_unit
                    qty = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=0, step=1)
                    rop = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=0, step=1)
                with c3:
                    sel_loc = st.selectbox("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=loc_opts, index=0)
                    loc = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                    if sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": loc = sel_loc
                    active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0)
                    auto_code = st.checkbox("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=True)
                    code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏≠‡πÇ‡∏ï‡πâ)", disabled=auto_code)
                    s_add = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", use_container_width=True)
            if s_add:
                if (auto_code and not cat_opt) or (not auto_code and code.strip()==""): st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î/‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™")
                else:
                    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS); gen_code = generate_item_code(sh, cat_opt) if auto_code else code.strip().upper()
                    if (items["‡∏£‡∏´‡∏±‡∏™"]==gen_code).any():
                        items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==gen_code, ITEMS_HEADERS] = [gen_code, cat_opt, name, unit, qty, rop, loc, active]
                    else:
                        items = pd.concat([items, pd.DataFrame([[gen_code, cat_opt, name, unit, qty, rop, loc, active]], columns=ITEMS_HEADERS)], ignore_index=True)
                    write_df(sh, SHEET_ITEMS, items); st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏£‡∏´‡∏±‡∏™: {gen_code})"); st.rerun()

        with t_edit:
            st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå")
            labels = [f'{r["‡∏£‡∏´‡∏±‡∏™"]} | {r["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]}' for _, r in items.iterrows()] if not items.empty else []
            if chosen_code and any(x.startswith(chosen_code+" |") for x in labels):
                default_idx = labels.index(next(x for x in labels if x.startswith(chosen_code+" |")))
            else:
                default_idx = 0 if labels else None
            pick_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", options=(["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"]+labels) if labels else ["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"], index=(default_idx+1 if default_idx is not None else 0))
            if pick_label != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --":
                pick = pick_label.split(" | ", 1)[0]
                row = items[items["‡∏£‡∏´‡∏±‡∏™"] == pick].iloc[0]
                unit_opts_edit = unit_opts[:-1]
                if row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"] not in unit_opts_edit and str(row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"]).strip()!="":
                    unit_opts_edit = [row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"]] + unit_opts_edit
                unit_opts_edit = unit_opts_edit + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                loc_opts_edit = loc_opts[:-1]
                if row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"] not in loc_opts_edit and str(row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]).strip()!="":
                    loc_opts_edit = [row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]] + loc_opts_edit
                loc_opts_edit = loc_opts_edit + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]

                with st.form("item_edit", clear_on_submit=False):
                    c1,c2,c3 = st.columns(3)
                    with c1:
                        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", value=row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])
                        sel_unit = st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=unit_opts_edit, index=0)
                        unit = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                        if sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": unit = sel_unit
                    with c2:
                        qty = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=int(float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]) if str(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]).strip()!="" else 0), step=1)
                        rop = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=int(float(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"]) if str(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"]).strip()!="" else 0), step=1)
                    with c3:
                        sel_loc = st.selectbox("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=loc_opts_edit, index=0)
                        loc = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                        if sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": loc = sel_loc
                        active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0 if str(row["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]).upper()=="Y" else 1)
                    col_save, col_delete = st.columns([3,1])
                    s_save = col_save.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True)
                    s_del  = col_delete.form_submit_button("üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", use_container_width=True)
                if s_save:
                    items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==pick, ITEMS_HEADERS] = [pick, row["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"], name, unit, qty, rop, loc, "Y" if active=="Y" else "N"]
                    write_df(sh, SHEET_ITEMS, items); st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß"); st.rerun()
                if s_del:
                    items = items[items["‡∏£‡∏´‡∏±‡∏™"]!=pick]; write_df(sh, SHEET_ITEMS, items); st.success(f"‡∏•‡∏ö {pick} ‡πÅ‡∏•‡πâ‡∏ß"); st.rerun()

# -------------------- Tickets page (unchanged UI + fixes) --------------------
def generate_ticket_id() -> str:
    return "TCK-" + datetime.now(TZ).strftime("%Y%m%d-%H%M%S")

def page_tickets(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° / ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Tickets)")

    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    t_cats = read_df(sh, SHEET_TICKET_CATS, TICKET_CAT_HEADERS)

    # Filters
    st.markdown("### ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")
    f1, f2, f3, f4 = st.columns(4)
    with f1:
        statuses = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"]
        status_pick = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", statuses, index=0, key="tk_status")
    with f2:
        br_opts = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ((branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"] + " | " + branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [])
        branch_pick = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", br_opts, index=0, key="tk_branch")
    with f3:
        cat_opts = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else [])
        cat_pick = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", cat_opts, index=0, key="tk_cat")
    with f4:
        q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á/‡∏´‡∏°‡∏ß‡∏î/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)", key="tk_query")

    # Date filter
    dcol1, dcol2 = st.columns(2)
    with dcol1:
        d1 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=(date.today()-timedelta(days=90)), key="tk_d1")
    with dcol2:
        d2 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=date.today(), key="tk_d2")

    view = tickets.copy()
    if not view.empty:
        view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        view = view.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        view = view[(view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= st.session_state["tk_d1"]) & (view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= st.session_state["tk_d2"])]
        if status_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == status_pick]
        if branch_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏™‡∏≤‡∏Ç‡∏≤"] == branch_pick]
        if "cat_pick" in locals() and cat_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"] == cat_pick]
        if q:
            mask = (view["‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"].str.contains(q, case=False, na=False) |
                    view["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].str.contains(q, case=False, na=False) |
                    view["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"].str.contains(q, case=False, na=False))
            view = view[mask]

    st.markdown("### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)")
    chosen_tid = None
    if hasattr(st, "data_editor"):
        show = view.copy()
        show["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] = False
        ed = st.data_editor(
            show[["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å","TicketID","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]],
            use_container_width=True, height=300, num_rows="fixed",
            column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn(help="‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticket")}
        )
        picked = ed[ed["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] == True]
        if not picked.empty:
            chosen_tid = str(picked.iloc[0]["TicketID"])
    else:
        st.dataframe(view.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", ascending=False), height=300, use_container_width=True)

    st.markdown("---")
    t_add, t_update = st.tabs(["‚ûï ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà","üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"])

    with t_add:
        with st.form("tk_new", clear_on_submit=True):
            c1,c2,c3 = st.columns(3)
            with c1:
                branch_sel = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", br_opts[1:] if len(br_opts)>1 else ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"])
                if branch_sel == "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á":
                    branch_sel = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="")
                reporter = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value="")
            with c2:
                tkc_opts = ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else []) + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                pick_c = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", options=tkc_opts if tkc_opts else ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"], key="tk_new_cat_sel")
                cate_custom = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="" if pick_c!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else "", disabled=(pick_c!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                cate = pick_c if pick_c != "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else cate_custom
                assignee = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö (IT)", value=st.session_state.get("user",""))
            with c3:
                detail = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", height=100)
                note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value="")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", use_container_width=True)
        if s:
            tid = generate_ticket_id()
            row = [tid, get_now_str(), branch_sel, reporter, cate, detail, "‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", assignee, get_now_str(), note]
            append_row(sh, SHEET_TICKETS, row)
            st.success(f"‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Ticket: {tid})")
            st.rerun()

    with t_update:
        if tickets.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï Tickets")
        else:
            labels = [f'{r["TicketID"]} | {str(r["‡∏™‡∏≤‡∏Ç‡∏≤"])}' for _, r in tickets.iterrows()]
            if chosen_tid and any(x.startswith(chosen_tid+" |") for x in labels):
                default_idx = labels.index(next(x for x in labels if x.startswith(chosen_tid+" |")))
            else:
                default_idx = 0
            pick_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticket", options=["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"] + labels, index=default_idx+1 if labels else 0, key="tk_pick")
            if pick_label != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --":
                pick_id = pick_label.split(" | ", 1)[0]
                row = tickets[tickets["TicketID"] == pick_id].iloc[0]
                st.subheader(f"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Ticket: {pick_id}")
                with st.form("tk_edit", clear_on_submit=False):
                    c1, c2 = st.columns(2)
                    with c1:
                        t_branch = st.text_input("‡∏™‡∏≤‡∏Ç‡∏≤", value=str(row.get("‡∏™‡∏≤‡∏Ç‡∏≤", "")))
                        t_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå","‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå","‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢","‡∏≠‡∏∑‡πà‡∏ô‡πÜ"], index=3)
                    with c2:
                        t_owner = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value=str(row.get("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","")))
                        statuses_edit = ["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"]
                        try:
                            idx_default = statuses_edit.index(str(row.get("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á")))
                        except ValueError:
                            idx_default = 0
                        t_status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", statuses_edit, index=idx_default)
                        t_assignee = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", value=str(row.get("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","")))
                    t_desc = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", value=str(row.get("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","")), height=120)
                    t_note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value=str(row.get("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","")))
                    fcol1, fcol2, fcol3 = st.columns(3)
                    submit_update = fcol1.form_submit_button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
                    submit_delete = fcol3.form_submit_button("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

                if submit_update:
                    try:
                        idx = tickets.index[tickets["TicketID"] == pick_id][0]
                        tickets.at[idx, "‡∏™‡∏≤‡∏Ç‡∏≤"] = t_branch
                        tickets.at[idx, "‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"] = t_owner
                        tickets.at[idx, "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"] = t_desc
                        tickets.at[idx, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = t_status
                        tickets.at[idx, "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"] = t_assignee
                        tickets.at[idx, "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"] = t_note
                        tickets.at[idx, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"] = get_now_str()
                        write_df(sh, SHEET_TICKETS, tickets)
                        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                if submit_delete:
                    try:
                        tickets2 = tickets[tickets["TicketID"] != pick_id].copy()
                        write_df(sh, SHEET_TICKETS, tickets2)
                        st.success("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# -------------------- Issue/Receive page (RESTORED multi-issue) --------------------
def page_issue_out_multiN(sh):
    """‡πÄ‡∏ö‡∏¥‡∏Å (OUT): ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏î‡πâ)"""
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)

    if items.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", icon="‚ÑπÔ∏è"); return

    # 1) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≠
    bopt = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≠", options=(branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]+" | "+branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [])
    branch_code = bopt.split(" | ")[0] if bopt else ""

    # 2) ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å
    n_rows = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ", 1, 50, 5, 1)
    st.markdown("**‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á)**")

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° options ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    opts = []
    for _, r in items.iterrows():
        remain = int(pd.to_numeric(r["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce") or 0)
        opts.append(f'{r["‡∏£‡∏´‡∏±‡∏™"]} | {r["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]} (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remain})')

    df_template = pd.DataFrame({"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": [""]*n_rows, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": [1]*n_rows})
    ed = st.data_editor(
        df_template,
        use_container_width=True,
        hide_index=True,
        num_rows="dynamic",
        column_config={
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": st.column_config.SelectboxColumn(options=opts, required=False),
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": st.column_config.NumberColumn(min_value=1, step=1)
        },
        key="issue_out_multiN",
    )

    note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", value="")
    manual_out = st.checkbox("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á (OUT)", value=False, key="out_manual")
    if manual_out:
        d = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (OUT)", value=datetime.now(TZ).date(), key="out_d")
        t = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤ (OUT)", value=datetime.now(TZ).time().replace(microsecond=0), key="out_t")
        ts_str = fmt_dt(combine_date_time(d, t))
    else:
        ts_str = None

    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", type="primary", disabled=(not branch_code)):
        txns = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
        errors = []
        processed = 0
        items_local = items.copy()

        for _, r in ed.iterrows():
            sel = str(r.get("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£","") or "").strip()
            qty = int(pd.to_numeric(r.get("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", 0), errors="coerce") or 0)
            if not sel or qty <= 0:
                continue

            code_sel = sel.split(" | ")[0]
            row_sel = items_local[items_local["‡∏£‡∏´‡∏±‡∏™"]==code_sel]
            if row_sel.empty:
                errors.append(f"{code_sel}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á")
                continue
            row_sel = row_sel.iloc[0]
            remain = int(pd.to_numeric(row_sel["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce") or 0)
            if qty > remain:
                errors.append(f"{code_sel}: ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ({remain})")
                continue

            new_remain = remain - qty
            items_local.loc[items_local["‡∏£‡∏´‡∏±‡∏™"]==code_sel, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = str(new_remain)

            txn = [str(uuid.uuid4())[:8], ts_str if ts_str else get_now_str(),
                   "OUT", code_sel, row_sel["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], branch_code, str(qty), get_username(), note]
            txns = pd.concat([txns, pd.DataFrame([txn], columns=TXNS_HEADERS)], ignore_index=True)
            processed += 1

        if processed > 0:
            write_df(sh, SHEET_ITEMS, items_local)
            write_df(sh, SHEET_TXNS, txns)
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß {processed} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚úÖ")
            st.rerun()
        else:
            st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", icon="‚ö†Ô∏è")
        if errors:
            st.warning(pd.DataFrame({"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î": errors}))

def page_issue_receive(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üßæ ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
    if st.session_state.get("role") not in ("admin","staff"):
        st.info("‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏ä‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ")
        st.markdown("</div>", unsafe_allow_html=True); return

    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    if items.empty:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á")
        st.markdown("</div>", unsafe_allow_html=True); return

    t1,t2 = st.tabs(["‡πÄ‡∏ö‡∏¥‡∏Å (OUT) ‚Äî ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á","‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (IN)"])

    with t1:
        page_issue_out_multiN(sh)

    with t2:
        with st.form("recv", clear_on_submit=True):
            c1,c2 = st.columns([2,1])
            with c1: item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", options=items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], key="recv_item")
            with c2: qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", min_value=1, value=1, step=1, key="recv_qty")
            branch = st.text_input("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤/‡πÄ‡∏•‡∏Ç PO", key="recv_branch"); note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤-‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å", key="recv_note")
            st.markdown("**‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤**")
            manual_in = st.checkbox("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á ", value=False, key="in_manual")
            if manual_in:
                d = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=datetime.now(TZ).date(), key="in_d")
                t = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤", value=datetime.now(TZ).time().replace(microsecond=0), key="in_t")
                ts_str = fmt_dt(combine_date_time(d, t))
            else:
                ts_str = None
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", use_container_width=True)
        if s:
            code = item.split(" | ")[0]
            ok = adjust_stock(sh, code, qty, st.session_state.get("user","unknown"), branch, note, "IN", ts_str=ts_str)
            if ok: st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"); st.rerun()

# -------------------- Reports page --------------------
def is_test_text(s: str) -> bool:
    s = str(s).lower()
    return ("test" in s) or ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö" in s)

def page_reports(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô / ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")

    txns = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    br_map = {str(r["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]).strip(): f'{str(r["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]).strip()} | {str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).strip()}' for _, r in branches.iterrows()} if not branches.empty else {}

    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)

    if "report_d1" not in st.session_state or "report_d2" not in st.session_state:
        today = datetime.now(TZ).date()
        st.session_state["report_d1"] = today - timedelta(days=30)
        st.session_state["report_d2"] = today

    def _set_range(days=None, today=False, this_month=False, this_year=False):
        nowd = datetime.now(TZ).date()
        if today:
            st.session_state["report_d1"] = nowd
            st.session_state["report_d2"] = nowd
        elif this_month:
            st.session_state["report_d1"] = nowd.replace(day=1)
            st.session_state["report_d2"] = nowd
        elif this_year:
            st.session_state["report_d1"] = date(nowd.year, 1, 1)
            st.session_state["report_d2"] = nowd
        elif days is not None:
            st.session_state["report_d1"] = nowd - timedelta(days=days-1)
            st.session_state["report_d2"] = nowd

    st.markdown("### ‚è±Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß")
    bcols = st.columns(6)
    with bcols[0]: st.button("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", on_click=_set_range, kwargs=dict(today=True))
    with bcols[1]: st.button("7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", on_click=_set_range, kwargs=dict(days=7))
    with bcols[2]: st.button("30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", on_click=_set_range, kwargs=dict(days=30))
    with bcols[3]: st.button("90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", on_click=_set_range, kwargs=dict(days=90))
    with bcols[4]: st.button("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", on_click=_set_range, kwargs=dict(this_month=True))
    with bcols[5]: st.button("‡∏õ‡∏µ‡∏ô‡∏µ‡πâ", on_click=_set_range, kwargs=dict(this_year=True))

    with st.expander("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏á (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î '‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ')", expanded=False):
        d1m = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)", value=st.session_state["report_d1"])
        d2m = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)", value=st.session_state["report_d2"])
        st.button("‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ", on_click=lambda: (st.session_state.__setitem__("report_d1", d1m),
                                                st.session_state.__setitem__("report_d2", d2m)))

    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏´‡∏±‡∏™/‡∏™‡∏≤‡∏Ç‡∏≤/‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)")

    d1 = st.session_state["report_d1"]
    d2 = st.session_state["report_d2"]
    st.caption(f"‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: **{d1} ‚Üí {d2}**")

    if not txns.empty:
        df_f = txns.copy()
        df_f["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(df_f["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
        df_f = df_f.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        df_f = df_f[(df_f["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= d1) & (df_f["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= d2)]
        if q:
            mask_q = (
                df_f["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].str.contains(q, case=False, na=False) |
                df_f["‡∏£‡∏´‡∏±‡∏™"].str.contains(q, case=False, na=False) |
                df_f["‡∏™‡∏≤‡∏Ç‡∏≤"].str.contains(q, case=False, na=False)
            )
            df_f = df_f[mask_q]
    else:
        df_f = pd.DataFrame(columns=TXNS_HEADERS)

    if not tickets.empty:
        tdf = tickets.copy()
        tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        tdf = tdf.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        tdf = tdf[(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= d1) & (tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= d2)]
        if q:
            mask_t = (
                (tdf["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"].astype(str).str.contains(q, case=False, na=False)) |
                (tdf["‡∏™‡∏≤‡∏Ç‡∏≤"].astype(str).str.contains(q, case=False, na=False)) |
                (tdf["‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"].astype(str).str.contains(q, case=False, na=False))
            )
            if "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" in tdf.columns:
                mask_t = mask_t | tdf["‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"].astype(str).str.contains(q, case=False, na=False)
            tdf = tdf[mask_t]
        if "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" not in tdf.columns:
            def _derive_subject(x):
                s = str(x or "").strip().splitlines()[0]
                return s[:60] if s else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
            tdf["‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"] = tdf["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"].apply(_derive_subject)
    else:
        tdf = pd.DataFrame(columns=TICKETS_HEADERS + ["‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"])

    tOut, tTickets, tW, tM, tY = st.tabs(["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (OUT)", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤", "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏£‡∏≤‡∏¢‡∏õ‡∏µ"])

    with tOut:
        out_df = df_f[df_f["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "OUT"].copy().sort_values("‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", ascending=False)
        cols = [c for c in ["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "‡∏£‡∏´‡∏±‡∏™"] if c in out_df.columns]
        st.dataframe(out_df[cols], height=320, use_container_width=True)
        # --- ADD: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á OUT ‡πÄ‡∏õ‡πá‡∏ô PDF (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô) ---
        with st.expander("üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô OUT ‡πÄ‡∏õ‡πá‡∏ô PDF", expanded=False):
            up_logo = st.file_uploader("‡πÇ‡∏•‡πÇ‡∏Å‡πâ (PNG/JPG) ‚Äî ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö", type=["png","jpg","jpeg"], key="logo_out")
            logo_path = ""
            if up_logo is not None:
                import os
                os.makedirs("./assets", exist_ok=True)
                logo_path = "./assets/_logo_report_out.png"
                with open(logo_path, "wb") as f:
                    f.write(up_logo.read())

            def _register_thai_fonts_if_needed():
                try:
                    from reportlab.pdfbase import pdfmetrics
                    from reportlab.pdfbase.ttfonts import TTFont
                    import os
                    if "TH_REG" in pdfmetrics.getRegisteredFontNames():
                        return True
                    candidates = [
                        "./fonts/THSarabunNew.ttf", "./fonts/Sarabun-Regular.ttf", "./fonts/NotoSansThai-Regular.ttf"
                    ]
                    for p in ("/usr/share/fonts/truetype", "/usr/share/fonts", "/Library/Fonts", "C:\\Windows\\Fonts"):
                        for fn in ("THSarabunNew.ttf","Sarabun-Regular.ttf","NotoSansThai-Regular.ttf"):
                            candidates.append(os.path.join(p, fn))
                    for reg in candidates:
                        try:
                            if os.path.exists(reg):
                                pdfmetrics.registerFont(TTFont("TH_REG", reg))
                                pdfmetrics.registerFont(TTFont("TH_BOLD", reg))
                                return True
                        except:
                            pass
                except Exception:
                    return False
                return False

            def _make_pdf_from_df(title, df, logo_path=""):
                try:
                    import io
                    from reportlab.pdfgen import canvas
                    from reportlab.lib.pagesizes import A4, landscape
                    from reportlab.lib.units import mm
                    from reportlab.lib.utils import ImageReader
                    from reportlab.pdfbase import pdfmetrics
                    from datetime import datetime as _dt

                    buf = io.BytesIO()
                    c = canvas.Canvas(buf, pagesize=landscape(A4))
                    W, H = landscape(A4)

                    if logo_path:
                        try:
                            c.drawImage(ImageReader(logo_path), 15*mm, H-35*mm, width=25*mm, height=25*mm, preserveAspectRatio=True, mask='auto')
                        except Exception:
                            pass

                    c.setFont("TH_BOLD" if "TH_BOLD" in pdfmetrics.getRegisteredFontNames() else "Helvetica-Bold", 16)
                    c.drawString(45*mm, H-20*mm, str(title))
                    c.setFont("TH_REG" if "TH_REG" in pdfmetrics.getRegisteredFontNames() else "Helvetica", 9)
                    c.drawRightString(W-15*mm, H-15*mm, _dt.now().strftime("%Y-%m-%d %H:%M:%S"))

                    cols_pdf = df.columns.tolist()[:8]
                    x0, y0 = 15*mm, H-45*mm
                    row_h = 8*mm
                    col_w = (W - 30*mm) / max(1, len(cols_pdf))

                    c.setFont("TH_BOLD" if "TH_BOLD" in pdfmetrics.getRegisteredFontNames() else "Helvetica-Bold", 10)
                    for i, col in enumerate(cols_pdf):
                        c.drawString(x0 + i*col_w + 2, y0, str(col))
                    c.line(x0, y0-2, x0 + col_w*len(cols_pdf), y0-2)

                    c.setFont("TH_REG" if "TH_REG" in pdfmetrics.getRegisteredFontNames() else "Helvetica", 9)
                    y = y0 - row_h
                    for r in df[cols_pdf].astype(str).values.tolist()[:50]:
                        for i, val in enumerate(r):
                            c.drawString(x0 + i*col_w + 2, y, val[:40])
                        y -= row_h
                        if y < 20*mm:
                            break

                    c.showPage()
                    c.save()
                    buf.seek(0)
                    return buf.getvalue()
                except Exception as e:
                    st.error(f"‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                    return None

            if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á PDF (OUT)", key="btn_pdf_out"):
                try:
                    import reportlab
                except Exception:
                    st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à reportlab ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:  pip install reportlab")
                else:
                    _register_thai_fonts_if_needed()
                    pdf_bytes = _make_pdf_from_df(f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (OUT) {d1} ‚Üí {d2}", out_df[cols], logo_path=logo_path)
                    if pdf_bytes:
                        st.download_button(
                            "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF (OUT)",
                            data=pdf_bytes,
                            file_name=f"report_out_{d1}_{d2}.pdf",
                            mime="application/pdf",
                            use_container_width=True
                        )

    with tTickets:
        st.markdown("#### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        show_cols = [c for c in ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","TicketID"] if c in tdf.columns]
        tdf_sorted = tdf.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", ascending=False)
        st.dataframe(tdf_sorted[show_cols], height=320, use_container_width=True)
        # --- ADD: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á Tickets ‡πÄ‡∏õ‡πá‡∏ô PDF (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô) ---
        with st.expander("üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Tickets ‡πÄ‡∏õ‡πá‡∏ô PDF", expanded=False):
            up_logo2 = st.file_uploader("‡πÇ‡∏•‡πÇ‡∏Å‡πâ (PNG/JPG) ‚Äî ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö", type=["png","jpg","jpeg"], key="logo_tk")
            logo_path2 = ""
            if up_logo2 is not None:
                import os
                os.makedirs("./assets", exist_ok=True)
                logo_path2 = "./assets/_logo_report_tickets.png"
                with open(logo_path2, "wb") as f:
                    f.write(up_logo2.read())

            def _register_thai_fonts_if_needed_tk():
                try:
                    from reportlab.pdfbase import pdfmetrics
                    from reportlab.pdfbase.ttfonts import TTFont
                    import os
                    if "TH_REG" in pdfmetrics.getRegisteredFontNames():
                        return True
                    candidates = [
                        "./fonts/THSarabunNew.ttf", "./fonts/Sarabun-Regular.ttf", "./fonts/NotoSansThai-Regular.ttf"
                    ]
                    for p in ("/usr/share/fonts/truetype", "/usr/share/fonts", "/Library/Fonts", "C:\\Windows\\Fonts"):
                        for fn in ("THSarabunNew.ttf","Sarabun-Regular.ttf","NotoSansThai-Regular.ttf"):
                            candidates.append(os.path.join(p, fn))
                    for reg in candidates:
                        try:
                            if os.path.exists(reg):
                                pdfmetrics.registerFont(TTFont("TH_REG", reg))
                                pdfmetrics.registerFont(TTFont("TH_BOLD", reg))
                                return True
                        except:
                            pass
                except Exception:
                    return False
                return False

            def _make_pdf_from_df_tk(title, df, logo_path=""):
                try:
                    import io
                    from reportlab.pdfgen import canvas
                    from reportlab.lib.pagesizes import A4, landscape
                    from reportlab.lib.units import mm
                    from reportlab.lib.utils import ImageReader
                    from reportlab.pdfbase import pdfmetrics
                    from datetime import datetime as _dt

                    buf = io.BytesIO()
                    c = canvas.Canvas(buf, pagesize=landscape(A4))
                    W, H = landscape(A4)

                    if logo_path:
                        try:
                            c.drawImage(ImageReader(logo_path), 15*mm, H-35*mm, width=25*mm, height=25*mm, preserveAspectRatio=True, mask='auto')
                        except Exception:
                            pass

                    c.setFont("TH_BOLD" if "TH_BOLD" in pdfmetrics.getRegisteredFontNames() else "Helvetica-Bold", 16)
                    c.drawString(45*mm, H-20*mm, str(title))
                    c.setFont("TH_REG" if "TH_REG" in pdfmetrics.getRegisteredFontNames() else "Helvetica", 9)
                    c.drawRightString(W-15*mm, H-15*mm, _dt.now().strftime("%Y-%m-%d %H:%M:%S"))

                    cols_pdf = df.columns.tolist()[:8]
                    x0, y0 = 15*mm, H-45*mm
                    row_h = 8*mm
                    col_w = (W - 30*mm) / max(1, len(cols_pdf))

                    c.setFont("TH_BOLD" if "TH_BOLD" in pdfmetrics.getRegisteredFontNames() else "Helvetica-Bold", 10)
                    for i, col in enumerate(cols_pdf):
                        c.drawString(x0 + i*col_w + 2, y0, str(col))
                    c.line(x0, y0-2, x0 + col_w*len(cols_pdf), y0-2)

                    c.setFont("TH_REG" if "TH_REG" in pdfmetrics.getRegisteredFontNames() else "Helvetica", 9)
                    y = y0 - row_h
                    for r in df[cols_pdf].astype(str).values.tolist()[:50]:
                        for i, val in enumerate(r):
                            c.drawString(x0 + i*col_w + 2, y, val[:40])
                        y -= row_h
                        if y < 20*mm:
                            break

                    c.showPage()
                    c.save()
                    buf.seek(0)
                    return buf.getvalue()
                except Exception as e:
                    st.error(f"‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                    return None

            if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á PDF (Tickets)", key="btn_pdf_tickets"):
                try:
                    import reportlab
                except Exception:
                    st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à reportlab ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:  pip install reportlab")
                else:
                    _register_thai_fonts_if_needed_tk()
                    pdf_bytes = _make_pdf_from_df_tk(f"‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ {d1} ‚Üí {d2}", tdf_sorted[show_cols], logo_path=logo_path2)
                    if pdf_bytes:
                        st.download_button(
                            "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF (Tickets)",
                            data=pdf_bytes,
                            file_name=f"report_tickets_{d1}_{d2}.pdf",
                            mime="application/pdf",
                            use_container_width=True
                        )

    def group_period(df, period="ME"):
        dfx = df.copy()
        dfx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(dfx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors='coerce')
        dfx = dfx.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        return dfx.groupby([pd.Grouper(key="‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", freq=period), "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()

    with tW:
        g = group_period(df_f, "W")
        st.dataframe(g, height=220, use_container_width=True)

    with tM:
        g = group_period(df_f, "ME")
        st.dataframe(g, height=220, use_container_width=True)

    with tY:
        g = group_period(df_f, "YE")
        st.dataframe(g, height=220, use_container_width=True)

    st.markdown("</div>", unsafe_allow_html=True)

# -------------------- Import/Modify page --------------------
def _read_upload_df(file):
    if file is None: return None, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"
    name = file.name.lower()
    try:
        if name.endswith(".csv"):
            df = pd.read_csv(file, dtype=str).fillna("")
        elif name.endswith(".xlsx") or name.endswith(".xls"):
            df = pd.read_excel(file, dtype=str).fillna("")
        else:
            return None, "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ .csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx"
        df = df.applymap(lambda x: str(x).strip())
        return df, None
    except Exception as e:
        return None, f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"

def page_import(sh):
    st.subheader("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà / ‡∏™‡∏≤‡∏Ç‡∏≤ / ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå / ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤ / ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    t1, t2, t3, t4, t5 = st.tabs(["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"])

    # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    with t1:
        up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (CSV/Excel)", type=["csv","xlsx"], key="up_cat")
        if up:
            df, err = _read_upload_df(up)
            if err: st.error(err)
            else:
                st.dataframe(df.head(50), height=220, use_container_width=True)
                if not set(["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).issubset(df.columns):
                    st.error("‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢: ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î")
                else:
                    if st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", use_container_width=True, key="btn_imp_cat"):
                        cur = read_df(sh, SHEET_CATS, CATS_HEADERS)
                        for _, r in df.iterrows():
                            code_c = str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).strip()
                            name_c = str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).strip()
                            if code_c == "": continue
                            if (cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code_c).any():
                                cur.loc[cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code_c, ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]] = [code_c, name_c]
                            else:
                                cur = pd.concat([cur, pd.DataFrame([[code_c, name_c]], columns=CATS_HEADERS)], ignore_index=True)
                        write_df(sh, SHEET_CATS, cur); st.success("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        with st.form("form_add_cat", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1: code_c = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î*", max_chars=10)
            with col2: name_c = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î*")
            s = st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", use_container_width=True)
        if s:
            if not code_c or not name_c: st.warning("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                cur = read_df(sh, SHEET_CATS, CATS_HEADERS)
                if (cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code_c).any(): st.error("‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    cur = pd.concat([cur, pd.DataFrame([[code_c.strip(), name_c.strip()]], columns=CATS_HEADERS)], ignore_index=True)
                    write_df(sh, SHEET_CATS, cur); st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    # ‡∏™‡∏≤‡∏Ç‡∏≤
    with t2:
        up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≤‡∏Ç‡∏≤ (CSV/Excel)", type=["csv","xlsx"], key="up_br")
        if up:
            df, err = _read_upload_df(up)
            if err: st.error(err)
            else:
                st.dataframe(df.head(50), height=220, use_container_width=True)
                if not set(["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).issubset(df.columns):
                    st.error("‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢: ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤, ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤")
                else:
                    if st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏™‡∏≤‡∏Ç‡∏≤", use_container_width=True, key="btn_imp_br"):
                        cur = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
                        for _, r in df.iterrows():
                            code_b = str(r["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]).strip()
                            name_b = str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).strip()
                            if code_b == "": continue
                            if (cur["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]==code_b).any():
                                cur.loc[cur["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]==code_b, ["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]] = [code_b, name_b]
                            else:
                                cur = pd.concat([cur, pd.DataFrame([[code_b, name_b]], columns=BR_HEADERS)], ignore_index=True)
                        write_df(sh, SHEET_BRANCHES, cur); st.success("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        with st.form("form_add_branch", clear_on_submit=True):
            col1, col2 = st.columns(2)
            with col1: code_b = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤*", max_chars=10)
            with col2: name_b = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤*")
            s2 = st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≤‡∏Ç‡∏≤", use_container_width=True)
        if s2:
            if not code_b or not name_b: st.warning("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                cur = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
                if (cur["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]==code_b).any(): st.error("‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    cur = pd.concat([cur, pd.DataFrame([[code_b.strip(), name_b.strip()]], columns=BR_HEADERS)], ignore_index=True)
                    write_df(sh, SHEET_BRANCHES, cur); st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    # ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    with t3:
        up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (CSV/Excel)", type=["csv","xlsx"], key="up_it")
        if up:
            df, err = _read_upload_df(up)
            if err: st.error(err)
            else:
                st.dataframe(df.head(50), height=260, use_container_width=True)
                missing_cols = [c for c in ["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"] if c not in df.columns]
                if missing_cols:
                    st.error("‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå, ‡∏´‡∏ô‡πà‡∏ß‡∏¢, ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠, ‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠, ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö (‡∏£‡∏´‡∏±‡∏™, ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô)")
                else:
                    if st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", use_container_width=True, key="btn_imp_items"):
                        cur = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
                        cats_df = read_df(sh, SHEET_CATS, CATS_HEADERS)
                        valid_cats = set(cats_df["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"].tolist()) if not cats_df.empty else set()
                        errs=[]; add=0; upd=0; seen=set()
                        for i, r in df.iterrows():
                            code_i = str(r.get("‡∏£‡∏´‡∏±‡∏™","")).strip().upper()
                            cat  = str(r.get("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","")).strip()
                            name = str(r.get("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","")).strip()
                            unit = str(r.get("‡∏´‡∏ô‡πà‡∏ß‡∏¢","")).strip()
                            qty  = str(r.get("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","")).strip()
                            rop  = str(r.get("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","")).strip()
                            loc  = str(r.get("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","")).strip()
                            active = str(r.get("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô","Y")).strip().upper() or "Y"
                            if name=="" or unit=="":
                                errs.append({"row":i+1,"error":"‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏ß‡πà‡∏≤‡∏á"}); continue
                            if cat not in valid_cats:
                                errs.append({"row":i+1,"error":"‡∏´‡∏°‡∏ß‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö","cat":cat}); continue
                            try: qty = int(float(qty))
                            except: qty = 0
                            try: rop = int(float(rop))
                            except: rop = 0
                            qty = max(0, qty); rop = max(0, rop)
                            if code_i=="": code_i = generate_item_code(sh, cat)
                            if code_i in seen: errs.append({"row":i+1,"error":"‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå/‡∏ï‡∏≤‡∏£‡∏≤‡∏á","code":code_i}); continue
                            seen.add(code_i)
                            if (cur["‡∏£‡∏´‡∏±‡∏™"]==code_i).any():
                                cur.loc[cur["‡∏£‡∏´‡∏±‡∏™"]==code_i, ITEMS_HEADERS] = [code_i, cat, name, unit, qty, rop, loc, active]; upd+=1
                            else:
                                cur = pd.concat([cur, pd.DataFrame([[code_i, cat, name, unit, qty, rop, loc, active]], columns=ITEMS_HEADERS)], ignore_index=True); add+=1
                        write_df(sh, SHEET_ITEMS, cur)
                        st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {add} ‡∏£‡∏≤‡∏¢ / ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {upd} ‡∏£‡∏≤‡∏¢")
                        if errs: st.warning(pd.DataFrame(errs))

    # ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    with t4:
        up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (CSV/Excel)", type=["csv","xlsx"], key="up_tkc")
        if up:
            df, err = _read_upload_df(up)
            if err: st.error(err)
            else:
                st.dataframe(df.head(50), height=220, use_container_width=True)
                if not set(["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).issubset(df.columns):
                    st.error("‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢: ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
                else:
                    if st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", use_container_width=True, key="btn_imp_tkc"):
                        cur = read_df(sh, SHEET_TICKET_CATS, TICKET_CAT_HEADERS)
                        for _, r in df.iterrows():
                            code_t = str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).strip()
                            name_t = str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).strip()
                            if code_t == "": continue
                            if (cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]==code_t).any():
                                cur.loc[cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]==code_t, ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]] = [code_t, name_t]
                            else:
                                cur = pd.concat([cur, pd.DataFrame([[code_t, name_t]], columns=TICKET_CAT_HEADERS)], ignore_index=True)
                        write_df(sh, SHEET_TICKET_CATS, cur); st.success("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    # ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    with t5:
        up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (CSV/Excel)", type=["csv","xlsx"], key="up_users")
        if up:
            df, err = _read_upload_df(up)
            if err: st.error(err)
            else:
                st.dataframe(df.head(50), height=220, use_container_width=True)
                if "Username" not in df.columns:
                    st.error("‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Username")
                else:
                    if st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", use_container_width=True, key="btn_imp_users"):
                        cur = read_df(sh, SHEET_USERS, USERS_HEADERS)
                        for c in USERS_HEADERS:
                            if c not in cur.columns: cur[c] = ""
                        cur = cur[USERS_HEADERS].fillna("")
                        add=upd=0; errs=[]
                        for i, r in df.iterrows():
                            username = str(r.get("Username","")).strip()
                            if username=="":
                                errs.append({"row":i+1,"error":"‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á Username"}); 
                                continue
                            display = str(r.get("DisplayName","")).strip()
                            role    = str(r.get("Role","staff")).strip() or "staff"
                            active  = str(r.get("Active","Y")).strip() or "Y"
                            pwd_hash = None
                            plain = str(r.get("Password","")).strip() if "Password" in df.columns else ""
                            if plain:
                                try:
                                    pwd_hash = bcrypt.hashpw(plain.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
                                except Exception as e:
                                    errs.append({"row":i+1,"error":f"‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}","Username":username}); 
                                    continue
                            else:
                                if "PasswordHash" in df.columns:
                                    ph = str(r.get("PasswordHash","")).strip()
                                    if ph: pwd_hash = ph
                            if (cur["Username"]==username).any():
                                idx = cur.index[cur["Username"]==username][0]
                                cur.at[idx,"DisplayName"]=display
                                cur.at[idx,"Role"]=role
                                cur.at[idx,"Active"]=active
                                if pwd_hash: cur.at[idx,"PasswordHash"]=pwd_hash
                                upd+=1
                            else:
                                if not pwd_hash:
                                    errs.append({"row":i+1,"error":"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ Password ‡∏´‡∏£‡∏∑‡∏≠ PasswordHash","Username":username}); 
                                    continue
                                new_row = pd.DataFrame([{
                                    "Username": username,
                                    "DisplayName": display,
                                    "Role": role,
                                    "PasswordHash": pwd_hash,
                                    "Active": active,
                                }])
                                cur = pd.concat([cur, new_row], ignore_index=True); add+=1
                        write_df(sh, SHEET_USERS, cur)
                        st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {add} ‡∏£‡∏≤‡∏¢ / ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {upd} ‡∏£‡∏≤‡∏¢")
                        if errs: st.warning(pd.DataFrame(errs))

        st.markdown("##### ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÑ‡∏ü‡∏•‡πå")
        tpl = "Username,DisplayName,Role,Active,Password\nuser001,‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠,staff,Y,1234\n"
        st.download_button("‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (CSV)", data=tpl.encode("utf-8-sig"),
                           file_name="template_users.csv", mime="text/csv", use_container_width=True)

# -------------------- Users page (select row to edit) --------------------
def page_users(sh):
    st.subheader("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ & ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Admin)")
    users = read_df(sh, SHEET_USERS, USERS_HEADERS)
    for c in USERS_HEADERS:
        if c not in users.columns: users[c] = ""
    users = users[USERS_HEADERS].fillna("")

    st.markdown("#### üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡∏¥‡πä‡∏Å '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)")
    chosen_username = None
    if hasattr(st, "data_editor"):
        users_display = users.copy()
        users_display["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] = False
        edited_table = st.data_editor(
            users_display[["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å","Username","DisplayName","Role","PasswordHash","Active"]],
            use_container_width=True, height=300, num_rows="fixed",
            column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn(help="‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")}
        )
        picked = edited_table[edited_table["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] == True]
        if not picked.empty:
            chosen_username = str(picked.iloc[0]["Username"])
    else:
        st.dataframe(users, use_container_width=True, height=300)

    tab_add, tab_edit = st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"])

    with tab_add:
        with st.form("form_add_user", clear_on_submit=True):
            c1, c2 = st.columns([2,1])
            with c1:
                new_user = st.text_input("Username*")
                new_disp = st.text_input("Display Name")
            with c2:
                new_role = st.selectbox("Role", ["admin","staff","viewer"], index=1)
                new_active = st.selectbox("Active", ["Y","N"], index=0)
            new_pwd = st.text_input("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô*", type="password")
            btn_add = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà", use_container_width=True, type="primary")

        if btn_add:
            if not new_user.strip() or not new_pwd.strip():
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"); st.stop()
            if (users["Username"] == new_user).any():
                st.error("‡∏°‡∏µ Username ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"); st.stop()
            ph = bcrypt.hashpw(new_pwd.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
            new_row = pd.DataFrame([{
                "Username": new_user.strip(),
                "DisplayName": new_disp.strip(),
                "Role": new_role,
                "PasswordHash": ph,
                "Active": new_active,
            }])
            users2 = pd.concat([users, new_row], ignore_index=True)
            try:
                write_df(sh, SHEET_USERS, users2)
                st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); st.rerun()
            except Exception as e:
                st.error(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    with tab_edit:
        default_user = st.session_state.get("edit_user","")
        if chosen_username:
            st.session_state["edit_user"] = chosen_username
            default_user = chosen_username

        sel = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
            [""] + users["Username"].tolist(),
            index=([""] + users["Username"].tolist()).index(default_user) if default_user in users["Username"].tolist() else 0
        )

        target_user = sel or ""
        if not target_user:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"); return

        row = users[users["Username"] == target_user]
        if row.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"); return
        data = row.iloc[0].to_dict()

        with st.form("form_edit_user", clear_on_submit=False):
            c1, c2 = st.columns([2,1])
            with c1:
                username = st.text_input("Username", value=data["Username"], disabled=True)
                display  = st.text_input("Display Name", value=data["DisplayName"])
            with c2:
                role  = st.selectbox("Role", ["admin","staff","viewer"],
                                     index=["admin","staff","viewer"].index(data["Role"]) if data["Role"] in ["admin","staff","viewer"] else 1)
                active = st.selectbox("Active", ["Y","N"],
                                      index=["Y","N"].index(data["Active"]) if data["Active"] in ["Y","N"] else 0)
            pwd = st.text_input("‡∏ï‡∏±‡πâ‡∏á/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)", type="password")

            c3, c4 = st.columns([1,1])
            btn_save = c3.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True, type="primary")
            btn_del  = c4.form_submit_button("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ", use_container_width=True)

        if btn_del:
            if username.lower() == "admin":
                st.error("‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ admin")
            else:
                users2 = users[users["Username"] != username]
                try:
                    write_df(sh, SHEET_USERS, users2)
                    st.success(f"‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {username} ‡πÅ‡∏•‡πâ‡∏ß")
                    st.session_state.pop("edit_user", None)
                    st.rerun()
                except Exception as e:
                    st.error(f"‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

        if btn_save:
            idx = users.index[users["Username"] == username][0]
            users.at[idx, "DisplayName"] = display
            users.at[idx, "Role"]        = role
            users.at[idx, "Active"]      = active
            if pwd.strip():
                ph = bcrypt.hashpw(pwd.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
                users.at[idx, "PasswordHash"] = ph

            try:
                write_df(sh, SHEET_USERS, users)
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                st.rerun()
            except Exception as e:
                st.error(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# -------------------- Settings --------------------
def page_settings():
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("‚öôÔ∏è Settings"); st.caption("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏ä‡∏£‡πå Google Sheet ‡πÉ‡∏´‡πâ service account ‡πÅ‡∏•‡πâ‡∏ß")
    url = st.text_input("Google Sheet URL", value=st.session_state.get("sheet_url", DEFAULT_SHEET_URL))
    st.session_state["sheet_url"] = url
    if st.button("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠/‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô", use_container_width=True):
        try:
            sh = open_sheet_by_url(url); ensure_sheets_exist(sh); st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        except Exception as e:
            st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    st.markdown("</div>", unsafe_allow_html=True)

# -------------------- Main --------------------
def main():
    st.set_page_config(page_title=APP_TITLE, page_icon="üß∞", layout="wide")
    st.markdown(MINIMAL_CSS, unsafe_allow_html=True)
    st.title(APP_TITLE); st.caption(APP_TAGLINE)
    setup_responsive()

    ensure_credentials_ui()
    if "sheet_url" not in st.session_state or not st.session_state.get("sheet_url"):
        st.session_state["sheet_url"] = DEFAULT_SHEET_URL

    with st.sidebar:
        st.markdown("---")
        page = st.radio("‡πÄ‡∏°‡∏ô‡∏π", ["üìä Dashboard","üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤","üßæ ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤","üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô","üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‚öôÔ∏è Settings"], index=0)
    # PATCH: direct route for Requests menu
    if isinstance(page, str) and (page == MENU_REQUESTS or page.startswith('üß∫')):
        page_requests(sh)
        return

    sheet_url = st.session_state.get("sheet_url", DEFAULT_SHEET_URL)
    if not sheet_url:
        st.info("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π **Settings** ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏≤‡∏á Google Sheet URL ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"); return
    try:
        sh = open_sheet_by_url(sheet_url)
    except Exception as e:
        st.error(f"‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"); return
    ensure_sheets_exist(sh)

    auth_block(sh)

    if page.startswith("üìä"): page_dashboard(sh)
    elif page.startswith("üì¶"): page_stock(sh)
    elif page.startswith("üõ†Ô∏è"): page_tickets(sh)
    elif page.startswith("üßæ"): page_issue_receive(sh)
    elif page.startswith("üìë"): page_reports(sh)
    elif page.startswith("üë§"): page_users(sh)
    elif page.startswith("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"): page_import(sh)
    elif page.startswith("‚öôÔ∏è"): page_settings()

    st.caption("¬© 2025 IT Stock ¬∑ Streamlit + Google Sheets By AOD. ¬∑ **iTao iT (V.1.1)**")

if __name__ == "__main__":
    main()


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Requests Page Hotfix for iTao iT (Streamlit + Google Sheets)
- Fixes AttributeError: "Can only use .str accessor with string values!"
- Makes column handling robust (Status/Qty/Branch/OrderNo names)
- Adds helpers to ensure Requests / Notifications sheets exist
- Safe to paste into main app (replace existing functions/const) or import functions from here
"""
import streamlit as st
import pandas as pd
from datetime import datetime
import uuid

# ---------- Constants (use these names in main app) ----------
MENU_REQUESTS = "üß∫ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å"
REQUESTS_SHEET = "Requests"
NOTIFS_SHEET = "Notifications"

REQUESTS_HEADERS = [
    "Branch","Requester","CreatedAt","OrderNo",
    "ItemCode","ItemName","Qty",
    "Status","Approver","LastUpdate","Note"
]
NOTIFS_HEADERS = [
    "NotiID","CreatedAt","TargetApp","TargetBranch","Type","RefID","Message","ReadFlag","ReadAt"
]

# ---------- Utilities ----------
def _lower_cols(df: pd.DataFrame):
    return {c: str(c).strip().lower() for c in df.columns}

def _col(df: pd.DataFrame, *candidates: str, default: str | None = None) -> str:
    """
    Resolve a column name by trying multiple candidates (case/space insensitive).
    """
    if df.empty:
        # return the first candidate if df has no cols (won't be used but avoids crash)
        return candidates[0]
    mapping = {str(c).strip().lower(): c for c in df.columns}
    for cand in candidates:
        key = cand.strip().lower()
        if key in mapping:
            return mapping[key]
        # allow thai/english common variations
    # fallback
    return mapping.get(default, default or candidates[0])

def ensure_requests_notifs_sheets(sh):
    """Create Requests / Notifications with headers if missing."""
    ws_names = [w.title for w in sh.worksheets()]
    def _ensure(name: str, headers: list[str]):
        if name not in ws_names:
            ws = sh.add_worksheet(name, rows=1000, cols=max(12, len(headers)+2))
            try:
                import gspread_dataframe as gd
                gd.set_with_dataframe(ws, pd.DataFrame(columns=headers), include_index=False)
            except Exception:
                # fallback: write header row by update
                ws.update("A1", [headers])

    _ensure(REQUESTS_SHEET, REQUESTS_HEADERS)
    _ensure(NOTIFS_SHEET, NOTIFS_HEADERS)

def _normalize_requests_df(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return pd.DataFrame(columns=REQUESTS_HEADERS)

    # normalize basic fields
    # map typical variants to standard names
    cols = {c.lower(): c for c in df.columns}
    def getcol(*cands, default=None):
        for c in cands:
            if c.lower() in cols:
                return cols[c.lower()]
        return default if default in df.columns else cands[0]

    # Create a copy and fill na
    df = df.copy()
    df = df.fillna("")
    # normalize Status as UPPER string ('' for missing)
    if "Status" in df.columns:
        df["Status"] = (
            df["Status"]
            .astype(str)
            .fillna("")
            .map(lambda x: "" if x.strip().lower() in ("nan","none","null") else x)
            .str.upper()
            .str.strip()
        )
    else:
        df["Status"] = ""

    # normalize Qty numeric
    qty_col = getcol("Qty","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","quantity","qty")
    if qty_col in df.columns:
        df[qty_col] = pd.to_numeric(df[qty_col], errors="coerce").fillna(0).astype(int)
        if qty_col != "Qty":
            df["Qty"] = df[qty_col]

    # standardize essential columns if alias exists
    mapping = {
        "Branch": ("Branch","‡∏™‡∏≤‡∏Ç‡∏≤","branchcode","branch_code"),
        "Requester": ("Requester","‡∏ú‡∏π‡πâ‡∏Ç‡∏≠","‡∏Ç‡∏≠‡πÇ‡∏î‡∏¢","requester_name"),
        "CreatedAt": ("CreatedAt","created_at","‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"),
        "OrderNo": ("OrderNo","order_no","‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏Ç‡∏≠","orderid"),
        "ItemCode": ("ItemCode","‡∏£‡∏´‡∏±‡∏™","item_code","code"),
        "ItemName": ("ItemName","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","name","item_name"),
        "Qty": ("Qty","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","qty"),
        "Status": ("Status","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","status"),
        "Approver": ("Approver","‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥","approved_by"),
        "LastUpdate": ("LastUpdate","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","updated_at"),
        "Note": ("Note","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","note"),
    }
    for std, cands in mapping.items():
        if std not in df.columns:
            for cand in cands:
                if cand in df.columns:
                    df[std] = df[cand]
                    break
        # ensure column exists
        if std not in df.columns:
            df[std] = ""

    # keep only the standard order for writing back
    df = df[REQUESTS_HEADERS]
    return df

def _write_df(ws, df: pd.DataFrame):
    """Write dataframe keeping header first row."""
    try:
        import gspread_dataframe as gd
        gd.set_with_dataframe(ws, df, include_index=False)
    except Exception:
        ws.clear()
        ws.update("A1", [list(df.columns)] + df.astype(str).values.tolist())

def _append_notifications(sh, rows_df: pd.DataFrame, message: str):
    ws = sh.worksheet(NOTIFS_SHEET)
    try:
        current = pd.DataFrame(ws.get_all_records())
    except Exception:
        current = pd.DataFrame(columns=NOTIFS_HEADERS)

    if current.empty:
        current = pd.DataFrame(columns=NOTIFS_HEADERS)

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new = []
    for _, r in rows_df.iterrows():
        new.append({
            "NotiID": str(uuid.uuid4())[:8],
            "CreatedAt": now,
            "TargetApp": "branch",
            "TargetBranch": r.get("Branch",""),
            "Type": "request",
            "RefID": r.get("OrderNo",""),
            "Message": message,
            "ReadFlag": "",
            "ReadAt": ""
        })
    current = pd.concat([current, pd.DataFrame(new)], ignore_index=True)
    _write_df(ws, current)

def page_requests(sh):
    """Requests approval page (robust, NaN-safe)"""
    ensure_requests_notifs_sheets(sh)

    ws = sh.worksheet(REQUESTS_SHEET)
    try:
        raw = ws.get_all_records()
    except Exception:
        raw = []

    df = pd.DataFrame(raw)
    df = _normalize_requests_df(df)

    st.header("üß∫ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å (‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤)")
    if df.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠")
        return

    # ---- SAFE filter for pending ----
    status = df["Status"].astype(str).fillna("").str.upper().str.strip()
    pending = df[(status=="") | (status=="PENDING")].copy()
    if pending.empty:
        st.success("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")
        return

    # group by order
    order_nos = pending["OrderNo"].astype(str).fillna("").unique().tolist()
    sel = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å OrderNo", order_nos, index=0 if order_nos else None)
    this = pending[pending["OrderNo"].astype(str) == str(sel)].copy()

    if this.empty:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ OrderNo ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return

    left,right = st.columns([2,1])
    with left:
        st.write(f"**‡∏™‡∏≤‡∏Ç‡∏≤:** {this['Branch'].iloc[0]}  |  **‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:** {this['Requester'].iloc[0]}  |  **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:** {len(this)}")
        st.dataframe(this[["ItemCode","ItemName","Qty"]], use_container_width=True)
    with right:
        st.metric("‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å", int(this["Qty"].sum()))

    c1, c2 = st.columns(2)
    if c1.button("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", use_container_width=True):
        _approve_request_and_cut_stock(sh, this)
        _append_notifications(sh, this, "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß")
        st.success("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        st.experimental_rerun()

    if c2.button("‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò", use_container_width=True):
        _update_requests_status(sh, this, "REJECTED")
        _append_notifications(sh, this, "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò")
        st.warning("‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß")
        st.experimental_rerun()

def _call_adjust_stock_if_exists(sh, r):
    # Try to reuse original stock issue function provided by main app
    fn = st.session_state.get("_adjust_stock_func")
    if fn:
        try:
            fn(sh, item_code=r["ItemCode"], qty=int(r["Qty"]), txn_type="OUT",
               branch=r.get("Branch",""), actor=st.session_state.get("username","system"),
               note=f"Request {r.get('OrderNo','')}")
            return True
        except Exception:
            pass

    # fallback: append minimal OUT txn row (Type/Datetime etc.)
    try:
        ws_txn = sh.worksheet("Transactions")
        existing = pd.DataFrame(ws_txn.get_all_records())
    except Exception:
        existing = pd.DataFrame(columns=["TxnID","‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó","‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"])
    if existing.empty:
        existing = pd.DataFrame(columns=["TxnID","‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó","‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"])
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_row = {
        "TxnID": str(uuid.uuid4())[:8],
        "‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤": now,
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "OUT",
        "‡∏£‡∏´‡∏±‡∏™": r.get("ItemCode",""),
        "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå": r.get("ItemName",""),
        "‡∏™‡∏≤‡∏Ç‡∏≤": r.get("Branch",""),
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": int(r.get("Qty",0)),
        "‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£": st.session_state.get("username","system"),
        "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏": f"Request {r.get('OrderNo','')}"
    }
    existing = pd.concat([existing, pd.DataFrame([new_row])], ignore_index=True)
    _write_df(ws_txn, existing)
    return True

def _approve_request_and_cut_stock(sh, rows_df: pd.DataFrame):
    # reuse stock adjust if main app provided it in session_state
    for _, r in rows_df.iterrows():
        _call_adjust_stock_if_exists(sh, r)
    _update_requests_status(sh, rows_df, "FULFILLED")

def _update_requests_status(sh, rows_df: pd.DataFrame, new_status: str):
    ws = sh.worksheet(REQUESTS_SHEET)
    try:
        df = pd.DataFrame(ws.get_all_records())
    except Exception:
        df = pd.DataFrame(columns=REQUESTS_HEADERS)

    df = _normalize_requests_df(df)

    for _, r in rows_df.iterrows():
        mask = (df["OrderNo"].astype(str) == str(r.get("OrderNo",""))) &                (df["ItemCode"].astype(str) == str(r.get("ItemCode","")))
        df.loc[mask, "Status"] = new_status
        df.loc[mask, "Approver"] = st.session_state.get("username","system")
        df.loc[mask, "LastUpdate"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    _write_df(ws, df)


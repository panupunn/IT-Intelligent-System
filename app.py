#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
iTao iT ‚Äì IT Stock (Streamlit + Google Sheets)
Restored full menu + dashboard controls
Version: V.1.1
"""
import os, io, re, base64, json, uuid, time
from datetime import datetime, date, timedelta, time as dtime

import streamlit as st
import pandas as pd
import altair as alt
import bcrypt
import pytz

from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

import gspread
from gspread.exceptions import APIError, WorksheetNotFound
from google.oauth2.service_account import Credentials

# ========== Compatibility shims ==========
if not hasattr(st, "cache_resource"):
    def _no_cache_decorator(*args, **kwargs):
        def _wrap(fn): return fn
        return _wrap
    st.cache_resource = _no_cache_decorator

# ---------- App constants ----------
APP_TITLE = "‡πÑ‡∏≠‡∏ï‡πâ‡∏≤‡∏ß ‡πÑ‡∏≠‡∏ó‡∏µ (iTao iT)"
APP_TAGLINE = "POWER By ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô=> ‡πÑ‡∏≠‡∏ó‡∏µ‡∏™‡∏∏‡∏î‡∏´‡∏•‡πà‡∏≠"
DEFAULT_SHEET_URL = st.secrets.get("google_sheet_url", "") or \
    "https://docs.google.com/spreadsheets/d/1SGKzZ9WKkRtcmvN3vZj9w2yeM6xNoB6QV3-gtnJY-Bw/edit#gid=0"
TZ = pytz.timezone("Asia/Bangkok")

# Sheets & headers
SHEET_ITEMS      = "Items"
SHEET_TXNS       = "Transactions"
SHEET_USERS      = "Users"
SHEET_CATS       = "Categories"
SHEET_BRANCHES   = "Branches"
SHEET_TICKETS    = "Tickets"
SHEET_TICKET_CATS= "TicketCategories"

ITEMS_HEADERS = ["‡∏£‡∏´‡∏±‡∏™","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]
TXNS_HEADERS  = ["TxnID","‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó","‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
USERS_HEADERS = ["Username","DisplayName","Role","PasswordHash","Active"]
CATS_HEADERS  = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]
BR_HEADERS    = ["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]
TICKETS_HEADERS = ["TicketID","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
TICKET_CAT_HEADERS = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]

MINIMAL_CSS = """
<style>
:root { --radius: 14px; }
section.main > div { padding-top: 6px; }
.block-card { background: #fff; border:1px solid #eee; border-radius:16px; padding:16px; }
.kpi { display:grid; grid-template-columns: repeat(auto-fit,minmax(160px,1fr)); gap:12px; }
</style>
"""

# ========== Credentials loader (secrets -> env -> file; NO uploader) ==========
GOOGLE_SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

def _try_secrets():
    try:
        if "gcp_service_account" in st.secrets:
            return dict(st.secrets["gcp_service_account"])
        if "service_account" in st.secrets:
            sa = st.secrets["service_account"]
            if isinstance(sa, dict):
                return dict(sa)
            if isinstance(sa, str):
                return json.loads(sa)
    except Exception:
        pass
    return None

def _try_env():
    raw = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS_JSON") \
          or os.environ.get("SERVICE_ACCOUNT_JSON") \
          or os.environ.get("GOOGLE_CREDENTIALS_JSON")
    if not raw: return None
    try:
        raw = raw.strip()
        if raw.startswith("{"):
            return json.loads(raw)
        return json.loads(base64.b64decode(raw).decode("utf-8"))
    except Exception:
        return None

def _try_file():
    for p in ("./service_account.json","/mnt/data/service_account.json","/mount/data/service_account.json"):
        try:
            with open(p,"r",encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            continue
    return None

@st.cache_resource(show_spinner=False)
def get_client():
    info = _try_secrets() or _try_env() or _try_file()
    if not info:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö Service Account ‡πÉ‡∏ô st.secrets / ENV ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå service_account.json")
        st.stop()
    creds = Credentials.from_service_account_info(info, scopes=GOOGLE_SCOPES)
    return gspread.authorize(creds)

# Open helpers
@st.cache_resource(show_spinner=False)
def open_sheet_by_url(url: str):
    return get_client().open_by_url(url)

@st.cache_resource(show_spinner=False)
def open_sheet_by_key(key: str):
    return get_client().open_by_key(key)

# ========== Sheet bootstrap ==========
def ensure_sheets_exist(sh):
    required = [
        (SHEET_ITEMS, ITEMS_HEADERS, 1000, len(ITEMS_HEADERS)+5),
        (SHEET_TXNS, TXNS_HEADERS, 2000, len(TXNS_HEADERS)+5),
        (SHEET_USERS, USERS_HEADERS, 100, len(USERS_HEADERS)+2),
        (SHEET_CATS, CATS_HEADERS, 200, len(CATS_HEADERS)+2),
        (SHEET_BRANCHES, BR_HEADERS, 200, len(BR_HEADERS)+2),
        (SHEET_TICKETS, TICKETS_HEADERS, 1000, len(TICKETS_HEADERS)+5),
        (SHEET_TICKET_CATS, TICKET_CAT_HEADERS, 200, len(TICKET_CAT_HEADERS)+2),
    ]
    try:
        current = [ws.title for ws in sh.worksheets()]
    except Exception:
        current = []
    for name, headers, r, c in required:
        if name not in current:
            try:
                ws = sh.add_worksheet(name, r, c)
                ws.append_row(headers)
            except Exception:
                pass
    # seed admin
    try:
        ws_u = sh.worksheet(SHEET_USERS)
        vals = ws_u.get_all_values()
        if len(vals)<=1:
            ph = bcrypt.hashpw("admin123".encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
            ws_u.append_row(["admin","Administrator","admin",ph,"Y"])
    except Exception:
        pass

# ========== Data helpers ==========
@st.cache_data(ttl=60, show_spinner=False)
def _records_by_sheet(url_or_id: str, ws_name: str):
    # url_or_id can be URL or key
    gc = get_client()
    sh = gc.open_by_url(url_or_id) if url_or_id.startswith("http") else gc.open_by_key(url_or_id)
    ws = sh.worksheet(ws_name)
    return ws.get_all_records()

def read_df(sh, ws_name: str, headers=None) -> pd.DataFrame:
    key = getattr(sh,"id",None) or getattr(sh,"spreadsheet_id",None) or st.session_state.get("sheet_url","")
    try:
        rows = _records_by_sheet(str(key if key else st.session_state.get("sheet_url","")), ws_name)
    except Exception:
        ws = sh.worksheet(ws_name)
        rows = ws.get_all_records()
    df = pd.DataFrame(rows)
    if headers:
        for h in headers:
            if h not in df.columns: df[h]=""
        try: df = df[headers]
        except Exception: pass
    return df

def write_df(sh, ws_name: str, df: pd.DataFrame):
    ws = sh.worksheet(ws_name)
    ws.clear()
    ws.update([df.columns.tolist()] + df.fillna("").values.tolist())
    try: st.cache_data.clear()
    except Exception: pass

def append_row(sh, ws_name: str, row: list):
    sh.worksheet(ws_name).append_row(row)
    try: st.cache_data.clear()
    except Exception: pass

# ========== Common utils ==========
def fmt_dt(dt: datetime): return dt.strftime("%Y-%m-%d %H:%M:%S")
def now_str(): return fmt_dt(datetime.now(TZ))

def register_thai_fonts():
    cand = [
        ("ThaiFont","./fonts/Sarabun-Regular.ttf","./fonts/Sarabun-Bold.ttf"),
        ("ThaiFont","./fonts/THSarabunNew.ttf","./fonts/THSarabunNew-Bold.ttf"),
        ("ThaiFont","/usr/share/fonts/truetype/noto/NotoSansThai-Regular.ttf","/usr/share/fonts/truetype/noto/NotoSansThai-Bold.ttf"),
    ]
    for fam,n,b in cand:
        if os.path.exists(n):
            try:
                pdfmetrics.registerFont(TTFont(fam, n))
                bname=None
                if os.path.exists(b):
                    bname=fam+"-Bold"
                    pdfmetrics.registerFont(TTFont(bname, b))
                return fam, bname
            except Exception:
                pass
    return None, None

def df_to_pdf_bytes(df, title="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", subtitle=""):
    fam, bold = register_thai_fonts()
    buf = io.BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=landscape(A4), leftMargin=14,rightMargin=14,topMargin=14,bottomMargin=14)
    styles = getSampleStyleSheet()
    if fam:
        styles["Normal"].fontName = fam
        styles["Normal"].fontSize = 11
        styles.add(ParagraphStyle(name="ThaiTitle", parent=styles["Title"], fontName=bold or fam, fontSize=18))
        title_style = styles["ThaiTitle"]
    else:
        title_style = styles["Title"]
    story=[Paragraph(title, title_style)]
    if subtitle: story.append(Paragraph(subtitle, styles["Normal"]))
    story.append(Spacer(1,8))
    data=[df.columns.astype(str).tolist()] + df.astype(str).values.tolist() if not df.empty else [["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]]
    table=Table(data, repeatRows=1)
    table.setStyle(TableStyle([('BACKGROUND',(0,0),(-1,0),colors.HexColor('#f3f3f3')),
                               ('GRID',(0,0),(-1,-1),0.25,colors.grey),
                               ('ALIGN',(0,0),(-1,-1),'CENTER')]))
    story.append(table)
    doc.build(story)
    pdf=buf.getvalue(); buf.close(); return pdf

# ========== Auth block ==========
def auth_block(sh) -> bool:
    st.session_state.setdefault("user", None)
    st.session_state.setdefault("role", None)
    if st.session_state["user"]:
        with st.sidebar:
            st.markdown(f"**üë§ {st.session_state['user']}**")
            st.caption(f"Role: {st.session_state['role']}")
            if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"): st.session_state["user"]=None; st.session_state["role"]=None; st.experimental_rerun()
        return True
    st.sidebar.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    u = st.sidebar.text_input("Username")
    p = st.sidebar.text_input("Password", type="password")
    if st.sidebar.button("Login", use_container_width=True):
        users = read_df(sh, SHEET_USERS, USERS_HEADERS)
        row = users[(users["Username"]==u) & (users["Active"].str.upper()=="Y")]
        if not row.empty:
            ok=False
            try: ok=bcrypt.checkpw(p.encode("utf-8"), row.iloc[0]["PasswordHash"].encode("utf-8"))
            except Exception: ok=False
            if ok:
                st.session_state["user"]=u
                st.session_state["role"]=row.iloc[0]["Role"]
                st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); st.experimental_rerun()
            else:
                st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    return False

# ========== Pages ==========
def page_dashboard(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üìä Dashboard")

    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    txns  = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    cats  = read_df(sh, SHEET_CATS, CATS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)

    # KPIs
    total_items = len(items)
    total_qty = pd.to_numeric(items.get("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", pd.Series(dtype=float)), errors="coerce").fillna(0).sum() if not items.empty else 0
    low_df = pd.DataFrame(columns=ITEMS_HEADERS)
    if not items.empty:
        tmp = items.copy()
        tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        tmp["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"] = pd.to_numeric(tmp["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors="coerce").fillna(0)
        low_df = tmp[(tmp["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"].str.upper()=="Y") & (tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] <= tmp["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"])]

    c1,c2,c3 = st.columns(3)
    with c1: st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"{total_items:,}")
    with c2: st.metric("‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏°", f"{int(total_qty):,}")
    with c3: st.metric("‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", f"{len(low_df):,}")

    # Controls
    st.markdown("### ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á")
    chart_opts = st.multiselect(
        " ",
        [
            "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
            "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö",
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
            "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)",
            "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT)",
            "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT)",
            "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤",
        ],
        default=["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)","Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
    )
    left, right = st.columns([1,1])
    with left:
        chart_kind = st.radio("‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü", ["‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° (Pie)","‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Bar)"], horizontal=True, index=0)
    with right:
        top_n = st.slider("Top-N", 3, 20, 10, 1)

    c_per = st.selectbox("‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß", [1,2,3,4], index=1)

    st.markdown("### ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü OUT/Tickets)")
    colD1, colD2, colD3 = st.columns(3)
    with colD1:
        range_choice = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á", ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ","7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏õ‡∏µ‡∏ô‡∏µ‡πâ","‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"], index=2)
    with colD2:
        d1 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=(date.today()-timedelta(days=29)))
    with colD3:
        d2 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=date.today())

    def parse_range(choice, d1, d2):
        today = date.today()
        if choice=="‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ": return today, today
        if choice=="7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": return today-timedelta(days=6), today
        if choice=="30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": return today-timedelta(days=29), today
        if choice=="90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": return today-timedelta(days=89), today
        if choice=="‡∏õ‡∏µ‡∏ô‡∏µ‡πâ": return date(today.year,1,1), today
        return d1, d2
    start_date, end_date = parse_range(range_choice, d1, d2)

    # Pre-calc maps
    cat_map = {str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).strip(): str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).strip() for _,r in cats.iterrows()} if not cats.empty else {}
    br_map = {str(r['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤']).strip(): f"{str(r['‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤']).strip()} | {str(r['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤']).strip()}" for _,r in branches.iterrows()} if not branches.empty else {}

    # Prepare tx filtered
    if not txns.empty:
        tx = txns.copy()
        tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
        tx = tx.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        tx = tx[(tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= start_date) & (tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= end_date)]
        tx["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] = pd.to_numeric(tx["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], errors="coerce").fillna(0)
        tx_out = tx[tx["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]=="OUT"]
    else:
        tx_out = pd.DataFrame(columns=TXNS_HEADERS)

    charts = []

    if "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().reset_index()
        tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠"] = tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].map(cat_map).fillna(tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"])
        charts.append(("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"))

    if "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        tmp = tmp.groupby("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().reset_index()
        charts.append(("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", tmp, "‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"))

    if "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["count"] = 1
        tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["count"].sum().reset_index()
        tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠"] = tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].map(cat_map).fillna(tmp["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"])
        charts.append(("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠", "count"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)" in chart_opts:
        if not tx_out.empty:
            tmp = tx_out.groupby("‡∏™‡∏≤‡∏Ç‡∏≤", dropna=False)["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            tmp["‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á"] = tmp["‡∏™‡∏≤‡∏Ç‡∏≤"].apply(lambda x: br_map.get(str(x).split(" | ")[0], str(x)))
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT)" in chart_opts:
        if not tx_out.empty:
            tmp = tx_out.groupby("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT)" in chart_opts:
        if not tx_out.empty and not items.empty:
            it = items[["‡∏£‡∏´‡∏±‡∏™","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"]]
            tmp = tx_out.merge(it, on="‡∏£‡∏´‡∏±‡∏™", how="left")
            tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    # Tickets
    tdf = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    if not tdf.empty:
        tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        tdf = tdf.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        tdf = tdf[(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= start_date) & (tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= end_date)]
    if "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" in chart_opts:
        if not tdf.empty:
            tmp = tdf.groupby("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"})
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
    if "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤" in chart_opts:
        if not tdf.empty:
            tmp = tdf.groupby("‡∏™‡∏≤‡∏Ç", dropna=False)["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"})
        # fix correct column
        if not tdf.empty:
            tmp = tdf.groupby("‡∏™‡∏≤‡∏Ç‡∏≤", dropna=False)["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"})
            tmp["‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á"] = tmp["‡∏™‡∏≤‡∏Ç‡∏≤"].apply(lambda v: br_map.get(str(v).split(" | ")[0], str(v)))
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏™‡∏î‡∏á", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    # Render charts
    if not charts:
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü")
    else:
        rows = (len(charts) + c_per - 1)//c_per
        idx=0
        for _ in range(rows):
            cols = st.columns(c_per)
            for c in range(c_per):
                if idx>=len(charts): break
                title, df, label_col, val_col = charts[idx]
                with cols[c]:
                    df_show = df.copy()
                    if val_col in df_show.columns:
                        df_show[val_col] = pd.to_numeric(df_show[val_col], errors="coerce").fillna(0)
                        df_show = df_show.sort_values(val_col, ascending=False)
                    if len(df_show)>top_n:
                        top = df_show.head(top_n)
                        others = pd.DataFrame({label_col:["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"], val_col:[df_show[val_col].iloc[top_n:].sum()]})
                        df_show = pd.concat([top, others], ignore_index=True)
                    st.markdown(f"**{title}**")
                    if chart_kind.startswith("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á"):
                        chart = alt.Chart(df_show).mark_bar().encode(
                            x=alt.X(f"{label_col}:N", sort='-y'),
                            y=alt.Y(f"{val_col}:Q"),
                            tooltip=[label_col, val_col]
                        )
                        st.altair_chart(chart.properties(height=300), use_container_width=True)
                    else:
                        chart = alt.Chart(df_show).mark_arc(innerRadius=60).encode(
                            theta=f"{val_col}:Q",
                            color=f"{label_col}:N",
                            tooltip=[label_col, val_col]
                        )
                        st.altair_chart(chart, use_container_width=True)
                idx+=1

    if not low_df.empty:
        with st.expander("‚ö†Ô∏è ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (Reorder)", expanded=False):
            show = low_df[["‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]]
            st.dataframe(show, height=240, use_container_width=True)
            st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF", data=df_to_pdf_bytes(show, "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", now_str()),
                               file_name="low_stock.pdf", mime="application/pdf")
    st.markdown("</div>", unsafe_allow_html=True)

def generate_item_code(sh, cat_code: str) -> str:
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    mx=0
    pat = re.compile(rf"^{re.escape(cat_code)}-(\d+)$")
    for code in items["‡∏£‡∏´‡∏±‡∏™"].astype(str):
        m = pat.match(code.strip())
        if m:
            try: mx=max(mx,int(m.group(1)))
            except: pass
    return f"{cat_code}-{mx+1:03d}"

def page_stock(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î)")
    view = items.copy()
    if q and not items.empty:
        mask = items["‡∏£‡∏´‡∏±‡∏™"].str.contains(q, case=False, na=False) | \
               items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].str.contains(q, case=False, na=False) | \
               items["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].str.contains(q, case=False, na=False)
        view = items[mask]
    st.dataframe(view, height=320, use_container_width=True)

    if st.session_state.get("role") not in ("admin","staff"):
        st.info("‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏ä‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ")
        st.markdown("</div>", unsafe_allow_html=True); return

    tabs = st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà)","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö"])
    # add
    with tabs[0]:
        cats = read_df(sh, SHEET_CATS, CATS_HEADERS)
        with st.form("add_item", clear_on_submit=True):
            c1,c2,c3 = st.columns(3)
            with c1:
                cat_opt = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", (cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]+" | "+cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).tolist() if not cats.empty else [])
                cat_code = cat_opt.split(" | ")[0] if cat_opt else ""
                name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
            with c2:
                unit = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", value="‡∏ä‡∏¥‡πâ‡∏ô")
                qty = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=0, step=1)
                rop = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=0, step=1)
            with c3:
                loc = st.text_input("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", value="IT Room")
                active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0)
                auto = st.checkbox("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=True)
                code = st.text_input("‡∏£‡∏´‡∏±‡∏™ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏≠‡πÇ‡∏ï‡πâ)", disabled=auto)
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", use_container_width=True)
        if s:
            if (auto and not cat_code) or (not auto and not code.strip()):
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™"); st.stop()
            code_final = generate_item_code(sh, cat_code) if auto else code.strip().upper()
            cur = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
            if (cur["‡∏£‡∏´‡∏±‡∏™"]==code_final).any():
                cur.loc[cur["‡∏£‡∏´‡∏±‡∏™"]==code_final, ITEMS_HEADERS] = [code_final, cat_code, name, unit, qty, rop, loc, active]
            else:
                cur = pd.concat([cur, pd.DataFrame([[code_final, cat_code, name, unit, qty, rop, loc, active]], columns=ITEMS_HEADERS)], ignore_index=True)
            write_df(sh, SHEET_ITEMS, cur); st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ({code_final})"); st.experimental_rerun()
    # edit
    with tabs[1]:
        if items.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        else:
            label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™", ["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"] + (items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).tolist())
            if label != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --":
                code = label.split(" | ")[0]
                row = items[items["‡∏£‡∏´‡∏±‡∏™"]==code].iloc[0]
                with st.form("edit_item", clear_on_submit=False):
                    c1,c2,c3 = st.columns(3)
                    with c1:
                        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", value=row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])
                        unit = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", value=row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
                    with c2:
                        qty = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=int(pd.to_numeric(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce") or 0), step=1)
                        rop = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=int(pd.to_numeric(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors="coerce") or 0), step=1)
                    with c3:
                        loc = st.text_input("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", value=row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"])
                        active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0 if str(row["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]).upper()=="Y" else 1)
                    col1,col2 = st.columns([3,1])
                    s1 = col1.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True)
                    s2 = col2.form_submit_button("‡∏•‡∏ö", use_container_width=True)
                if s1:
                    items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code, ITEMS_HEADERS] = [code, row["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"], name, unit, qty, rop, loc, active]
                    write_df(sh, SHEET_ITEMS, items); st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß"); st.experimental_rerun()
                if s2:
                    items2 = items[items["‡∏£‡∏´‡∏±‡∏™"]!=code]
                    write_df(sh, SHEET_ITEMS, items2); st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß"); st.experimental_rerun()
    st.markdown("</div>", unsafe_allow_html=True)

def page_issue_receive(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üßæ ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
    if st.session_state.get("role") not in ("admin","staff"):
        st.info("‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏ä‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ"); st.markdown("</div>", unsafe_allow_html=True); return
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    if items.empty:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"); st.markdown("</div>", unsafe_allow_html=True); return
    tab_out, tab_in = st.tabs(["‡πÄ‡∏ö‡∏¥‡∏Å (OUT) ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£","‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (IN)"])
    with tab_out:
        bopt = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≠", (branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]+" | "+branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [])
        branch_code = bopt.split(" | ")[0] if bopt else ""
        opts = [f'{r["‡∏£‡∏´‡∏±‡∏™"]} | {r["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]} (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {int(pd.to_numeric(r["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce") or 0)})' for _,r in items.iterrows()]
        df_template = pd.DataFrame({"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£":[""]*5, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[1]*5})
        ed = st.data_editor(df_template, use_container_width=True, hide_index=True, num_rows="fixed",
                            column_config={"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": st.column_config.SelectboxColumn(options=opts),
                                           "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": st.column_config.NumberColumn(min_value=1, step=1)})
        note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏")
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å", type="primary", disabled=(not branch_code)):
            tx = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
            items_local = items.copy()
            ok_count=0; errs=[]
            for _,r in ed.iterrows():
                sel = str(r.get("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£","")).strip()
                qty = int(pd.to_numeric(r.get("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",0), errors="coerce") or 0)
                if not sel or qty<=0: continue
                code = sel.split(" | ")[0]
                row = items_local[items_local["‡∏£‡∏´‡∏±‡∏™"]==code]
                if row.empty: errs.append(f"{code}: ‡πÑ‡∏°‡πà‡∏û‡∏ö"); continue
                remain = int(pd.to_numeric(row.iloc[0]["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce") or 0)
                if qty>remain: errs.append(f"{code}: ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ({remain})"); continue
                items_local.loc[items_local["‡∏£‡∏´‡∏±‡∏™"]==code,"‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]=remain-qty
                tx = pd.concat([tx, pd.DataFrame([[str(uuid.uuid4())[:8], now_str(),"OUT", code, row.iloc[0]["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], branch_code, qty, st.session_state.get("user","unknown"), note]], columns=TXNS_HEADERS)], ignore_index=True)
                ok_count+=1
            if ok_count>0:
                write_df(sh, SHEET_ITEMS, items_local)
                write_df(sh, SHEET_TXNS, tx)
                st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å {ok_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"); st.experimental_rerun()
            else:
                st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
    with tab_in:
        item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", (items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).tolist())
        qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", min_value=1, value=1, step=1)
        src = st.text_input("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤/‡πÄ‡∏•‡∏Ç PO")
        note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value="‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤")
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", type="primary"):
            code = item.split(" | ")[0]
            items2 = items.copy()
            row = items2[items2["‡∏£‡∏´‡∏±‡∏™"]==code].iloc[0]
            remain = int(pd.to_numeric(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce") or 0)
            items2.loc[items2["‡∏£‡∏´‡∏±‡∏™"]==code,"‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]=remain+qty
            tx = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
            tx = pd.concat([tx, pd.DataFrame([[str(uuid.uuid4())[:8], now_str(),"IN", code, row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], src, qty, st.session_state.get("user","unknown"), note]], columns=TXNS_HEADERS)], ignore_index=True)
            write_df(sh, SHEET_ITEMS, items2); write_df(sh, SHEET_TXNS, tx)
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"); st.experimental_rerun()
    st.markdown("</div>", unsafe_allow_html=True)


def page_tickets(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° / ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Tickets) ‚Äî ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• + ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö
    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    for col in ["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]:
        if col not in tickets.columns:
            tickets[col] = ""
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    t_cats   = read_df(sh, SHEET_TICKET_CATS, TICKET_CAT_HEADERS)

    # ----- ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á -----
    st.markdown("### ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")
    f1, f2, f3, f4 = st.columns(4)
    with f1:
        status_pick = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"], index=0)
    with f2:
        br_opts = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ((branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"] + " | " + branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [])
        branch_pick = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", br_opts, index=0)
    with f3:
        cat_opts = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else [])
        cat_pick = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", cat_opts, index=0)
    with f4:
        q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏)")

    d1c, d2c = st.columns(2)
    with d1c:
        d1 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=(date.today()-timedelta(days=30)))
    with d2c:
        d2 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=date.today())

    view = tickets.copy()
    if not view.empty:
        view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        view = view.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        view = view[(view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= d1) & (view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= d2)]
        if status_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == status_pick]
        if branch_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏™‡∏≤‡∏Ç‡∏≤"] == branch_pick]
        if cat_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"] == cat_pick]
        if q:
            mask = (
                view["‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"].astype(str).str.contains(q, case=False, na=False) |
                view["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"].astype(str).str.contains(q, case=False, na=False) |
                view["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"].astype(str).str.contains(q, case=False, na=False)
            )
            view = view[mask]

    st.markdown("### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)")
    st.dataframe(view.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", ascending=False), height=320, use_container_width=True)
    if not view.empty:
        st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV", data=view.to_csv(index=False).encode("utf-8-sig"),
                           file_name="tickets_filtered.csv", mime="text/csv")

    st.markdown("---")
    tab_add, tab_edit, tab_bulk = st.tabs(["‚ûï ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà","‚úèÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç","‚úÖ ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°"])

    # ===== ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà =====
    with tab_add:
        with st.form("tk_new", clear_on_submit=True):
            c1, c2 = st.columns(2)
            with c1:
                br_sel = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", options=(br_opts[1:] if len(br_opts)>1 else ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]))
                if br_sel == "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á":
                    br_sel = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="")
                reporter = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á")
                t_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå","‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå","‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢","‡∏≠‡∏∑‡πà‡∏ô‡πÜ"], index=0)
            with c2:
                cat_sel_opts = ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else []) + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                cat_sel = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", options=cat_sel_opts if cat_sel_opts else ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"])
                cat_custom = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="" if cat_sel!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else "", disabled=(cat_sel!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                cate_val = cat_sel if cat_sel!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else cat_custom
                assignee = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö (IT)", value=st.session_state.get("user",""))
            detail = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", height=120)
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", use_container_width=True, type="primary")
        if s:
            if not br_sel or not reporter or not cate_val or not detail:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                tid = "TCK-" + datetime.now(TZ).strftime("%Y%m%d-%H%M%S") if hasattr(datetime, "now") else "TCK-" + str(int(time.time()))
                row = [tid, datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                       br_sel, reporter, cate_val, detail, "‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", assignee,
                       datetime.now().strftime("%Y-%m-%d %H:%M:%S"), note]
                df = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
                for c in ["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]:
                    if c not in df.columns: df[c] = ""
                df = pd.concat([df, pd.DataFrame([row], columns=TICKETS_HEADERS)], ignore_index=True)
                if "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" in df.columns:
                    df.loc[df["TicketID"]==tid, "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = t_type
                write_df(sh, SHEET_TICKETS, df[[c for c in df.columns]])
                st.success(f"‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Ticket: {tid})"); st.rerun()

    # ===== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç =====
    with tab_edit:
        if tickets.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        else:
            labels = (tickets["TicketID"] + " | " + tickets["‡∏™‡∏≤‡∏Ç‡∏≤"].astype(str)).tolist()
            pick_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticket", options=["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"] + labels)
            if pick_label != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --":
                pick_id = pick_label.split(" | ", 1)[0]
                row = tickets[tickets["TicketID"] == pick_id].iloc[0]

                with st.form("tk_edit", clear_on_submit=False):
                    c1, c2 = st.columns(2)
                    with c1:
                        t_branch = st.text_input("‡∏™‡∏≤‡∏Ç‡∏≤", value=str(row.get("‡∏™‡∏≤‡∏Ç‡∏≤","")))
                        t_owner  = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value=str(row.get("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","")))
                        t_type   = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå","‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå","‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢","‡∏≠‡∏∑‡πà‡∏ô‡πÜ"],
                                                index=0 if str(row.get("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó","")) not in ["‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå","‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢","‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] else ["‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå","‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå","‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢","‡∏≠‡∏∑‡πà‡∏ô‡πÜ"].index(str(row.get("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",""))))
                    with c2:
                        statuses_edit = ["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"]
                        try:
                            idx_default = statuses_edit.index(str(row.get("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á")))
                        except ValueError:
                            idx_default = 0
                        t_status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", statuses_edit, index=idx_default)
                        t_assignee = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", value=str(row.get("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","")))
                    t_cate = st.text_input("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value=str(row.get("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","")))
                    t_desc = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", value=str(row.get("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","")), height=120)
                    t_note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value=str(row.get("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","")))
                    colA, colB, colC = st.columns(3)
                    s_update = colA.form_submit_button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", use_container_width=True, type="primary")
                    s_close  = colB.form_submit_button("‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô (‡πÄ‡∏™‡∏£‡πá‡∏à)", use_container_width=True)
                    s_delete = colC.form_submit_button("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", use_container_width=True)

                if s_delete:
                    df = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
                    df = df[df["TicketID"] != pick_id].copy()
                    write_df(sh, SHEET_TICKETS, df)
                    st.success("‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"); st.rerun()

                if s_update or s_close:
                    if s_close: t_status = "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"
                    df = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
                    for c in ["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]:
                        if c not in df.columns: df[c] = ""
                    idx = df.index[df["TicketID"] == pick_id]
                    if len(idx)==1:
                        i = idx[0]
                        df.at[i,"‡∏™‡∏≤‡∏Ç‡∏≤"] = t_branch
                        df.at[i,"‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"] = t_owner
                        df.at[i,"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"] = t_cate
                        df.at[i,"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"] = t_desc
                        df.at[i,"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = t_status
                        df.at[i,"‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"] = t_assignee
                        df.at[i,"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        df.at[i,"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"] = t_note
                        df.at[i,"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = t_type
                        write_df(sh, SHEET_TICKETS, df[[c for c in df.columns]])
                        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"); st.rerun()

    # ===== ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° =====
    with tab_bulk:
        st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticket ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à')")
        if tickets.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
            open_df = tickets[tickets["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] != "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"].copy()
            if open_df.empty:
                st.success("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á")
            else:
                open_df["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] = False
                ed = st.data_editor(open_df[["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å","TicketID","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]],
                                    use_container_width=True, height=260, num_rows="fixed",
                                    column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn()})
                if st.button("‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"):
                    picked = ed[ed["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] == True]["TicketID"].tolist()
                    if not picked:
                        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                    else:
                        df = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
                        df.loc[df["TicketID"].isin(picked), "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"
                        df.loc[df["TicketID"].isin(picked), "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        write_df(sh, SHEET_TICKETS, df)
                        st.success(f"‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô {len(picked)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"); st.rerun()

    st.markdown("</div>", unsafe_allow_html=True)

def page_reports(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô / ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
    tx = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    d1 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=(date.today()-timedelta(days=30)))
    d2 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=date.today())
    if not tx.empty:
        df = tx.copy()
        df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"]=pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
        df = df.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        df = df[(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= d1) & (df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= d2)]
    else:
        df = tx
    st.dataframe(df.sort_values("‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", ascending=False) if not df.empty else df, height=320, use_container_width=True)
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", data=df_to_pdf_bytes(df, "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß", f"{d1} ‡∏ñ‡∏∂‡∏á {d2}"),
                       file_name="transactions.pdf", mime="application/pdf")
    st.markdown("</div>", unsafe_allow_html=True)

def page_users(sh):
    st.subheader("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ & ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Admin)")
    users = read_df(sh, SHEET_USERS, USERS_HEADERS)
    for c in USERS_HEADERS:
        if c not in users.columns: users[c] = ""
    users = users[USERS_HEADERS].fillna("")
    st.dataframe(users, height=260, use_container_width=True)
    tab_add, tab_edit = st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"])
    with tab_add:
        with st.form("add_user", clear_on_submit=True):
            c1,c2 = st.columns([2,1])
            with c1:
                un = st.text_input("Username*")
                disp = st.text_input("Display Name")
            with c2:
                role = st.selectbox("Role", ["admin","staff","viewer"], index=1)
                act = st.selectbox("Active", ["Y","N"], index=0)
            pwd = st.text_input("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô*", type="password")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà", use_container_width=True, type="primary")
        if s:
            if not un or not pwd: st.warning("‡∏Å‡∏£‡∏≠‡∏Å Username/Password"); st.stop()
            if (users["Username"]==un).any(): st.error("‡∏°‡∏µ Username ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß"); st.stop()
            ph = bcrypt.hashpw(pwd.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
            new_row = pd.DataFrame([[un, disp, role, ph, act]], columns=USERS_HEADERS)
            write_df(sh, SHEET_USERS, pd.concat([users, new_row], ignore_index=True))
            st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); st.experimental_rerun()
    with tab_edit:
        sel = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", [""]+users["Username"].tolist())
        if sel:
            row = users[users["Username"]==sel].iloc[0]
            with st.form("edit_user", clear_on_submit=False):
                c1,c2 = st.columns([2,1])
                with c1:
                    disp = st.text_input("Display Name", value=row["DisplayName"])
                with c2:
                    role = st.selectbox("Role", ["admin","staff","viewer"], index=["admin","staff","viewer"].index(row["Role"]) if row["Role"] in ["admin","staff","viewer"] else 1)
                    act = st.selectbox("Active", ["Y","N"], index=["Y","N"].index(row["Active"]) if row["Active"] in ["Y","N"] else 0)
                pwd = st.text_input("‡∏ï‡∏±‡πâ‡∏á/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)", type="password")
                col1,col2 = st.columns([3,1])
                s1 = col1.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", use_container_width=True)
                s2 = col2.form_submit_button("‡∏•‡∏ö", use_container_width=True)
            if s1:
                idx = users.index[users["Username"]==sel][0]
                users.at[idx,"DisplayName"]=disp
                users.at[idx,"Role"]=role
                users.at[idx,"Active"]=act
                if pwd.strip():
                    users.at[idx,"PasswordHash"]=bcrypt.hashpw(pwd.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
                write_df(sh, SHEET_USERS, users); st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß"); st.experimental_rerun()
            if s2:
                if sel.lower()=="admin": st.error("‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö admin")
                else:
                    write_df(sh, SHEET_USERS, users[users["Username"]!=sel]); st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß"); st.experimental_rerun()

def page_import(sh):
    st.subheader("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà / ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà / ‡∏™‡∏≤‡∏Ç‡∏≤ / ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå / ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤ / ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)")
    t1,t2,t3,t4,t5 = st.tabs(["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"])
    def _read_upload(file):
        if not file: return None, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"
        name=file.name.lower()
        try:
            if name.endswith(".csv"): df=pd.read_csv(file, dtype=str).fillna("")
            else: df=pd.read_excel(file, dtype=str).fillna("")
            df=df.applymap(lambda x: str(x).strip())
            return df,None
        except Exception as e:
            return None, f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"
    # categories
    with t1:
        up=st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (CSV/Excel)", type=["csv","xlsx"], key="up_cat")
        if up:
            df,err=_read_upload(up)
            if err: st.error(err)
            else:
                st.dataframe(df, height=200, use_container_width=True)
                if not set(["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).issubset(df.columns):
                    st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î")
                elif st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", use_container_width=True):
                    cur = read_df(sh, SHEET_CATS, CATS_HEADERS)
                    for _,r in df.iterrows():
                        code=str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).strip(); name=str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).strip()
                        if not code: continue
                        if (cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code).any():
                            cur.loc[cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code, ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]]=[code,name]
                        else:
                            cur=pd.concat([cur, pd.DataFrame([[code,name]], columns=CATS_HEADERS)], ignore_index=True)
                    write_df(sh, SHEET_CATS, cur); st.success("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    # branches
    with t2:
        up=st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏™‡∏≤‡∏Ç‡∏≤ (CSV/Excel)", type=["csv","xlsx"], key="up_br")
        if up:
            df,err=_read_upload(up)
            if err: st.error(err)
            else:
                st.dataframe(df, height=200, use_container_width=True)
                if not set(["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).issubset(df.columns):
                    st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤, ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤")
                elif st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏™‡∏≤‡∏Ç‡∏≤", use_container_width=True):
                    cur = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
                    for _,r in df.iterrows():
                        code=str(r["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]).strip(); name=str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).strip()
                        if not code: continue
                        if (cur["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]==code).any():
                            cur.loc[cur["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]==code, ["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]]=[code,name]
                        else:
                            cur=pd.concat([cur, pd.DataFrame([[code,name]], columns=BR_HEADERS)], ignore_index=True)
                    write_df(sh, SHEET_BRANCHES, cur); st.success("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    # items
    with t3:
        up=st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (CSV/Excel)", type=["csv","xlsx"], key="up_items")
        if up:
            df,err=_read_upload(up)
            if err: st.error(err)
            else:
                st.dataframe(df.head(20), height=240, use_container_width=True)
                need = ["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]
                if any(c not in df.columns for c in need):
                    st.error("‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
                elif st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", use_container_width=True):
                    cur = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
                    cats = set(read_df(sh, SHEET_CATS, CATS_HEADERS)["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"].tolist())
                    add=upd=0
                    for _,r in df.iterrows():
                        code = str(r.get("‡∏£‡∏´‡∏±‡∏™","")).strip().upper()
                        cat  = str(r.get("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","")).strip()
                        if cat not in cats: continue
                        name = str(r.get("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","")).strip()
                        unit = str(r.get("‡∏´‡∏ô‡πà‡∏ß‡∏¢","")).strip() or "‡∏ä‡∏¥‡πâ‡∏ô"
                        qty  = int(pd.to_numeric(r.get("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠",0), errors="coerce") or 0)
                        rop  = int(pd.to_numeric(r.get("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",0), errors="coerce") or 0)
                        loc  = str(r.get("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","")).strip() or "IT Room"
                        active = str(r.get("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô","Y")).strip().upper() or "Y"
                        if not code: code = generate_item_code(sh, cat)
                        if (cur["‡∏£‡∏´‡∏±‡∏™"]==code).any():
                            cur.loc[cur["‡∏£‡∏´‡∏±‡∏™"]==code, ITEMS_HEADERS]=[code,cat,name,unit,qty,rop,loc,active]; upd+=1
                        else:
                            cur=pd.concat([cur, pd.DataFrame([[code,cat,name,unit,qty,rop,loc,active]], columns=ITEMS_HEADERS)], ignore_index=True); add+=1
                    write_df(sh, SHEET_ITEMS, cur); st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {add} / ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {upd}")
    # ticket cats
    with t4:
        up=st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (CSV/Excel)", type=["csv","xlsx"], key="up_tkc")
        if up:
            df,err=_read_upload(up)
            if err: st.error(err)
            else:
                st.dataframe(df, height=200, use_container_width=True)
                if not set(["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).issubset(df.columns):
                    st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
                elif st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", use_container_width=True):
                    cur = read_df(sh, SHEET_TICKET_CATS, TICKET_CAT_HEADERS)
                    for _,r in df.iterrows():
                        code=str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).strip(); name=str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).strip()
                        if not code: continue
                        if (cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]==code).any():
                            cur.loc[cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]==code, TICKET_CAT_HEADERS]=[code,name]
                        else:
                            cur=pd.concat([cur, pd.DataFrame([[code,name]], columns=TICKET_CAT_HEADERS)], ignore_index=True)
                    write_df(sh, SHEET_TICKET_CATS, cur); st.success("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    # users import
    with t5:
        up=st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (CSV/Excel)", type=["csv","xlsx"], key="up_users")
        if up:
            df,err=_read_upload(up)
            if err: st.error(err)
            else:
                st.dataframe(df.head(20), height=220, use_container_width=True)
                if "Username" not in df.columns:
                    st.error("‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Username")
                elif st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", use_container_width=True):
                    cur = read_df(sh, SHEET_USERS, USERS_HEADERS)
                    add=upd=0; errs=[]
                    for _,r in df.iterrows():
                        username = str(r.get("Username","")).strip()
                        if not username: continue
                        display = str(r.get("DisplayName","")).strip()
                        role = str(r.get("Role","staff")).strip() or "staff"
                        active = str(r.get("Active","Y")).strip() or "Y"
                        pwd_hash=None
                        if "Password" in df.columns and str(r.get("Password","")).strip():
                            pwd_hash=bcrypt.hashpw(str(r.get("Password")).encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
                        elif "PasswordHash" in df.columns and str(r.get("PasswordHash","")).strip():
                            pwd_hash=str(r.get("PasswordHash")).strip()
                        if (cur["Username"]==username).any():
                            idx = cur.index[cur["Username"]==username][0]
                            cur.at[idx,"DisplayName"]=display
                            cur.at[idx,"Role"]=role
                            cur.at[idx,"Active"]=active
                            if pwd_hash: cur.at[idx,"PasswordHash"]=pwd_hash
                            upd+=1
                        else:
                            if not pwd_hash: continue
                            cur=pd.concat([cur, pd.DataFrame([[username,display,role,pwd_hash,active]], columns=USERS_HEADERS)], ignore_index=True)
                            add+=1
                    write_df(sh, SHEET_USERS, cur); st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏° {add} / ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {upd}")

def page_settings(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("‚öôÔ∏è Settings")
    url = st.text_input("Google Sheet URL", value=st.session_state.get("sheet_url", DEFAULT_SHEET_URL))
    st.session_state["sheet_url"] = url
    if st.button("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠/‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏ï", use_container_width=True):
        try:
            sh2 = open_sheet_by_url(url); ensure_sheets_exist(sh2); st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        except Exception as e:
            st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.markdown("</div>", unsafe_allow_html=True)

# ========== Main ==========
def main():
    st.set_page_config(page_title=APP_TITLE, page_icon="üß∞", layout="wide")
    st.markdown(MINIMAL_CSS, unsafe_allow_html=True)
    st.title(APP_TITLE); st.caption(APP_TAGLINE)

    # keep URL in session
    if "sheet_url" not in st.session_state or not st.session_state["sheet_url"]:
        st.session_state["sheet_url"] = DEFAULT_SHEET_URL

    with st.sidebar:
        st.markdown("---")
        page = st.radio("‡πÄ‡∏°‡∏ô‡∏π", [
            "üìä Dashboard",
            "üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
            "üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
            "üßæ ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤",
            "üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
            "üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
            "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
            "‚öôÔ∏è Settings",
        ], index=0)

    # open sheet
    sheet_url = st.session_state.get("sheet_url", DEFAULT_SHEET_URL)
    try:
        sh = open_sheet_by_url(sheet_url)
    except Exception as e:
        st.error(f"‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()

    ensure_sheets_exist(sh)
    auth_block(sh)

    if page.startswith("üìä"): page_dashboard(sh)
    elif page.startswith("üì¶"): page_stock(sh)
    elif page.startswith("üõ†Ô∏è"): page_tickets(sh)
    elif page.startswith("üßæ"): page_issue_receive(sh)
    elif page.startswith("üìë"): page_reports(sh)
    elif page.startswith("üë§"): page_users(sh)
    elif page.startswith("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"): page_import(sh)
    elif page.startswith("‚öôÔ∏è"): page_settings(sh)

    st.caption("¬© 2025 IT Stock ¬∑ Streamlit + Google Sheets ¬∑ **iTao iT (V.1.1)**")

if __name__ == "__main__":
    main()



# ======================= OVERRIDES: checkbox-select edit for Stock / Tickets / Users =======================
import pandas as _pd
import streamlit as _st

def page_stock(sh):
    _st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    _st.subheader("üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")

    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    cats  = read_df(sh, SHEET_CATS, CATS_HEADERS)

    # --- Search & Data table with checkbox select ---
    q = _st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î)")
    view_df = items.copy()
    if q and not items.empty:
        mask = (
            items["‡∏£‡∏´‡∏±‡∏™"].astype(str).str.contains(q, case=False, na=False) |
            items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].astype(str).str.contains(q, case=False, na=False) |
            items["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].astype(str).str.contains(q, case=False, na=False)
        )
        view_df = items[mask]

    chosen_code = None
    if hasattr(_st, "data_editor"):
        view_display = view_df.copy()
        view_display.insert(0, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", False)
        edited_table = _st.data_editor(
            view_display[["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] + ITEMS_HEADERS],
            use_container_width=True, height=320, num_rows="fixed",
            column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": _st.column_config.CheckboxColumn(help="‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")}
        )
        picked = edited_table[edited_table["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] == True]
        if not picked.empty:
            chosen_code = str(picked.iloc[0]["‡∏£‡∏´‡∏±‡∏™"]).strip()
    else:
        _st.dataframe(view_df, height=320, use_container_width=True)

    unit_opts = get_unit_options(items)
    loc_opts  = get_loc_options(items)

    if _st.session_state.get("role") in ("admin","staff"):
        t_add, t_edit = _st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà)","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á)"])

        with t_add:
            with _st.form("item_add", clear_on_submit=True):
                c1,c2,c3 = _st.columns(3)
                with c1:
                    if cats.empty:
                        _st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï Categories (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°)")
                        cat_opt=""
                    else:
                        opts = (cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]+" | "+cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).tolist()
                        selected = _st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", options=opts)
                        cat_opt = selected.split(" | ")[0]
                    name = _st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
                with c2:
                    sel_unit = _st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=unit_opts, index=0)
                    unit = _st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                    if sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": unit = sel_unit
                    qty = _st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=0, step=1)
                    rop = _st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=0, step=1)
                with c3:
                    sel_loc = _st.selectbox("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=loc_opts, index=0)
                    loc = _st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                    if sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": loc = sel_loc
                    active = _st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0)
                    auto_code = _st.checkbox("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=True)
                    code = _st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏≠‡πÇ‡∏ï‡πâ)", disabled=auto_code)
                    s_add = _st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", use_container_width=True)
            if s_add:
                if (auto_code and not cat_opt) or (not auto_code and code.strip()==""):
                    _st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î/‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™")
                else:
                    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
                    gen_code = generate_item_code(sh, cat_opt) if auto_code else code.strip().upper()
                    if (items["‡∏£‡∏´‡∏±‡∏™"]==gen_code).any():
                        items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==gen_code, ITEMS_HEADERS] = [gen_code, cat_opt, name, unit, qty, rop, loc, active]
                    else:
                        items = _pd.concat([items, _pd.DataFrame([[gen_code, cat_opt, name, unit, qty, rop, loc, active]], columns=ITEMS_HEADERS)], ignore_index=True)
                    write_df(sh, SHEET_ITEMS, items)
                    _st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏£‡∏´‡∏±‡∏™: {gen_code})")
                    safe_rerun()

        with t_edit:
            if not chosen_code:
                _st.info("‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
            # Fallback dropdown for editing
            if items.empty:
                _st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            else:
                labels = (items["‡∏£‡∏´‡∏±‡∏™"] + " | " + items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).tolist()
                default_index = 0
                if chosen_code:
                    try:
                        default_index = ["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"] + labels
                        default_index = default_index.index(f"{chosen_code} | {items[items['‡∏£‡∏´‡∏±‡∏™']==chosen_code].iloc[0]['‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå']}")
                    except Exception:
                        default_index = 0
                pick_label = _st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", options=["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"] + labels)
                if chosen_code:
                    # override by chosen
                    for lab in labels:
                        if lab.startswith(chosen_code + " "):
                            pick_label = lab
                            break
                if pick_label != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --":
                    pick = pick_label.split(" | ", 1)[0]
                    row = items[items["‡∏£‡∏´‡∏±‡∏™"] == pick].iloc[0]
                    # Build option lists that include current values
                    unit_opts_edit = [u for u in unit_opts if u != "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                    if row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"] not in unit_opts_edit and str(row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"]).strip()!="":
                        unit_opts_edit = [row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"]] + unit_opts_edit
                    unit_opts_edit = unit_opts_edit + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]

                    loc_opts_edit = [l for l in loc_opts if l != "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                    if row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"] not in loc_opts_edit and str(row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]).strip()!="":
                        loc_opts_edit = [row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]] + loc_opts_edit
                    loc_opts_edit = loc_opts_edit + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]

                    with _st.form("item_edit", clear_on_submit=False):
                        c1,c2,c3 = _st.columns(3)
                        with c1:
                            name = _st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", value=row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])
                            sel_unit = _st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=unit_opts_edit, index=0)
                            unit = _st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                            if sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": unit = sel_unit
                        with c2:
                            qty = _st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=int(float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]) if str(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]).strip()!="" else 0), step=1)
                            rop = _st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=int(float(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"]) if str(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"]).strip()!="" else 0), step=1)
                        with c3:
                            sel_loc = _st.selectbox("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=loc_opts_edit, index=0)
                            loc = _st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                            if sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": loc = sel_loc
                            active = _st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0 if str(row["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]).upper()=="Y" else 1)
                        col_save, col_delete = _st.columns([3,1])
                        s_save = col_save.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True)
                        s_del  = col_delete.form_submit_button("üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", use_container_width=True)
                    if s_save:
                        items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==pick, ITEMS_HEADERS] = [pick, row["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"], name, unit, qty, rop, loc, "Y" if active=="Y" else "N"]
                        write_df(sh, SHEET_ITEMS, items)
                        _st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
                    if s_del:
                        items = items[items["‡∏£‡∏´‡∏±‡∏™"]!=pick]; write_df(sh, SHEET_ITEMS, items)
                        _st.success(f"‡∏•‡∏ö {pick} ‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

    _st.markdown("</div>", unsafe_allow_html=True)


def page_tickets(sh):
    _st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    _st.subheader("üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° / ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Tickets)")

    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    t_cats = read_df(sh, SHEET_TICKET_CATS, TICKET_CAT_HEADERS)

    # --- Filters ---
    _st.markdown("### ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")
    f1, f2, f3, f4 = _st.columns(4)
    with f1:
        statuses = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"]
        status_pick = _st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", statuses, index=0, key="tk_status2")
    with f2:
        br_opts = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ((branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"] + " | " + branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [])
        branch_pick = _st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", br_opts, index=0, key="tk_branch2")
    with f3:
        cat_opts = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else [])
        cat_pick = _st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", cat_opts, index=0, key="tk_cat2")
    with f4:
        q = _st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á/‡∏´‡∏°‡∏ß‡∏î/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)", key="tk_query2")

    dcol1, dcol2 = _st.columns(2)
    with dcol1:
        d1 = _st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=(date.today()-timedelta(days=90)), key="tk_d1_2")
    with dcol2:
        d2 = _st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=date.today(), key="tk_d2_2")

    view = tickets.copy()
    if not view.empty:
        view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = _pd.to_datetime(view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        view = view.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        view = view[(view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= d1) & (view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= d2)]
        if status_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == status_pick]
        if branch_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏™‡∏≤‡∏Ç‡∏≤"] == branch_pick]
        if "cat_pick" in locals() and cat_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"] == cat_pick]
        if q:
            mask = (view["‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"].astype(str).str.contains(q, case=False, na=False) |
                    view["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].astype(str).str.contains(q, case=False, na=False) |
                    view["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"].astype(str).str.contains(q, case=False, na=False))
            view = view[mask]

    # --- Table with checkbox select ---
    _st.markdown("### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    chosen_id = None
    picked_ids = []
    if hasattr(_st, "data_editor"):
        tdisp = view.copy()
        tdisp.insert(0, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", False)
        ed = _st.data_editor(
            tdisp[["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] + TICKETS_HEADERS],
            use_container_width=True, height=300, num_rows="fixed",
            column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": _st.column_config.CheckboxColumn(help="‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")}
        )
        pick = ed[ed["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]==True]
        if not pick.empty:
            picked_ids = pick["TicketID"].astype(str).tolist()
            chosen_id = picked_ids[0]  # first for edit form
    else:
        _st.dataframe(view, height=300, use_container_width=True)

    # --- Bulk close ---
    if picked_ids:
        if _st.button(f"‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô (‡πÄ‡∏™‡∏£‡πá‡∏à) {len(picked_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"):
            cur = tickets.copy()
            cur.loc[cur["TicketID"].astype(str).isin(picked_ids), "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"
            cur.loc[cur["TicketID"].astype(str).isin(picked_ids), "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"] = get_now_str()
            write_df(sh, SHEET_TICKETS, cur)
            _st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            safe_rerun()

    _st.markdown("---")
    t_add, t_update = _st.tabs(["‚ûï ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà","üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"])

    with t_add:
        with _st.form("tk_new2", clear_on_submit=True):
            c1,c2,c3 = _st.columns(3)
            with c1:
                now_str = get_now_str()
                branch_sel = _st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", br_opts[1:] if len(br_opts)>1 else ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"])
                if branch_sel == "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á":
                    branch_sel = _st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="")
                reporter = _st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value="")
            with c2:
                tkc_opts = ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else []) + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                pick_c = _st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", options=tkc_opts if tkc_opts else ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"], key="tk_new_cat_sel2")
                cate_custom = _st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="" if pick_c!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else "", disabled=(pick_c!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                cate = pick_c if pick_c != "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else cate_custom
                t_type = _st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå","‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå","‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢","‡∏≠‡∏∑‡πà‡∏ô‡πÜ"], index=0)
                assignee = _st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö (IT)", value=_st.session_state.get("user",""))
            with c3:
                detail = _st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", height=100)
                note = _st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value="")
            s = _st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", use_container_width=True)
        if s:
            tid = generate_ticket_id()
            row = [tid, get_now_str(), branch_sel, reporter, cate, detail, "‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", assignee, get_now_str(), note]
            # ensure columns
            cur = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
            if "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" not in cur.columns:
                cur["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = ""
            new = _pd.DataFrame([row], columns=TICKETS_HEADERS)
            new["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = t_type
            cur = _pd.concat([cur, new], ignore_index=True)
            write_df(sh, SHEET_TICKETS, cur)
            _st.success(f"‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Ticket: {tid})")
            safe_rerun()

    with t_update:
        target_id = chosen_id or _st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticket (‡∏™‡∏≥‡∏£‡∏≠‡∏á)", [""] + tickets["TicketID"].astype(str).tolist())
        if not target_id:
            _st.info("‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        else:
            row = tickets[tickets["TicketID"].astype(str) == str(target_id)]
            if row.empty:
                _st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            else:
                data = row.iloc[0].to_dict()
                with _st.form("tk_edit2", clear_on_submit=False):
                    c1, c2 = _st.columns(2)
                    with c1:
                        t_branch = _st.text_input("‡∏™‡∏≤‡∏Ç‡∏≤", value=str(data.get("‡∏™‡∏≤‡∏Ç‡∏≤","")))
                        t_type   = _st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå","‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå","‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢","‡∏≠‡∏∑‡πà‡∏ô‡πÜ"],
                                                 index=0 if str(data.get("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",""))=="" else 3)
                    with c2:
                        t_owner = _st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value=str(data.get("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","")))
                        statuses_edit = ["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"]
                        try:
                            idx_default = statuses_edit.index(str(data.get("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á")))
                        except ValueError:
                            idx_default = 0
                        t_status = _st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", statuses_edit, index=idx_default)
                        t_assignee = _st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", value=str(data.get("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","")))
                    t_desc = _st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", value=str(data.get("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","")), height=120)
                    t_note = _st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value=str(data.get("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","")))
                    fcol1, fcol2, fcol3 = _st.columns(3)
                    submit_update = fcol1.form_submit_button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
                    submit_close  = fcol2.form_submit_button("‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô (‡πÄ‡∏™‡∏£‡πá‡∏à)")
                    submit_delete = fcol3.form_submit_button("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

                if submit_update or submit_close:
                    tickets2 = tickets.copy()
                    idx = tickets2.index[tickets2["TicketID"].astype(str) == str(target_id)]
                    if len(idx) == 1:
                        idx0 = idx[0]
                        tickets2.at[idx0, "‡∏™‡∏≤‡∏Ç‡∏≤"] = t_branch
                        tickets2.at[idx0, "‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"] = t_owner
                        tickets2.at[idx0, "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"] = t_desc
                        tickets2.at[idx0, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à" if submit_close else t_status
                        tickets2.at[idx0, "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"] = t_assignee
                        tickets2.at[idx0, "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"] = t_note
                        # ensure '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'
                        if "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" not in tickets2.columns:
                            tickets2["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = ""
                        tickets2.at[idx0, "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = t_type
                        tickets2.at[idx0, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"] = get_now_str()
                        write_df(sh, SHEET_TICKETS, tickets2)
                        _st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                        safe_rerun()
                    else:
                        _st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

                if submit_delete:
                    tickets2 = tickets[tickets["TicketID"].astype(str) != str(target_id)].copy()
                    write_df(sh, SHEET_TICKETS, tickets2)
                    _st.success("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß")
                    safe_rerun()


# Keep Users page as checkbox-select (redefine to ensure present)
def page_users(sh):
    _st.subheader("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ & ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Admin)")

    try:
        users = read_df(sh, SHEET_USERS, USERS_HEADERS)
    except Exception as e:
        _st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return

    base_cols = ["Username","DisplayName","Role","PasswordHash","Active"]
    for col in base_cols:
        if col not in users.columns:
            users[col] = ""
    users = users[base_cols].fillna("")

    _st.markdown("#### üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡∏¥‡πä‡∏Å '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)")
    chosen_username = None
    if hasattr(_st, "data_editor"):
        users_display = users.copy()
        users_display.insert(0, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", False)
        edited_table = _st.data_editor(
            users_display[["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å","Username","DisplayName","Role","PasswordHash","Active"]],
            use_container_width=True, height=300, num_rows="fixed",
            column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": _st.column_config.CheckboxColumn(help="‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")}
        )
        picked = edited_table[edited_table["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] == True]
        if not picked.empty:
            chosen_username = str(picked.iloc[0]["Username"])

    tab_add, tab_edit = _st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"])

    with tab_add:
        with _st.form("form_add_user2", clear_on_submit=True):
            c1, c2 = _st.columns([2,1])
            with c1:
                new_user = _st.text_input("Username*")
                new_disp = _st.text_input("Display Name")
            with c2:
                new_role = _st.selectbox("Role", ["admin","staff","viewer"], index=1)
                new_active = _st.selectbox("Active", ["Y","N"], index=0)
            new_pwd = _st.text_input("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô*", type="password")
            btn_add = _st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà", use_container_width=True, type="primary")

        if btn_add:
            if not new_user.strip() or not new_pwd.strip():
                _st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"); _st.stop()
            if (users["Username"] == new_user).any():
                _st.error("‡∏°‡∏µ Username ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"); _st.stop()
            ph = bcrypt.hashpw(new_pwd.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
            new_row = _pd.DataFrame([{
                "Username": new_user.strip(),
                "DisplayName": new_disp.strip(),
                "Role": new_role,
                "PasswordHash": ph,
                "Active": new_active,
            }])
            users2 = _pd.concat([users, new_row], ignore_index=True)
            try:
                write_df(sh, SHEET_USERS, users2)
                try: _st.cache_data.clear()
                except Exception: pass
                _st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); _st.rerun()
            except Exception as e:
                _st.error(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    with tab_edit:
        default_user = _st.session_state.get("edit_user","")
        if chosen_username:
            _st.session_state["edit_user"] = chosen_username
            default_user = chosen_username

        sel = _st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
            [""] + users["Username"].tolist(),
            index=([""] + users["Username"].tolist()).index(default_user) if default_user in users["Username"].tolist() else 0
        )

        target_user = sel or ""
        if not target_user:
            _st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"); return

        row = users[users["Username"] == target_user]
        if row.empty:
            _st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"); return
        data = row.iloc[0].to_dict()

        with _st.form("form_edit_user2", clear_on_submit=False):
            c1, c2 = _st.columns([2,1])
            with c1:
                username = _st.text_input("Username", value=data["Username"], disabled=True)
                display  = _st.text_input("Display Name", value=data["DisplayName"])
            with c2:
                role  = _st.selectbox("Role", ["admin","staff","viewer"],
                                     index=["admin","staff","viewer"].index(data["Role"]) if data["Role"] in ["admin","staff","viewer"] else 1)
                active = _st.selectbox("Active", ["Y","N"],
                                      index=["Y","N"].index(data["Active"]) if data["Active"] in ["Y","N"] else 0)
            pwd = _st.text_input("‡∏ï‡∏±‡πâ‡∏á/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)", type="password")

            c3, c4 = _st.columns([1,1])
            btn_save = c3.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True, type="primary")
            btn_del  = c4.form_submit_button("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ", use_container_width=True)

        if btn_del:
            if username.lower() == "admin":
                _st.error("‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ admin")
            else:
                users2 = users[users["Username"] != username]
                try:
                    write_df(sh, SHEET_USERS, users2)
                    try: _st.cache_data.clear()
                    except Exception: pass
                    _st.success(f"‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {username} ‡πÅ‡∏•‡πâ‡∏ß")
                    _st.session_state.pop("edit_user", None)
                    _st.rerun()
                except Exception as e:
                    _st.error(f"‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

        if btn_save:
            idx = users.index[users["Username"] == username][0]
            users.at[idx, "DisplayName"] = display
            users.at[idx, "Role"]        = role
            users.at[idx, "Active"]      = active
            if pwd.strip():
                ph = bcrypt.hashpw(pwd.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
                users.at[idx, "PasswordHash"] = ph

            try:
                write_df(sh, SHEET_USERS, users)
                try: _st.cache_data.clear()
                except Exception: pass
                _st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                _st.rerun()
            except Exception as e:
                _st.error(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
# ======================= END OVERRIDES =======================

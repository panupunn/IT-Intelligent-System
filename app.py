
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta, timezone
import json, os, io, time, uuid

# =============================
# Config & Constants
# =============================
CONFIG_FILE = "app_config.json"
TZ = timezone(timedelta(hours=7))  # Asia/Bangkok

SHEET_ITEMS   = "Items"
SHEET_CATS    = "ItemCategories"
SHEET_BRANCHES= "Branches"
SHEET_TXNS    = "Transactions"
SHEET_TICKETS = "Tickets"
SHEET_TICKET_CATS = "TicketCategories"
SHEET_AUDIT   = "AuditLog"

ITEMS_HEADERS = ["‡∏£‡∏´‡∏±‡∏™","‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]
CATS_HEADERS  = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]
BR_HEADERS    = ["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]
TXNS_HEADERS  = ["TxnID","‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó","‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","‡πÇ‡∏î‡∏¢","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
TICKETS_HEADERS=["TicketID","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]

# =============================
# Utilities & Persistence
# =============================
def load_config_into_session():
    try:
        if os.path.exists(CONFIG_FILE):
            cfg = json.load(open(CONFIG_FILE,"r",encoding="utf-8"))
        else:
            cfg = {}
        st.session_state.setdefault("sheet_url", cfg.get("sheet_url",""))
        st.session_state.setdefault("cache_ttl", int(cfg.get("cache_ttl", 120)))
        if cfg.get("connected") and st.session_state.get("sheet_url"):
            _connect_if_needed()
    except Exception:
        pass

def save_config_from_session():
    cfg = {
        "sheet_url": st.session_state.get("sheet_url",""),
        "cache_ttl": int(st.session_state.get("cache_ttl",120)),
        "connected": bool(st.session_state.get("sh"))
    }
    json.dump(cfg, open(CONFIG_FILE,"w",encoding="utf-8"), ensure_ascii=False, indent=2)

def get_username(): return st.session_state.get("username","admin")

# ---------- Google Sheets ----------
def _connect_if_needed():
    if st.session_state.get("sh"):  # already
        return st.session_state["sh"]
    url = st.session_state.get("sheet_url","")
    if not url:
        return None
    sh = open_sheet_by_url(url)
    ensure_sheets_exist(sh)
    st.session_state["sh"] = sh
    st.session_state["connected"] = True
    return sh

def open_sheet_by_url(url: str):
    import gspread
    # try service_account.json from working dir or from st.secrets if available
    creds_path = "service_account.json"
    if not os.path.exists(creds_path) and "service_account" in st.secrets:
        json.dump(dict(st.secrets["service_account"]), open(creds_path,"w"))
    gc = gspread.service_account(filename=creds_path)
    return gc.open_by_url(url)

def ensure_sheets_exist(sh):
    needed = {
        SHEET_ITEMS: ITEMS_HEADERS,
        SHEET_CATS: CATS_HEADERS,
        SHEET_BRANCHES: BR_HEADERS,
        SHEET_TXNS: TXNS_HEADERS,
        SHEET_TICKETS: TICKETS_HEADERS,
        SHEET_TICKET_CATS: ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"],
        SHEET_AUDIT: ["‡πÄ‡∏ß‡∏•‡∏≤","‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"]
    }
    titles = [ws.title for ws in sh.worksheets()]
    for t, hdr in needed.items():
        if t not in titles:
            ws = sh.add_worksheet(t, rows=1000, cols=max(10,len(hdr)))
            ws.update([hdr])
    return True

def log_event(sh, user, event, detail=""):
    try:
        ws = sh.worksheet(SHEET_AUDIT)
        now = datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S")
        ws.append_row([now, user, event, detail], value_input_option="USER_ENTERED")
    except Exception:
        pass

def read_df(sh, title, headers):
    if sh is None: return pd.DataFrame(columns=headers)
    tries=0
    while True:
        try:
            ws = sh.worksheet(title)
            vals = ws.get_all_values()
            break
        except Exception as e:
            msg=str(e)
            if ("429" in msg or "quota" in msg.lower()) and tries<2:
                time.sleep(0.8*(tries+1)); tries+=1; continue
            st.warning(f"‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏µ‡∏ï '{title}' ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {msg}", icon="‚ö†Ô∏è")
            return pd.DataFrame(columns=headers)
    if not vals: return pd.DataFrame(columns=headers)
    df = pd.DataFrame(vals[1:], columns=vals[0])
    # ensure all headers exist
    for h in headers:
        if h not in df.columns: df[h]=""
    return df[headers]

def write_df(sh, title, df):
    ws = sh.worksheet(title)
    values = [list(df.columns)] + df.fillna("").astype(str).values.tolist()
    ws.clear()
    ws.update(values, value_input_option="USER_ENTERED")

# ---------- UI Helpers ----------
def add_reload_button():
    st.button("üîÅ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", on_click=lambda: (st.cache_data.clear(), st.toast("‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß", icon="üîÅ")))

def record_recent(key: str, row: list, headers: list):
    df = st.session_state.get(f"recent_{key}")
    new = pd.DataFrame([row], columns=headers)
    st.session_state[f"recent_{key}"] = new if df is None else pd.concat([df, new], ignore_index=True).tail(10)

def require_login():
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"]=True
        st.session_state["username"]="admin"
        st.session_state["role"]="admin"
    return True

# =============================
# Pages
# =============================
def page_dashboard(sh):
    add_reload_button()
    st.subheader("üìä Dashboard")
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    txns = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)

    total_items = len(items)
    low_rop=0
    if not items.empty:
        try:
            low_rop = (pd.to_numeric(items["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"],errors="coerce") <= pd.to_numeric(items["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"],errors="coerce")).sum()
        except Exception: pass
    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", f"{total_items:,}")
    st.metric("‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ ROP", f"{low_rop:,}")
    st.metric("Tickets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(tickets):,}")

    c1,c2 = st.columns(2)
    with c1:
        st.markdown("**‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (Top 10)**")
        if items.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", icon="‚ÑπÔ∏è")
        else:
            grp = items.copy()
            grp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(grp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
            top = grp.groupby("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().sort_values(ascending=False).head(10)
            st.bar_chart(top)
    with c2:
        st.markdown("**‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° IN/OUT 30 ‡∏ß‡∏±‡∏ô**")
        if txns.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°", icon="‚ÑπÔ∏è")
        else:
            df = txns.copy()
            df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"]=pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
            df = df.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
            cutoff = datetime.now(TZ) - timedelta(days=30)
            df = df[df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"]>=cutoff]
            df["count"]=1
            pv=df.pivot_table(index=df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date, columns="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", values="count", aggfunc="sum").fillna(0)
            st.line_chart(pv)

def render_categories_admin(sh):
    st.markdown("### üè∑Ô∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)")
    cats = read_df(sh, SHEET_CATS, CATS_HEADERS)
    c1,c2 = st.columns([1,2])
    code = c1.text_input("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î")
    name = c2.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î")
    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
        if not code or not name:
            st.warning("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö", icon="‚ö†Ô∏è")
        else:
            base = read_df(sh, SHEET_CATS, CATS_HEADERS)
            if (base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code).any():
                base.loc[base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code,"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]=name; msg="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
            else:
                base = pd.concat([base, pd.DataFrame([[code,name]], columns=CATS_HEADERS)], ignore_index=True); msg="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
            write_df(sh, SHEET_CATS, base); log_event(sh, get_username(), "CAT_SAVE", f"{msg}:{code}")
            st.success(f"{msg}‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")
    st.dataframe(cats, use_container_width=True, height=240)

def page_stock(sh):
    add_reload_button()
    st.subheader("üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    cats  = read_df(sh, SHEET_CATS, CATS_HEADERS)

    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î)")
    view = items if not q else items[items.apply(lambda r: r.astype(str).str.contains(q, case=False).any(), axis=1)]
    st.dataframe(view, use_container_width=True, height=300)

    t1,t2,t3 = st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà)","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö","üè∑Ô∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"])

    with t1:
        with st.form("item_add", clear_on_submit=True):
            c1,c2,c3 = st.columns(3)
            with c1:
                opt = (cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]+" | "+cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).tolist() if not cats.empty else []
                cat_sel = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", options=opt)
                cat_code = cat_sel.split(" | ")[0] if cat_sel else ""
                name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
            with c2:
                unit = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", value="‡∏ä‡∏¥‡πâ‡∏ô")
                qty  = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=0, step=1)
                rop  = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=0, step=1)
            with c3:
                loc  = st.text_input("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", value="‡∏Ñ‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏≤‡∏á")
                active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0)
                code = st.text_input("‡∏£‡∏´‡∏±‡∏™ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ô)", value="")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        if s:
            df = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
            code_final = (code or f"ITM{len(df)+1:04d}").upper()
            new_row = [code_final, cat_code, name, unit, str(qty), str(rop), loc, active]
            if (df["‡∏£‡∏´‡∏±‡∏™"]==code_final).any():
                df.loc[df["‡∏£‡∏´‡∏±‡∏™"]==code_final, ITEMS_HEADERS[1]:] = new_row[1:]; msg="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
            else:
                df = pd.concat([df, pd.DataFrame([new_row], columns=ITEMS_HEADERS)], ignore_index=True); msg="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
            write_df(sh, SHEET_ITEMS, df); log_event(sh, get_username(), "ITEM_SAVE", f"{msg}:{code_final}")
            st.success(f"{msg}‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")
            record_recent("items", new_row, ITEMS_HEADERS)
            st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            st.dataframe(st.session_state.get("recent_items"), use_container_width=True, height=160)

    with t2:
        if items.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", icon="‚ÑπÔ∏è")
        else:
            pick = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", options=(items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).tolist())
            code_sel = pick.split(" | ")[0]
            row = items[items["‡∏£‡∏´‡∏±‡∏™"]==code_sel].iloc[0]
            with st.form("item_edit"):
                name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", value=row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])
                unit = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", value=row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
                qty  = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=int(float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] or 0)))
                rop  = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=int(float(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"] or 0)))
                loc  = st.text_input("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", value=row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"])
                active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0 if row["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]=="Y" else 1)
                save = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            if save:
                items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code_sel, ["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]] = [name, unit, str(qty), str(rop), loc, "Y" if active=="Y" else "N"]
                write_df(sh, SHEET_ITEMS, items); log_event(sh, get_username(), "ITEM_UPDATE", code_sel)
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")

    with t3:
        render_categories_admin(sh)

def page_issue_receive(sh):
    add_reload_button()
    st.subheader("üì• ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    if items.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", icon="‚ÑπÔ∏è"); return
    t1,t2 = st.tabs(["‡πÄ‡∏ö‡∏¥‡∏Å (OUT)","‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (IN)"])

    with t1:
        with st.form("issue", clear_on_submit=True):
            pick = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", options=(items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).tolist())
            bopt = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å", options=(branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]+" | "+branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [])
            qty  = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å", min_value=1, value=1, step=1)
            by   = st.text_input("‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", value=get_username())
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value="")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å")
        if s:
            code_sel = pick.split(" | ")[0]
            row = items[items["‡∏£‡∏´‡∏±‡∏™"]==code_sel].iloc[0]
            cur = int(float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] or 0))
            if qty>cur: st.error("‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠", icon="‚ö†Ô∏è")
            else:
                items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code_sel,"‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]=str(cur-qty); write_df(sh, SHEET_ITEMS, items)
                txns = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
                branch_code = bopt.split(" | ")[0] if bopt else ""
                new_txn = [str(uuid.uuid4())[:8], datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S"), "OUT", code_sel, row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], branch_code, str(qty), by, note]
                txns = pd.concat([txns, pd.DataFrame([new_txn], columns=TXNS_HEADERS)], ignore_index=True)
                write_df(sh, SHEET_TXNS, txns); log_event(sh, get_username(), "ISSUE", f"{code_sel} x {qty} @ {branch_code}")
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")
                record_recent("txns", new_txn, TXNS_HEADERS)
                st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                st.dataframe(st.session_state.get("recent_txns"), use_container_width=True, height=160)

    with t2:
        with st.form("receive", clear_on_submit=True):
            pick = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", options=(items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).tolist(), key="recvpick")
            bopt = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", options=(branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]+" | "+branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [], key="recvbranch")
            qty  = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", min_value=1, value=1, step=1, key="recvqty")
            by   = st.text_input("‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", value=get_username(), key="recvby")
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value="", key="recvnote")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
        if s:
            code_sel = pick.split(" | ")[0]
            row = items[items["‡∏£‡∏´‡∏±‡∏™"]==code_sel].iloc[0]
            cur = int(float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] or 0))
            items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code_sel,"‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]=str(cur+qty); write_df(sh, SHEET_ITEMS, items)
            txns = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
            branch_code = bopt.split(" | ")[0] if bopt else ""
            new_txn = [str(uuid.uuid4())[:8], datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S"), "IN", code_sel, row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], branch_code, str(qty), by, note]
            txns = pd.concat([txns, pd.DataFrame([new_txn], columns=TXNS_HEADERS)], ignore_index=True)
            write_df(sh, SHEET_TXNS, txns); log_event(sh, get_username(), "RECEIVE", f"{code_sel} x {qty} @ {branch_code}")
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")
            record_recent("txns", new_txn, TXNS_HEADERS)
            st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            st.dataframe(st.session_state.get("recent_txns"), use_container_width=True, height=160)

def page_tickets(sh):
    add_reload_button()
    st.subheader("üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° / ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Tickets)")
    cats = read_df(sh, SHEET_TICKET_CATS, ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"])
    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)

    if st.session_state.get("role","admin") in ("admin","staff"):
        tab1, tab2, tab3 = st.tabs(["‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠","‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤"])
    else:
        tab1, tab2 = st.tabs(["‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠","‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]); tab3=None

    with tab1:
        with st.form("tick_new", clear_on_submit=True):
            bopt = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", options=(branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]+" | "+branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [])
            cat  = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", options=(cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]+" | "+cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not cats.empty else [])
            who  = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value=get_username())
            detail = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
            s = st.form_submit_button("‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket")
        if s:
            df = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
            tid = "T"+datetime.now(TZ).strftime("%y%m%d%H%M%S")
            now = datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S")
            catname = cat.split(" | ")[1] if cat else ""
            branch_code = bopt.split(" | ")[0] if bopt else ""
            row=[tid, now, branch_code, who, catname, detail, "‡πÄ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô", "", now, ""]
            df = pd.concat([df, pd.DataFrame([row], columns=TICKETS_HEADERS)], ignore_index=True)
            write_df(sh, SHEET_TICKETS, df); log_event(sh, get_username(), "TICKET_NEW", tid)
            st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")
            record_recent("tickets", row, TICKETS_HEADERS)
            st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Ticket ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            st.dataframe(st.session_state.get("recent_tickets"), use_container_width=True, height=160)

    with tab2:
        st.caption("‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        c1,c2,c3 = st.columns(3)
        status = c1.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î","‡πÄ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏£‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà","‡∏à‡∏ö‡∏á‡∏≤‡∏ô"])
        whof   = c2.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)")
        q      = c3.text_input("‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡∏´‡∏°‡∏ß‡∏î)")
        view = tickets.copy()
        if status!="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": view = view[view["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]==status]
        if whof: view = view[view["‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"].str.contains(whof, case=False, na=False)]
        if q: view = view[view.apply(lambda r: r.astype(str).str.contains(q, case=False).any(), axis=1)]
        if view.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", icon="‚ÑπÔ∏è")
        else:
            view = view.copy(); view.insert(0,"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", False)
            ed = st.data_editor(view, use_container_width=True, height=360,
                                column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn()},
                                disabled=[c for c in view.columns if c!="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"], hide_index=True, key="tickets_table")
            sel = ed[ed["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]==True]
            selected_tid = sel["TicketID"].iloc[0] if len(sel)==1 else None
            with st.expander("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", expanded=bool(selected_tid)):
                if not selected_tid:
                    st.info("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Å‡πà‡∏≠‡∏ô", icon="‚ÑπÔ∏è")
                else:
                    target = tickets[tickets["TicketID"]==selected_tid].iloc[0]
                    st.write(f"Ticket **{selected_tid}** ¬∑ ‡∏™‡∏≤‡∏Ç‡∏≤: **{target['‡∏™‡∏≤‡∏Ç‡∏≤']}** ¬∑ ‡∏´‡∏°‡∏ß‡∏î: **{target['‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà']}**")
                    c1,c2,c3 = st.columns(3)
                    st_new = c1.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà", ["‡πÄ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏£‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà","‡∏à‡∏ö‡∏á‡∏≤‡∏ô"],
                                          index=["‡πÄ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏£‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà","‡∏à‡∏ö‡∏á‡∏≤‡∏ô"].index(target["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]))
                    assignee = c2.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", value=str(target.get("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","") or ""))
                    note = c3.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", value=str(target.get("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","") or ""))
                    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", type="primary"):
                        tickets.loc[tickets["TicketID"]==selected_tid, ["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]] = \
                            [st_new, assignee, datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S"), note]
                        write_df(sh, SHEET_TICKETS, tickets); log_event(sh, get_username(), "TICKET_UPDATE", f"{selected_tid}->{st_new}")
                        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")
                        record_recent("tickets", tickets[tickets["TicketID"]==selected_tid].iloc[0].values.tolist(), TICKETS_HEADERS)
                        st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Ticket ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                        st.dataframe(st.session_state.get("recent_tickets"), use_container_width=True, height=160)

    if tab3 is not None:
        with tab3:
            st.markdown("### üóÇÔ∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
            c1,c2 = st.columns([1,2])
            code = c1.text_input("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
            name = c2.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
            if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
                base = read_df(sh, SHEET_TICKET_CATS, ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"])
                if (base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]==code).any():
                    base.loc[base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]==code,"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]=name; msg="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
                else:
                    base = pd.concat([base, pd.DataFrame([[code,name]], columns=["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"])], ignore_index=True); msg="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
                write_df(sh, SHEET_TICKET_CATS, base); log_event(sh, get_username(), "TICKET_CAT_SAVE", f"{msg}:{code}")
                st.success(f"{msg}‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")
            st.dataframe(read_df(sh, SHEET_TICKET_CATS, ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]), use_container_width=True, height=240)

def page_reports(sh):
    add_reload_button()
    st.subheader("üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    txns  = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    c1,c2 = st.columns(2)
    since = c1.date_input("‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà", value=date.today()-timedelta(days=30))
    until = c2.date_input("‡∏ñ‡∏∂‡∏á", value=date.today())

    st.markdown("### ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ ROP")
    low = pd.DataFrame(columns=ITEMS_HEADERS)
    if not items.empty:
        try:
            m = pd.to_numeric(items["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"],errors="coerce") <= pd.to_numeric(items["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"],errors="coerce")
            low = items[m]
        except Exception: pass
    st.dataframe(low, use_container_width=True, height=200)

    st.markdown("### ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
    view = txns.copy()
    if not view.empty:
        view["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"]=pd.to_datetime(view["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
        view=view.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        view = view[(view["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date>=since) & (view["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date<=until)]
    st.dataframe(view, use_container_width=True, height=260)

    st.markdown("### ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
    out = view[view["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]=="OUT"].copy() if not view.empty else pd.DataFrame(columns=TXNS_HEADERS)
    if not out.empty:
        out["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]=pd.to_numeric(out["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], errors="coerce").fillna(0)
        pvt = out.pivot_table(index="‡∏™‡∏≤‡∏Ç‡∏≤", columns="‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", aggfunc="sum", fill_value=0)
        st.dataframe(pvt, use_container_width=True, height=200)
        st.bar_chart(pvt.sum(axis=1))

    st.markdown("### ‡∏™‡∏£‡∏∏‡∏õ Tickets ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
    tv = tickets.copy()
    if not tv.empty:
        tv["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"]=pd.to_datetime(tv["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        tv=tv.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        tv = tv[(tv["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date>=since) & (tv["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date<=until)]
    if not tv.empty:
        pvt2 = tv.pivot_table(index="‡∏™‡∏≤‡∏Ç‡∏≤", columns="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", values="TicketID", aggfunc="count", fill_value=0)
        st.dataframe(pvt2, use_container_width=True, height=200)

def page_users_admin(sh):
    add_reload_button()
    st.subheader("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    st.info("‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢ (‡∏à‡∏≥‡∏•‡∏≠‡∏á). ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡∏µ‡∏ï Users ‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö", icon="‚ÑπÔ∏è")

def page_settings(sh):
    add_reload_button()
    st.subheader("‚öôÔ∏è Settings")
    st.text_input("Google Sheet URL", key="sheet_url", value=st.session_state.get("sheet_url",""))
    up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î service_account.json", type=["json"])
    if up is not None:
        open("service_account.json","wb").write(up.read())
        st.success("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î service_account.json ‡πÅ‡∏•‡πâ‡∏ß", icon="‚úÖ")
    c1,c2,c3 = st.columns(3)
    if c1.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL/TTL"):
        save_config_from_session()
        sh = _connect_if_needed()
        if sh: st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", icon="‚úÖ")
    if c2.button("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"):
        sh = _connect_if_needed()
        if sh: st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", icon="‚úÖ")
        else: st.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", icon="‚ùå")
    st.slider("TTL ‡πÅ‡∏Ñ‡∏ä (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", 10, 600, key="cache_ttl")
    st.write("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:", "‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°" if st.session_state.get("sh") else "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°")

# =============================
# App main
# =============================
def main():
    st.set_page_config(page_title="IT Intelligent System", layout="wide")
    require_login()
    load_config_into_session()
    sh = _connect_if_needed()
    st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π")
    page = st.sidebar.radio("", ["üìä Dashboard","üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° / ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Tickets)","üì• ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤","üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô","üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","‚öôÔ∏è Settings"])
    st.sidebar.markdown("---")
    st.sidebar.caption(f"Role: {st.session_state.get('role','admin')}")
    if page=="üìä Dashboard": page_dashboard(sh)
    elif page=="üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå": page_stock(sh)
    elif page=="üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° / ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Tickets)": page_tickets(sh)
    elif page=="üì• ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": page_issue_receive(sh)
    elif page=="üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô": page_reports(sh)
    elif page=="üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ": page_users_admin(sh)
    elif page=="‚öôÔ∏è Settings": page_settings(sh)

if __name__ == "__main__":
    main()

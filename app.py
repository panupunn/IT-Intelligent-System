#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
apply_stock_optionB_patch.py
---------------------------------
Patch your current app file to enable "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á" (Option B)
for the Stock page.

Usage:
    1) Put this file next to your app file (e.g., app.py)
    2) Run:  python apply_stock_optionB_patch.py app.py
    3) It will create: app_patched_stockB.py (safe copy), leaving your original app unchanged.
"""
import sys, re, io, os

TEMPLATE_FUNC = r"""
def page_stock(sh):
    add_reload_button()
    st.subheader("üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")

    import pandas as pd
    df = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)

    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î)", "")
    if q.strip():
        ql = q.strip().lower()
        df = df[df.apply(lambda r: ql in str(r["‡∏£‡∏´‡∏±‡∏™"]).lower()
                                   or ql in str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).lower()
                                   or ql in str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).lower(), axis=1)]

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    df_show = df.copy()
    if "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" not in df_show.columns:
        df_show.insert(0, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", False)

    st.caption("‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
    edited_table = st.data_editor(
        df_show,
        use_container_width=True,
        hide_index=True,
        num_rows="fixed",
        column_config={
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn(help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á"),
            "‡∏£‡∏´‡∏±‡∏™": st.column_config.TextColumn(disabled=True),
        },
        disabled=[c for c in df_show.columns if c not in ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]],
        key="items_picker",
    )

    selected = edited_table[edited_table["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] == True]
    if len(selected) != 1:
        st.info("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", icon="‚ÑπÔ∏è")
        return

    row = selected.iloc[0]
    st.markdown("### ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")

    col1, col2 = st.columns(2)
    code_id = col1.text_input("‡∏£‡∏´‡∏±‡∏™", value=row["‡∏£‡∏´‡∏±‡∏™"], disabled=True)
    cat  = col2.text_input("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î", value=row["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"])
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", value=row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])
    unit = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", value=row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"])
    bal  = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, step=1, value=int(pd.to_numeric(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce") or 0))
    rop  = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, step=1, value=int(pd.to_numeric(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors="coerce") or 0))
    loc  = st.text_input("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", value=row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"])
    use  = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0 if str(row["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]).upper()=="Y" else 1)

    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", type="primary"):
        df2 = df.copy()
        df2.loc[df2["‡∏£‡∏´‡∏±‡∏™"] == code_id, ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]] =             [cat, name, unit, str(bal), str(rop), loc, use]
        write_df(sh, SHEET_ITEMS, df2.astype(str))
        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", icon="‚úÖ")
        st.rerun()
"""

def main():
    if len(sys.argv) < 2:
        print("Usage: python apply_stock_optionB_patch.py <your_app_file.py>")
        sys.exit(2)

    path = sys.argv[1]
    with io.open(path, "r", encoding="utf-8") as f:
        src = f.read()

    # Try replace existing page_stock
    new_src, n = re.subn(r'def\s+page_stock\([^\)]*\):[\s\S]*?(?=\ndef\s+\w+\()', TEMPLATE_FUNC + "\n", src, count=1)
    if n == 0:
        # append at end (if not found)
        new_src = src + "\n\n" + TEMPLATE_FUNC + "\n"

    out_path = os.path.splitext(path)[0] + "_patched_stockB.py"
    with io.open(out_path, "w", encoding="utf-8") as f:
        f.write(new_src)

    print("Patched:", out_path)

if __name__ == "__main__":
    main()

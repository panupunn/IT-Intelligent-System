#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, json, base64, io, re, uuid, time
from datetime import datetime, date, timedelta, time as dtime

import streamlit as st
import pandas as pd
import altair as alt
import pytz
import bcrypt

# =========================
# Safe rerun shim (fixes AttributeError for experimental_rerun)
# =========================
def safe_rerun():
    if hasattr(st, "rerun"):
        st.rerun()
    elif hasattr(st, "experimental_rerun"):
        st.experimental_rerun()
    else:
        # fallback: ask the user to click a small button to refresh
        st.toast("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", icon="üîÅ")

# for legacy code paths
if not hasattr(st, "experimental_rerun"):
    st.experimental_rerun = safe_rerun  # alias for old calls

# =========================
# App Constants
# =========================
APP_TITLE = "‡πÑ‡∏≠‡∏ï‡πâ‡∏≤‡∏ß ‡πÑ‡∏≠‡∏ó‡∏µ (iTao iT)"
APP_TAGLINE = "POWER By ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô=> ‡πÑ‡∏≠‡∏ó‡∏µ‡∏™‡∏∏‡∏î‡∏´‡∏•‡πà‡∏≠"
TZ = pytz.timezone("Asia/Bangkok")

# Sheet / Worksheet names
SHEET_ITEMS       = "Items"
SHEET_TXNS        = "Transactions"
SHEET_USERS       = "Users"
SHEET_CATS        = "Categories"
SHEET_BRANCHES    = "Branches"
SHEET_TICKETS     = "Tickets"
SHEET_TICKET_CATS = "TicketCategories"

# Headers
ITEMS_HEADERS   = ["‡∏£‡∏´‡∏±‡∏™","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]
TXNS_HEADERS    = ["TxnID","‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó","‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
USERS_HEADERS   = ["Username","DisplayName","Role","PasswordHash","Active"]
CATS_HEADERS    = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]
BR_HEADERS      = ["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]
TICKETS_HEADERS = ["TicketID","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
TICKET_CAT_HEADERS = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]

# Default Google Sheet URL (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô Settings)
DEFAULT_SHEET_URL = "https://docs.google.com/spreadsheets/d/1SGKzZ9WKkRtcmvN3vZj9w2yeM6xNoB6QV3-gtnJY-Bw/edit?gid=0#gid=0"

# =========================
# Credentials loader (secrets ‚Üí env ‚Üí file). No upload prompt.
# =========================
from google.oauth2.service_account import Credentials
import gspread

GOOGLE_SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

def _try_load_sa_from_secrets():
    try:
        if "gcp_service_account" in st.secrets:
            return dict(st.secrets["gcp_service_account"])
        if "service_account" in st.secrets:
            return dict(st.secrets["service_account"])
        if "service_account_json" in st.secrets:
            raw = st.secrets["service_account_json"]
            return json.loads(str(raw))
    except Exception:
        pass
    return None

def _try_load_sa_from_env():
    raw = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS_JSON") or os.environ.get("SERVICE_ACCOUNT_JSON") or os.environ.get("GOOGLE_CREDENTIALS_JSON")
    if not raw: 
        return None
    try:
        raw = raw.strip()
        if raw.lstrip().startswith("{"):
            return json.loads(raw)
        return json.loads(base64.b64decode(raw).decode("utf-8"))
    except Exception:
        return None

def _try_load_sa_from_file():
    for p in ("./service_account.json", "/mount/data/service_account.json", "/mnt/data/service_account.json"):
        try:
            with open(p, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            continue
    return None

@st.cache_resource(show_spinner=False)
def get_client():
    info = _try_load_sa_from_secrets() or _try_load_sa_from_env() or _try_load_sa_from_file()
    if info is None:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö Service Account ‡πÉ‡∏ô secrets/env/file\n\n‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô **Secrets** ‡∏ä‡∏∑‡πà‡∏≠ `gcp_service_account` (‡∏ó‡∏±‡πâ‡∏á object) ‡∏´‡∏£‡∏∑‡∏≠ ENV `GOOGLE_APPLICATION_CREDENTIALS_JSON`.")
        st.stop()
    creds = Credentials.from_service_account_info(info, scopes=GOOGLE_SCOPES)
    return gspread.authorize(creds)

@st.cache_resource(show_spinner=False)
def open_sheet_by_url(url: str):
    gc = get_client()
    return gc.open_by_url(url)

@st.cache_resource(show_spinner=False)
def open_sheet_by_key(key: str):
    gc = get_client()
    return gc.open_by_key(key)

# =========================
# Utils
# =========================
def fmt_dt(dt_obj: datetime) -> str:
    return dt_obj.strftime("%Y-%m-%d %H:%M:%S")

def get_now_str():
    return fmt_dt(datetime.now(TZ))

def combine_date_time(d: date, t: dtime) -> datetime:
    naive = datetime.combine(d, t)
    return TZ.localize(naive)

def clear_cache():
    try:
        st.cache_data.clear()
    except Exception:
        pass

# Data cache helpers
@st.cache_data(ttl=60, show_spinner=False)
def _cached_ws_records(sheet_url_or_key: str, ws_title: str, by="url"):
    try:
        sh = open_sheet_by_url(sheet_url_or_key) if by=="url" else open_sheet_by_key(sheet_url_or_key)
        ws = sh.worksheet(ws_title)
        return ws.get_all_records()
    except Exception as e:
        raise

def read_df(sh, sheet_name: str, headers=None):
    # try cached by url if available
    sheet_url = st.session_state.get("sheet_url", "") or ""
    try:
        if sheet_url:
            recs = _cached_ws_records(sheet_url, sheet_name, by="url")
        else:
            ws = sh.worksheet(sheet_name)
            recs = ws.get_all_records()
    except Exception:
        ws = sh.worksheet(sheet_name)
        recs = ws.get_all_records()
    df = pd.DataFrame(recs)
    if headers:
        for h in headers:
            if h not in df.columns:
                df[h] = ""
        try:
            df = df[headers]
        except Exception:
            pass
    return df

def write_df(sh, title, df):
    ws = sh.worksheet(title)
    ws.clear()
    # ensure columns order
    if title==SHEET_ITEMS: cols=ITEMS_HEADERS
    elif title==SHEET_TXNS: cols=TXNS_HEADERS
    elif title==SHEET_USERS: cols=USERS_HEADERS
    elif title==SHEET_CATS: cols=CATS_HEADERS
    elif title==SHEET_BRANCHES: cols=BR_HEADERS
    elif title==SHEET_TICKETS: cols=TICKETS_HEADERS
    elif title==SHEET_TICKET_CATS: cols=TICKET_CAT_HEADERS
    else: cols = list(df.columns)
    for c in cols:
        if c not in df.columns: df[c] = ""
    df = df[cols]
    ws.update([df.columns.values.tolist()] + df.astype(str).values.tolist())
    clear_cache()

def append_row(sh, title, row):
    sh.worksheet(title).append_row([str(x) for x in row])
    clear_cache()

def ensure_sheets_exist(sh):
    required = [
        (SHEET_ITEMS, ITEMS_HEADERS, 1000, len(ITEMS_HEADERS)+4),
        (SHEET_TXNS, TXNS_HEADERS, 1000, len(TXNS_HEADERS)+4),
        (SHEET_USERS, USERS_HEADERS, 100, len(USERS_HEADERS)+2),
        (SHEET_CATS, CATS_HEADERS, 200, len(CATS_HEADERS)+2),
        (SHEET_BRANCHES, BR_HEADERS, 200, len(BR_HEADERS)+2),
        (SHEET_TICKETS, TICKETS_HEADERS, 500, len(TICKETS_HEADERS)+4),
        (SHEET_TICKET_CATS, TICKET_CAT_HEADERS, 200, len(TICKET_CAT_HEADERS)+2),
    ]
    try:
        titles = [ws.title for ws in sh.worksheets()]
    except Exception:
        titles = []
    for name, headers, r, c in required:
        if name not in titles:
            ws = sh.add_worksheet(name, r, c)
            ws.append_row(headers)
    # seed default admin
    try:
        users = sh.worksheet(SHEET_USERS).get_all_records()
        if len(users)==0:
            ph = bcrypt.hashpw("admin123".encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
            sh.worksheet(SHEET_USERS).append_row(["admin","Administrator","admin",ph,"Y"])
    except Exception:
        pass

# =========================
# Auth
# =========================
def auth_block(sh):
    st.session_state.setdefault("user", None)
    st.session_state.setdefault("role", None)

    if st.session_state.get("user"):
        with st.sidebar:
            st.markdown(f"**üë§ {st.session_state['user']}**")
            st.caption(f"Role: {st.session_state['role']}")
            if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
                st.session_state["user"] = None
                st.session_state["role"] = None
                safe_rerun()
        return True

    st.sidebar.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    u = st.sidebar.text_input("Username", key="login_u")
    p = st.sidebar.text_input("Password", type="password", key="login_p")
    if st.sidebar.button("Login", use_container_width=True):
        users = read_df(sh, SHEET_USERS, USERS_HEADERS)
        row = users[(users["Username"]==u) & (users["Active"].astype(str).str.upper()=="Y")]
        if not row.empty:
            ok = False
            try:
                ok = bcrypt.checkpw(p.encode("utf-8"), row.iloc[0]["PasswordHash"].encode("utf-8"))
            except Exception:
                ok = False
            if ok:
                st.session_state["user"] = u
                st.session_state["role"] = row.iloc[0]["Role"]
                st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                safe_rerun()
            else:
                st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    return False

# =========================
# Business helpers
# =========================
def generate_item_code(sh, cat_code: str) -> str:
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    pattern = re.compile(rf"^{re.escape(cat_code)}-(\d+)$")
    max_num = 0
    for code in items["‡∏£‡∏´‡∏±‡∏™"].dropna().astype(str):
        m = pattern.match(code.strip())
        if m:
            try:
                max_num = max(max_num, int(m.group(1)))
            except Exception:
                pass
    return f"{cat_code}-{max_num+1:03d}"

def adjust_stock(sh, code, delta, actor, branch="", note="", txn_type="OUT", ts_str=None):
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    row = items[items["‡∏£‡∏´‡∏±‡∏™"]==code]
    if row.empty:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ"); return False
    cur = int(pd.to_numeric(row.iloc[0]["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0))
    if txn_type=="OUT" and cur + delta < 0:
        st.error("‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠"); return False
    items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = str(cur + delta)
    write_df(sh, SHEET_ITEMS, items)
    ts = ts_str if ts_str else get_now_str()
    append_row(sh, SHEET_TXNS, [str(uuid.uuid4())[:8], ts, txn_type, code, row.iloc[0]["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], branch, abs(delta), actor, note])
    return True

# =========================
# Pages
# =========================
def page_dashboard(sh):
    st.subheader("üìä Dashboard")

    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    txns  = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)

    total_items = len(items)
    total_qty = pd.to_numeric(items.get("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", pd.Series(dtype=str)), errors="coerce").fillna(0).sum() if not items.empty else 0
    low_df = items.copy()
    if not low_df.empty:
        low_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(low_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        low_df["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"] = pd.to_numeric(low_df["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors="coerce").fillna(0)
        low_df = low_df[(low_df["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"].astype(str).str.upper()=="Y") & (low_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] <= low_df["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"])]
    low_count = len(low_df)

    c1, c2, c3 = st.columns(3)
    c1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"{total_items:,}")
    c2.metric("‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏°", f"{int(total_qty):,}")
    c3.metric("‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", f"{low_count:,}")

    st.markdown("### ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á")
    chart_opts = st.multiselect(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
        ["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)","‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT)","Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"],
        default=["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)","Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
    )
    top_n = st.slider("Top-N", 3, 20, 10, 1)
    per_row = st.selectbox("‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß", [1,2,3,4], index=1)
    kind = st.radio("‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü", ["‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° (Pie)","‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Bar)"], horizontal=True)

    # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö OUT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    st.markdown("#### ‚è±Ô∏è ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OUT ‡πÅ‡∏•‡∏∞ Tickets)")
    colR1, colR2, colR3 = st.columns(3)
    with colR1:
        ranges = ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ","7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏õ‡∏µ‡∏ô‡∏µ‡πâ"]
        pick = st.selectbox("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ranges, index=2)
    today = datetime.now(TZ).date()
    if pick=="‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ": d1, d2 = today, today
    elif pick=="7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": d1, d2 = today - timedelta(days=6), today
    elif pick=="30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": d1, d2 = today - timedelta(days=29), today
    elif pick=="90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": d1, d2 = today - timedelta(days=89), today
    else: d1, d2 = date(today.year,1,1), today

    # Build charts
    charts = []
    if "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" in chart_opts and not items.empty:
        df = items.copy()
        df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        work = df.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().reset_index()
        charts.append(("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", work, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"))
    if "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö" in chart_opts and not items.empty:
        df = items.copy()
        df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        work = df.groupby("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().reset_index()
        charts.append(("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", work, "‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"))
    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)" in chart_opts:
        if not txns.empty:
            df = txns.copy()
            df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
            df = df.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
            df = df[(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= d1) & (df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= d2) & (df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]=="OUT")]
            df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] = pd.to_numeric(df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], errors="coerce").fillna(0)
            work = df.groupby("‡∏™‡∏≤‡∏Ç‡∏≤")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
        else:
            work = pd.DataFrame({"‡∏™‡∏≤‡∏Ç‡∏≤":[],"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]})
        charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT) {d1} ‡∏ñ‡∏∂‡∏á {d2}", work, "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT)" in chart_opts:
        if not txns.empty:
            df = txns.copy()
            df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
            df = df.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
            df = df[(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= d1) & (df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= d2) & (df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]=="OUT")]
            df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] = pd.to_numeric(df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], errors="coerce").fillna(0)
            work = df.groupby("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
        else:
            work = pd.DataFrame({"‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå":[],"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]})
        charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT) {d1} ‡∏ñ‡∏∂‡∏á {d2}", work, "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
    if "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" in chart_opts:
        if not tickets.empty:
            df = tickets.copy()
            df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
            df = df.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
            df = df[(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= d1) & (df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= d2)]
            work = df.groupby("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"})
        else:
            work = pd.DataFrame({"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞":[],"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]})
        charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {d1} ‡∏ñ‡∏∂‡∏á {d2}", work, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    def show_chart(title, df, label, value):
        if df.empty or (value in df.columns and pd.to_numeric(df[value], errors="coerce").fillna(0).sum()==0):
            st.info(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {title}")
            return
        work = df.copy()
        work[value] = pd.to_numeric(work[value], errors="coerce").fillna(0)
        work = work.sort_values(value, ascending=False)
        if len(work) > top_n:
            work = work.head(top_n)
        st.markdown(f"**{title}**")
        if kind.startswith("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á"):
            ch = alt.Chart(work).mark_bar().encode(
                x=alt.X(f"{label}:N", sort='-y'),
                y=alt.Y(f"{value}:Q"),
                tooltip=[label, value]
            )
            st.altair_chart(ch.properties(height=320), use_container_width=True)
        else:
            ch = alt.Chart(work).mark_arc(innerRadius=60).encode(
                theta=f"{value}:Q", color=f"{label}:N", tooltip=[label, value]
            )
            st.altair_chart(ch, use_container_width=True)

    rows = (len(charts) + per_row - 1) // per_row
    idx = 0
    for r in range(rows):
        cols = st.columns(per_row)
        for c in range(per_row):
            if idx >= len(charts): break
            title, df, label, value = charts[idx]
            with cols[c]:
                show_chart(title, df, label, value)
            idx += 1

def page_stock(sh):
    st.subheader("üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î)")
    view = items.copy()
    if q and not items.empty:
        mask = (
            items["‡∏£‡∏´‡∏±‡∏™"].astype(str).str.contains(q, case=False, na=False) |
            items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].astype(str).str.contains(q, case=False, na=False) |
            items["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].astype(str).str.contains(q, case=False, na=False)
        )
        view = items[mask]
    st.dataframe(view, height=300, use_container_width=True)

    tab_add, tab_edit = st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà)","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö (‡∏ï‡∏¥‡πä‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á)"])

    with tab_add:
        cats = read_df(sh, SHEET_CATS, CATS_HEADERS)
        branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
        unit_default = "‡∏ä‡∏¥‡πâ‡∏ô"
        with st.form("add_item", clear_on_submit=True):
            c1, c2, c3 = st.columns(3)
            with c1:
                if cats.empty:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÑ‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà)")
                    cat_code = st.text_input("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏£‡∏´‡∏±‡∏™)", "")
                else:
                    pick = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏£‡∏´‡∏±‡∏™ | ‡∏ä‡∏∑‡πà‡∏≠)", options=(cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]+" | "+cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).tolist())
                    cat_code = pick.split(" | ")[0]
                name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
            with c2:
                auto = st.checkbox("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=True)
                code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏≠‡πÇ‡∏ï‡πâ)", disabled=auto)
                unit = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", value=unit_default)
                qty = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 0, 10**9, 0, 1)
            with c3:
                rop = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", 0, 10**9, 0, 1)
                loc = st.text_input("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", "IT Room")
                active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0)
                s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", use_container_width=True)
        if s:
            if auto and cat_code.strip():
                code_gen = generate_item_code(sh, cat_code.strip())
            else:
                code_gen = code.strip().upper()
            if not code_gen:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™"); st.stop()
            items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
            if (items["‡∏£‡∏´‡∏±‡∏™"]==code_gen).any():
                # update row
                items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code_gen, ITEMS_HEADERS] = [code_gen, cat_code, name, unit, qty, rop, loc, active]
            else:
                items = pd.concat([items, pd.DataFrame([[code_gen, cat_code, name, unit, qty, rop, loc, active]], columns=ITEMS_HEADERS)], ignore_index=True)
            write_df(sh, SHEET_ITEMS, items)
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {code_gen}")
            safe_rerun()

    with tab_edit:
        if items.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            return
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡πá‡∏≠‡∏Å‡∏ã‡πå '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'
        if hasattr(st, "data_editor"):
            items_editable = items.copy()
            items_editable.insert(0, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", False)
            edited = st.data_editor(items_editable, hide_index=True, num_rows="fixed", height=360, use_container_width=True,
                                    column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn(required=False)})
            picked = edited[edited["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]==True]
            if picked.empty:
                st.info("‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö")
                return
            target_code = str(picked.iloc[0]["‡∏£‡∏´‡∏±‡∏™"])
        else:
            st.dataframe(items, height=360, use_container_width=True)
            target_code = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ")
            if not target_code: return

        row = items[items["‡∏£‡∏´‡∏±‡∏™"]==target_code]
        if row.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ"); return
        data = row.iloc[0]

        with st.form("edit_item", clear_on_submit=False):
            c1,c2,c3 = st.columns(3)
            with c1:
                code = st.text_input("‡∏£‡∏´‡∏±‡∏™", value=data["‡∏£‡∏´‡∏±‡∏™"], disabled=True)
                cat  = st.text_input("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value=str(data["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"]))
                name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", value=str(data["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]))
            with c2:
                unit = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", value=str(data["‡∏´‡∏ô‡πà‡∏ß‡∏¢"]))
                qty = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 0, 10**9, int(pd.to_numeric(data["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce") or 0), 1)
                rop = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", 0, 10**9, int(pd.to_numeric(data["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors="coerce") or 0), 1)
            with c3:
                loc = st.text_input("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", value=str(data["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]))
                active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0 if str(data["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]).upper()=="Y" else 1)
                b1, b2 = st.columns([2,1])
                save_btn = b1.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True)
                del_btn  = b2.form_submit_button("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", use_container_width=True)

        if save_btn:
            items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code, ITEMS_HEADERS] = [code, cat, name, unit, qty, rop, loc, active]
            write_df(sh, SHEET_ITEMS, items); st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
        if del_btn:
            items2 = items[items["‡∏£‡∏´‡∏±‡∏™"]!=code]
            write_df(sh, SHEET_ITEMS, items2); st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

def page_issue_receive(sh):
    st.subheader("üßæ ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
    if st.session_state.get("role") not in ("admin","staff"):
        st.info("‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏ä‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ"); return
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    if items.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"); return
    t1, t2 = st.tabs(["‡πÄ‡∏ö‡∏¥‡∏Å (OUT)","‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (IN)"])
    with t1:
        with st.form("out", clear_on_submit=True):
            item = st.selectbox("‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", options=(items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).tolist())
            qty  = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", 1, 10**9, 1, 1)
            branch = st.text_input("‡∏™‡∏≤‡∏Ç‡∏≤/‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "")
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å", use_container_width=True)
        if s:
            code = item.split(" | ")[0]
            ok = adjust_stock(sh, code, -qty, st.session_state.get("user","unknown"), branch, note, "OUT")
            if ok: st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
    with t2:
        with st.form("in", clear_on_submit=True):
            item = st.selectbox("‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", options=(items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"]).tolist(), key="in_pick")
            qty  = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", 1, 10**9, 1, 1, key="in_qty")
            src  = st.text_input("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤/‡πÄ‡∏•‡∏Ç PO", "", key="in_src")
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "", key="in_note")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", use_container_width=True)
        if s:
            code = item.split(" | ")[0]
            ok = adjust_stock(sh, code, qty, st.session_state.get("user","unknown"), src, note, "IN")
            if ok: st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

def page_tickets(sh):
    st.subheader("üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Tickets)")
    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    t_cats = read_df(sh, SHEET_TICKET_CATS, TICKET_CAT_HEADERS)

    st.markdown("### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    if hasattr(st, "data_editor"):
        tdisp = tickets.copy()
        if not tdisp.empty:
            tdisp.insert(0, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", False)
        edited = st.data_editor(tdisp if not tickets.empty else pd.DataFrame(columns=["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]+TICKETS_HEADERS),
                                hide_index=True, use_container_width=True, height=300,
                                column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn()})
        picked = edited[edited["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]==True]
    else:
        st.dataframe(tickets, use_container_width=True, height=300)
        picked = pd.DataFrame()

    t_add, t_edit = st.tabs(["‚ûï ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö (‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)"])
    with t_add:
        with st.form("tk_new", clear_on_submit=True):
            c1,c2,c3 = st.columns(3)
            with c1:
                b_opts = (branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]+" | "+branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else []
                branch = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", b_opts)
                reporter = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", "")
            with c2:
                cat_opts = (t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]+" | "+t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else []
                cate = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", cat_opts)
                assignee = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö (IT)", st.session_state.get("user",""))
            with c3:
                detail = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", height=100)
                note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", use_container_width=True)
        if s:
            tid = "TCK-" + datetime.now(TZ).strftime("%Y%m%d-%H%M%S")
            row = [tid, get_now_str(), branch, reporter, cate, detail, "‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", assignee, get_now_str(), note]
            append_row(sh, SHEET_TICKETS, row)
            st.success(f"‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß: {tid}")
            safe_rerun()

    with t_edit:
        if picked.empty:
            st.info("‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
            return
        pick_id = str(picked.iloc[0]["TicketID"]) if "TicketID" in picked.columns else ""
        row = tickets[tickets["TicketID"]==pick_id]
        if row.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"); return
        data = row.iloc[0]

        with st.form("tk_edit", clear_on_submit=False):
            c1,c2 = st.columns(2)
            with c1:
                branch = st.text_input("‡∏™‡∏≤‡∏Ç‡∏≤", value=str(data.get("‡∏™‡∏≤‡∏Ç‡∏≤","")))
                owner  = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value=str(data.get("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","")))
            with c2:
                status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"],
                                      index=["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"].index(str(data.get("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á"))) if str(data.get("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á")) in ["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"] else 0)
                assignee = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", value=str(data.get("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","")))
            desc = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", value=str(data.get("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","")), height=120)
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value=str(data.get("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","")))
            b1,b2 = st.columns([2,1])
            up_btn = b1.form_submit_button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", use_container_width=True)
            del_btn= b2.form_submit_button("‡∏•‡∏ö", use_container_width=True)

        if up_btn:
            idx = tickets.index[tickets["TicketID"]==pick_id][0]
            tickets.at[idx,"‡∏™‡∏≤‡∏Ç‡∏≤"] = branch
            tickets.at[idx,"‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"] = owner
            tickets.at[idx,"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"] = desc
            tickets.at[idx,"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = status
            tickets.at[idx,"‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"] = assignee
            tickets.at[idx,"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"] = note
            tickets.at[idx,"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"] = get_now_str()
            write_df(sh, SHEET_TICKETS, tickets); st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
        if del_btn:
            tickets2 = tickets[tickets["TicketID"]!=pick_id]
            write_df(sh, SHEET_TICKETS, tickets2); st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

def page_reports(sh):
    st.subheader("üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô / ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
    txns = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏´‡∏±‡∏™/‡∏™‡∏≤‡∏Ç‡∏≤)")
    today = datetime.now(TZ).date()
    colR = st.columns(5)
    with colR[0]: today_btn = st.button("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
    with colR[1]: d7_btn = st.button("7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    with colR[2]: d30_btn = st.button("30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    with colR[3]: d90_btn = st.button("90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    with colR[4]: year_btn = st.button("‡∏õ‡∏µ‡∏ô‡∏µ‡πâ")

    if "report_d1" not in st.session_state:
        st.session_state["report_d1"] = today - timedelta(days=30)
        st.session_state["report_d2"] = today
    if today_btn:
        st.session_state["report_d1"] = today
        st.session_state["report_d2"] = today
    if d7_btn:
        st.session_state["report_d1"] = today-timedelta(days=6)
        st.session_state["report_d2"] = today
    if d30_btn:
        st.session_state["report_d1"] = today-timedelta(days=29)
        st.session_state["report_d2"] = today
    if d90_btn:
        st.session_state["report_d1"] = today-timedelta(days=89)
        st.session_state["report_d2"] = today
    if year_btn:
        st.session_state["report_d1"] = date(today.year,1,1)
        st.session_state["report_d2"] = today

    d1 = st.date_input("‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà", value=st.session_state["report_d1"])
    d2 = st.date_input("‡∏ñ‡∏∂‡∏á", value=st.session_state["report_d2"])
    st.session_state["report_d1"] = d1
    st.session_state["report_d2"] = d2

    if not txns.empty:
        df = txns.copy()
        df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
        df = df.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        df = df[(df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= d1) & (df["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= d2)]
        if q:
            mask = (
                df["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].astype(str).str.contains(q, case=False, na=False) |
                df["‡∏£‡∏´‡∏±‡∏™"].astype(str).str.contains(q, case=False, na=False) |
                df["‡∏™‡∏≤‡∏Ç‡∏≤"].astype(str).str.contains(q, case=False, na=False)
            )
            df = df[mask]
    else:
        df = pd.DataFrame(columns=TXNS_HEADERS)
    st.dataframe(df.sort_values("‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", ascending=False), height=380, use_container_width=True)

def page_users(sh):
    st.subheader("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Admin)")
    users = read_df(sh, SHEET_USERS, USERS_HEADERS)
    if hasattr(st, "data_editor"):
        users_disp = users.copy()
        users_disp.insert(0, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", False)
        edited = st.data_editor(users_disp, hide_index=True, num_rows="fixed", height=300, use_container_width=True,
                                column_config={"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å": st.column_config.CheckboxColumn()})
        picked = edited[edited["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"]==True]
    else:
        st.dataframe(users, height=300, use_container_width=True)
        picked = pd.DataFrame()

    t_add, t_edit = st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)"])

    with t_add:
        with st.form("add_user", clear_on_submit=True):
            c1,c2 = st.columns([2,1])
            with c1:
                un = st.text_input("Username*")
                dn = st.text_input("Display Name")
            with c2:
                role = st.selectbox("Role", ["admin","staff","viewer"], index=1)
                active = st.selectbox("Active", ["Y","N"], index=0)
            pwd = st.text_input("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô*", type="password")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà", use_container_width=True)
        if s:
            if not un.strip() or not pwd.strip():
                st.warning("‡∏Å‡∏£‡∏≠‡∏Å Username/Password"); st.stop()
            if (users["Username"]==un).any():
                st.error("‡∏°‡∏µ Username ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß"); st.stop()
            ph = bcrypt.hashpw(pwd.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
            new_row = pd.DataFrame([{
                "Username": un.strip(),
                "DisplayName": dn.strip(),
                "Role": role,
                "PasswordHash": ph,
                "Active": active,
            }])
            users2 = pd.concat([users, new_row], ignore_index=True)
            write_df(sh, SHEET_USERS, users2)
            st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); safe_rerun()

    with t_edit:
        if picked.empty:
            st.info("‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
            return
        username = str(picked.iloc[0]["Username"])
        row = users[users["Username"]==username]
        if row.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"); return
        data = row.iloc[0].to_dict()
        with st.form("edit_user", clear_on_submit=False):
            c1,c2 = st.columns([2,1])
            with c1:
                un = st.text_input("Username", value=data["Username"], disabled=True)
                dn = st.text_input("Display Name", value=data["DisplayName"])
            with c2:
                role = st.selectbox("Role", ["admin","staff","viewer"],
                                    index=["admin","staff","viewer"].index(data["Role"]) if data["Role"] in ["admin","staff","viewer"] else 1)
                active = st.selectbox("Active", ["Y","N"],
                                      index=["Y","N"].index(data["Active"]) if data["Active"] in ["Y","N"] else 0)
            pwd = st.text_input("‡∏ï‡∏±‡πâ‡∏á/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)", type="password")
            b1,b2 = st.columns([2,1])
            save_btn = b1.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True)
            del_btn  = b2.form_submit_button("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ", use_container_width=True)
        if del_btn:
            if un.lower()=="admin":
                st.error("‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ admin")
            else:
                users2 = users[users["Username"]!=un]
                write_df(sh, SHEET_USERS, users2); st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
        if save_btn:
            idx = users.index[users["Username"]==un][0]
            users.at[idx,"DisplayName"] = dn
            users.at[idx,"Role"] = role
            users.at[idx,"Active"] = active
            if pwd.strip():
                ph = bcrypt.hashpw(pwd.encode("utf-8"), bcrypt.gensalt(12)).decode("utf-8")
                users.at[idx,"PasswordHash"] = ph
            write_df(sh, SHEET_USERS, users)
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

def page_import(sh):
    st.subheader("üóÇÔ∏è ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà/‡∏™‡∏≤‡∏Ç‡∏≤ ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢")
    t_cat, t_br = st.tabs(["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏™‡∏≤‡∏Ç‡∏≤"])

    def _read_upload_df(file):
        if file is None: return None, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"
        name = file.name.lower()
        try:
            if name.endswith(".csv"):
                df = pd.read_csv(file, dtype=str).fillna("")
            elif name.endswith(".xlsx") or name.endswith(".xls"):
                df = pd.read_excel(file, dtype=str).fillna("")
            else:
                return None, "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ .csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx"
            df = df.applymap(lambda x: str(x).strip())
            return df, None
        except Exception as e:
            return None, f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"

    with t_cat:
        up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (CSV/Excel) : ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î", type=["csv","xlsx"], key="up_cat1")
        if up:
            df, err = _read_upload_df(up)
            if err: st.error(err)
            else:
                st.dataframe(df, height=200, use_container_width=True)
                if {"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"}.issubset(df.columns):
                    if st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", use_container_width=True):
                        cur = read_df(sh, SHEET_CATS, CATS_HEADERS)
                        for _, r in df.iterrows():
                            code = str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).strip(); name = str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).strip()
                            if not code: continue
                            if (cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code).any():
                                cur.loc[cur["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]==code, ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]] = [code, name]
                            else:
                                cur = pd.concat([cur, pd.DataFrame([[code,name]], columns=CATS_HEADERS)], ignore_index=True)
                        write_df(sh, SHEET_CATS, cur); st.success("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
                else:
                    st.warning("‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö")

    with t_br:
        up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≤‡∏Ç‡∏≤ (CSV/Excel) : ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤, ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤", type=["csv","xlsx"], key="up_br1")
        if up:
            df, err = _read_upload_df(up)
            if err: st.error(err)
            else:
                st.dataframe(df, height=200, use_container_width=True)
                if {"‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"}.issubset(df.columns):
                    if st.button("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏™‡∏≤‡∏Ç‡∏≤", use_container_width=True):
                        cur = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
                        for _, r in df.iterrows():
                            code = str(r["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]).strip(); name = str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).strip()
                            if not code: continue
                            if (cur["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]==code).any():
                                cur.loc[cur["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"]==code, ["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]] = [code, name]
                            else:
                                cur = pd.concat([cur, pd.DataFrame([[code,name]], columns=BR_HEADERS)], ignore_index=True)
                        write_df(sh, SHEET_BRANCHES, cur); st.success("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
                else:
                    st.warning("‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö")

def page_settings():
    st.subheader("‚öôÔ∏è Settings")
    url = st.text_input("Google Sheet URL", value=st.session_state.get("sheet_url", DEFAULT_SHEET_URL))
    st.session_state["sheet_url"] = url
    if st.button("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠/‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô", use_container_width=True):
        try:
            sh = open_sheet_by_url(url)
            ensure_sheets_exist(sh)
            st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# =========================
# Main
# =========================
def main():
    st.set_page_config(page_title=APP_TITLE, page_icon="üß∞", layout="wide")
    st.title(APP_TITLE); st.caption(APP_TAGLINE)

    if "sheet_url" not in st.session_state or not st.session_state.get("sheet_url"):
        st.session_state["sheet_url"] = DEFAULT_SHEET_URL

    with st.sidebar:
        st.markdown("---")
        page = st.radio("‡πÄ‡∏°‡∏ô‡∏π", ["üìä Dashboard","üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤","üßæ ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤","üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô","üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","üóÇÔ∏è ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‚öôÔ∏è Settings"], index=0)

    # ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ï
    try:
        sh = open_sheet_by_url(st.session_state["sheet_url"])
    except Exception as e:
        st.error(f"‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return

    ensure_sheets_exist(sh)

    # Auth (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Settings/Dashboard ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡πÑ‡∏î‡πâ, ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á Login)
    if not page.startswith("‚öôÔ∏è") and not page.startswith("üìä"):
        if not auth_block(sh):
            st.info("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô")
            return
    else:
        # ‡∏¢‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≠‡∏ö login ‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏á sidebar
        auth_block(sh)

    if page.startswith("üìä"): page_dashboard(sh)
    elif page.startswith("üì¶"): page_stock(sh)
    elif page.startswith("üõ†Ô∏è"): page_tickets(sh)
    elif page.startswith("üßæ"): page_issue_receive(sh)
    elif page.startswith("üìë"): page_reports(sh)
    elif page.startswith("üë•"): page_users(sh)
    elif page.startswith("üóÇÔ∏è"): page_import(sh)
    elif page.startswith("‚öôÔ∏è"): page_settings()

    st.caption("¬© 2025 IT Stock ¬∑ Streamlit + Google Sheets ¬∑ iTao iT v11 (patched)")


if __name__ == "__main__":
    main()

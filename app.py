# -*- coding: utf-8 -*-
"""
app_v11_full_logo_pdf.py
IT Stock (Streamlit + Google Sheets) ‚Äî v11 (Thai PDF + Logo)
--------------------------------------------------------------------
‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏£‡∏∏‡∏õ):
- Dashboard, ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (Stock), ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö (OUT/IN ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£),
  ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Reports ‚Üí ‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡πÉ‡∏™‡πà‡πÇ‡∏•‡πÇ‡∏Å‡πâ),
  ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (Import ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ó‡πá‡∏ö), ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Users ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô), Settings (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GSheets/Fonts/Logo)
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (Sarabun / TH Sarabun New / Noto Sans Thai) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
  * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å ./fonts, Windows Fonts, ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ö‡∏ô Linux/Mac
  * ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå ‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÑ‡∏î‡πâ (‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)
- ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ö‡∏¥‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Google Sheets (‡∏ú‡πà‡∏≤‡∏ô gspread) ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏ü‡∏•‡πå CSV
- UI ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô: ‡πÉ‡∏ä‡πâ layout="wide" + ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏ñ‡∏ô‡∏±‡∏î
‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
- ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á ‚Äú‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‚Äù ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏¢‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞ (‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
- ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
"""
from __future__ import annotations

import os, io, sys, re, json, uuid, time, pathlib, base64
from datetime import datetime, date
from typing import Dict, Optional, List, Tuple

import pandas as pd
import numpy as np
import streamlit as st

# ---------------- PDF (ReportLab) ----------------
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib.units import mm
from reportlab.lib.utils import ImageReader

# ---------------- Google Sheets -----------------
GS_AVAILABLE = True
try:
    import gspread
    from google.oauth2.service_account import Credentials
except Exception:
    GS_AVAILABLE = False

APP_VERSION = "v11"
DEFAULT_DATA_DIR = "./data"
DEFAULT_FONTS_DIR = "./fonts"
DEFAULT_ASSETS_DIR = "./assets"

# ---------------- Streamlit page config ----------------
st.set_page_config(
    page_title=f"IT Stock {APP_VERSION}",
    page_icon="üß∞",
    layout="wide",
    initial_sidebar_state="expanded",
)

# =======================================================
# Utilities
# =======================================================
def ensure_dirs():
    os.makedirs(DEFAULT_DATA_DIR, exist_ok=True)
    os.makedirs(DEFAULT_FONTS_DIR, exist_ok=True)
    os.makedirs(DEFAULT_ASSETS_DIR, exist_ok=True)

ensure_dirs()

def now_str():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def load_json(text: str) -> dict:
    try:
        return json.loads(text)
    except Exception:
        return {}

def to_int(x, default=0):
    try:
        return int(x)
    except Exception:
        return default

def to_float(x, default=0.0):
    try:
        return float(x)
    except Exception:
        return default

# =======================================================
# Config (in Session State)
# =======================================================
if "cfg" not in st.session_state:
    st.session_state["cfg"] = {
        "use_gsheets": False,
        "sheet_url": "",
        "service_account_json_text": "",   # raw JSON text (optional; ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥)
        "service_account_json_file": "",   # path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå .json ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        "pdf_font_regular": "",            # path font TTF ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        "pdf_font_bold": "",               # path font TTF ‡πÅ‡∏ö‡∏ö‡∏´‡∏ô‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        "logo_path": "",                   # assets/logo.png (‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
        "branch_code_name": {},            # mapping ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≤‡∏Ç‡∏≤ ‚Üí ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤
    }

CFG = st.session_state["cfg"]

# =======================================================
# Google Sheets Helpers (with CSV fallback)
# =======================================================
GS_SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

def get_gs_client() -> Optional["gspread.Client"]:
    if not GS_AVAILABLE:
        return None
    if not CFG.get("use_gsheets"):
        return None

    creds = None
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ raw JSON ‡πÉ‡∏ô settings
    if CFG.get("service_account_json_text"):
        try:
            info = json.loads(CFG["service_account_json_text"])
            creds = Credentials.from_service_account_info(info, scopes=GS_SCOPES)
        except Exception as e:
            st.error(f"‡πÇ‡∏´‡∏•‡∏î service_account_json_text ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ path ‡πÑ‡∏õ‡πÑ‡∏ü‡∏•‡πå .json
    if creds is None and CFG.get("service_account_json_file"):
        try:
            creds = Credentials.from_service_account_file(CFG["service_account_json_file"], scopes=GS_SCOPES)
        except Exception as e:
            st.error(f"‡πÇ‡∏´‡∏•‡∏î service_account_json_file ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ env var
    if creds is None and os.environ.get("SERVICE_ACCOUNT_JSON"):
        try:
            info = json.loads(os.environ["SERVICE_ACCOUNT_JSON"])
            creds = Credentials.from_service_account_info(info, scopes=GS_SCOPES)
        except Exception as e:
            st.error(f"‡πÇ‡∏´‡∏•‡∏î SERVICE_ACCOUNT_JSON ‡∏à‡∏≤‡∏Å ENV ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    if creds is None:
        return None

    try:
        return gspread.authorize(creds)
    except Exception as e:
        st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ gspread ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

def read_table(name: str) -> pd.DataFrame:
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å Google Sheets (‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ) ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å CSV ‡πÉ‡∏ô ./data/{name}.csv
    """
    # 1) ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Google Sheets
    if CFG.get("use_gsheets") and CFG.get("sheet_url"):
        client = get_gs_client()
        if client is not None:
            try:
                sh = client.open_by_url(CFG["sheet_url"])
                try:
                    ws = sh.worksheet(name)
                except Exception:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏µ‡∏ó ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ header ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á
                    ws = sh.add_worksheet(title=name, rows=100, cols=26)
                    ws.append_row(["_init"])
                rows = ws.get_all_records()
                df = pd.DataFrame(rows)
                if df.empty:
                    return pd.DataFrame()
                return df
            except Exception as e:
                st.warning(f"‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏µ‡∏ó '{name}' ‡∏à‡∏≤‡∏Å Google Sheets ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e} ‚Üí ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å CSV")
    # 2) Fallback CSV
    csv_path = os.path.join(DEFAULT_DATA_DIR, f"{name}.csv")
    if os.path.exists(csv_path):
        try:
            return pd.read_csv(csv_path, dtype=str).fillna("")
        except Exception:
            pass
    return pd.DataFrame()

def write_table(name: str, df: pd.DataFrame):
    """
    ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏á Google Sheets (‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ) ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV
    """
    df = df.copy()
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢ (Google Sheets ‡∏ä‡∏≠‡∏ö)
    for c in df.columns:
        df[c] = df[c].astype(str)

    if CFG.get("use_gsheets") and CFG.get("sheet_url"):
        client = get_gs_client()
        if client is not None:
            try:
                sh = client.open_by_url(CFG["sheet_url"])
                try:
                    ws = sh.worksheet(name)
                except Exception:
                    ws = sh.add_worksheet(title=name, rows=max(len(df)+10, 100), cols=max(len(df.columns)+2, 26))
                # clear & update
                ws.clear()
                ws.update([df.columns.tolist()] + df.values.tolist())
                return
            except Exception as e:
                st.warning(f"‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ä‡∏µ‡∏ó '{name}' ‡πÑ‡∏õ Google Sheets ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e} ‚Üí ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å CSV")

    # Fallback CSV
    csv_path = os.path.join(DEFAULT_DATA_DIR, f"{name}.csv")
    df.to_csv(csv_path, index=False, encoding="utf-8-sig")

# =======================================================
# Schemas
# =======================================================
SCHEMA_STOCK = [
    "item_code","item_name","category","unit","qty","min_qty",
    "branch_code","branch_name","last_update"
]
SCHEMA_OUT = [
    "run","date","branch_code","branch_name","requester",
    "item_code","item_name","qty","unit","note","status"
]
SCHEMA_IN = [
    "run","date","branch_code","branch_name","receiver",
    "item_code","item_name","qty","unit","note","ref_out_run"
]
SCHEMA_USERS = ["username","full_name","role","branch_code","branch_name","active"]
SCHEMA_CATEGORIES = ["cat_code","cat_name","active"]

def ensure_columns(df: pd.DataFrame, cols: List[str]) -> pd.DataFrame:
    if df.empty:
        return pd.DataFrame(columns=cols)
    for c in cols:
        if c not in df.columns:
            df[c] = ""
    # drop ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ? ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    return df[cols + [c for c in df.columns if c not in cols]]

# =======================================================
# Initial Load
# =======================================================
def load_all_tables():
    stock = ensure_columns(read_table("stock"), SCHEMA_STOCK)
    trans_out = ensure_columns(read_table("out"), SCHEMA_OUT)
    trans_in = ensure_columns(read_table("in"), SCHEMA_IN)
    users = ensure_columns(read_table("users"), SCHEMA_USERS)
    cats = ensure_columns(read_table("categories"), SCHEMA_CATEGORIES)
    return stock, trans_out, trans_in, users, cats

if "tables" not in st.session_state:
    st.session_state["tables"] = load_all_tables()

# short aliases
STOCK, OUTS, INS, USERS, CATS = st.session_state["tables"]

# =======================================================
# Fonts Finder for Thai
# =======================================================
COMMON_THAI_FONT_NAMES = [
    "THSarabunNew", "TH Sarabun New",
    "Sarabun", "NotoSansThai", "Noto Sans Thai",
    "NotoSerifThai", "Noto Serif Thai",
]

COMMON_FONT_DIRS = [
    DEFAULT_FONTS_DIR,
    "/usr/share/fonts/truetype",
    "/usr/share/fonts",
    "/Library/Fonts",
    "/System/Library/Fonts",
    "C:\\Windows\\Fonts",
]

def find_font_by_names(names: List[str]) -> Optional[str]:
    for d in COMMON_FONT_DIRS:
        try:
            for fn in os.listdir(d):
                path = os.path.join(d, fn)
                lower = fn.lower()
                for name in names:
                    if name.replace(" ", "").lower() in lower.replace(" ", "") and lower.endswith(".ttf"):
                        return path
        except Exception:
            continue
    return None

def register_thai_fonts():
    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Settings ‡∏Å‡πà‡∏≠‡∏ô
    reg = CFG.get("pdf_font_regular") or find_font_by_names(COMMON_THAI_FONT_NAMES)
    bold = CFG.get("pdf_font_bold") or find_font_by_names([n + " Bold" for n in COMMON_THAI_FONT_NAMES] + COMMON_THAI_FONT_NAMES)
    ok = False
    try:
        if reg:
            pdfmetrics.registerFont(TTFont("TH_REG", reg))
            ok = True
        if bold:
            pdfmetrics.registerFont(TTFont("TH_BOLD", bold))
            ok = True
    except Exception as e:
        st.warning(f"‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    return ok

FONTS_READY = register_thai_fonts()

# =======================================================
# PDF Generation
# =======================================================
def generate_pdf_report(title: str, df: pd.DataFrame, logo_path: str="") -> bytes:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF (A4 ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á) ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á + ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πà‡∏≠ (‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ)
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
    """
    buf = io.BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    W, H = A4

    # ‡πÇ‡∏•‡πÇ‡∏Å‡πâ
    y = H - 30*mm
    if logo_path and os.path.exists(logo_path):
        try:
            img = ImageReader(logo_path)
            c.drawImage(img, 15*mm, y-10*mm, width=25*mm, height=25*mm, preserveAspectRatio=True, mask='auto')
        except Exception:
            pass

    # ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
    c.setFont("TH_BOLD" if "TH_BOLD" in pdfmetrics.getRegisteredFontNames() else "Helvetica-Bold", 18)
    c.drawString(45*mm, H-20*mm, title)

    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    c.setFont("TH_REG" if "TH_REG" in pdfmetrics.getRegisteredFontNames() else "Helvetica", 10)
    c.drawRightString(W-15*mm, H-15*mm, f"‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: {now_str()}")

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡πà‡∏≠ 6-8 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å)
    cols = list(df.columns)[:8]
    show = df[cols].astype(str).values.tolist()

    # ‡πÄ‡∏Æ‡∏î
    x0, y0 = 15*mm, H-40*mm
    row_h = 8*mm
    col_w = (W - 30*mm) / max(1, len(cols))
    c.setFont("TH_BOLD" if "TH_BOLD" in pdfmetrics.getRegisteredFontNames() else "Helvetica-Bold", 10)
    for i, col in enumerate(cols):
        c.drawString(x0 + i*col_w + 2, y0, str(col))

    # ‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏´‡∏±‡∏ß
    c.line(x0, y0-2, x0 + col_w*len(cols), y0-2)
    c.setFont("TH_REG" if "TH_REG" in pdfmetrics.getRegisteredFontNames() else "Helvetica", 9)

    ycur = y0 - row_h
    for r in show[:50]:   # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        for i, val in enumerate(r):
            c.drawString(x0 + i*col_w + 2, ycur, str(val)[:40])
        ycur -= row_h
        if ycur < 20*mm:
            break

    c.showPage()
    c.save()
    buf.seek(0)
    return buf.read()

# =======================================================
# UI Components
# =======================================================
def section_title(title: str, emoji: str=""):
    st.subheader(f"{emoji} {title}".strip())

def df_editor(df: pd.DataFrame, key: str, use_container_width=True, height=360):
    return st.data_editor(
        df, key=key, use_container_width=use_container_width, height=height,
        hide_index=True, num_rows="dynamic"
    )

def ensure_branch_map():
    if not CFG["branch_code_name"]:
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á mapping ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÉ‡∏ô Settings ‚Üí Branches)
        CFG["branch_code_name"] = {
            "SWC001": "‡∏™‡∏≤‡∏Ç‡∏≤‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)",
            "SWC002": "‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)",
            "SWC003": "‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)",
        }

ensure_branch_map()

def code_to_name(code: str) -> str:
    return CFG["branch_code_name"].get(code, "")

# =======================================================
# Pages
# =======================================================
def page_dashboard():
    section_title("Dashboard", "üìä")
    col1, col2, col3 = st.columns(3)
    # KPI ‡∏á‡πà‡∏≤‡∏¢‡πÜ
    total_items = len(STOCK)
    low_items = (pd.to_numeric(STOCK["qty"], errors="coerce").fillna(0) <= pd.to_numeric(STOCK["min_qty"], errors="coerce").fillna(0)).sum()
    total_out = len(OUTS)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á", f"{total_items:,}")
    col2.metric("‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", f"{low_items:,}")
    col3.metric("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏£‡∏ß‡∏°", f"{total_out:,}")

    st.divider()
    st.write("**‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î**")
    st.dataframe(STOCK.head(50), use_container_width=True)

def page_stock():
    section_title("‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (Stock)", "üì¶")
    st.info("‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å** ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á", icon="‚ÑπÔ∏è")
    editable = df_editor(STOCK, key="stock_editor")
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", type="primary"):
        st.session_state["tables"] = (editable, OUTS, INS, USERS, CATS)
        write_table("stock", editable)
        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")

def page_out_in():
    section_title("‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö (OUT/IN)", "üßæ")
    tab_out, tab_in = st.tabs(["üîª ‡πÄ‡∏ö‡∏¥‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (OUT)", "üî∫ ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (IN)"])

    with tab_out:
        st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á ‚Üí ‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ö‡∏¥‡∏Å ‚Üí ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° OUT")
        left, right = st.columns([1,1])
        with left:
            branches = list(CFG["branch_code_name"].keys())
            sel_branch = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤", options=branches, format_func=lambda c: f"{c} - {code_to_name(c)}")
            requester = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", "")
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", "")
        with right:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            st.write("**‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ö‡∏¥‡∏Å (Multi-select)**")
            df_pick = STOCK[["item_code","item_name","category","unit","qty","min_qty"]].copy()
            pick = st.multiselect(
                "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
                options=list(df_pick.index),
                format_func=lambda idx: f"{df_pick.at[idx,'item_code']} | {df_pick.at[idx,'item_name']} ({df_pick.at[idx,'qty']})",
            )
            qty_inputs = {}
            if pick:
                st.write("**‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ö‡∏¥‡∏Å**")
                for idx in pick:
                    row = df_pick.loc[idx]
                    maxq = to_int(row["qty"], 0)
                    qty = st.number_input(
                        f"{row['item_code']} | {row['item_name']} (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {maxq})",
                        min_value=0, max_value=max(0, maxq), step=1, value=0, key=f"qty_{idx}"
                    )
                    qty_inputs[idx] = qty

            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (OUT)"):
                if not pick:
                    st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                elif not requester.strip():
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ö‡∏¥‡∏Å")
                else:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å OUT ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å
                    out_df = OUTS.copy()
                    stock_df = STOCK.copy()
                    new_rows = []
                    for idx in pick:
                        q = to_int(qty_inputs.get(idx, 0), 0)
                        if q <= 0: 
                            continue
                        srow = stock_df.loc[idx]
                        cur = to_int(srow["qty"], 0)
                        new_qty = max(0, cur - q)
                        stock_df.at[idx, "qty"] = str(new_qty)
                        new_rows.append({
                            "run": f"OUT-{datetime.now().strftime('%Y%m%d')}-{uuid.uuid4().hex[:6].upper()}",
                            "date": now_str(),
                            "branch_code": sel_branch,
                            "branch_name": code_to_name(sel_branch),
                            "requester": requester,
                            "item_code": srow["item_code"],
                            "item_name": srow["item_name"],
                            "qty": str(q),
                            "unit": srow.get("unit",""),
                            "note": note,
                            "status": "DONE",
                        })
                    if new_rows:
                        out_df = pd.concat([out_df, pd.DataFrame(new_rows)], ignore_index=True)
                        # save
                        st.session_state["tables"] = (stock_df, out_df, INS, USERS, CATS)
                        write_table("stock", stock_df)
                        write_table("out", out_df)
                        st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å OUT {len(new_rows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ")

    with tab_in:
        st.caption("‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å (IN) ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á")
        left, right = st.columns([1,1])
        with left:
            branches = list(CFG["branch_code_name"].keys())
            sel_branch = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤", options=branches, format_func=lambda c: f"{c} - {code_to_name(c)}", key="in_branch")
            receiver = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", "", key="in_receiver")
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", "", key="in_note")
        with right:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏á‡πà‡∏≤‡∏¢‡πÜ)
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ IN ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏¥‡πâ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÇ‡∏î‡∏¢ copy ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö OUT ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
            df_pick = STOCK[["item_code","item_name","unit","qty"]].copy()
            idx = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", options=list(df_pick.index),
                               format_func=lambda i: f"{df_pick.at[i,'item_code']} | {df_pick.at[i,'item_name']} (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {df_pick.at[i,'qty']})")
            in_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", min_value=0, step=1, value=0)
            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (IN)"):
                if in_qty <= 0:
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
                elif not receiver.strip():
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
                else:
                    stock_df = STOCK.copy()
                    in_df = INS.copy()
                    srow = stock_df.loc[idx]
                    cur = to_int(srow["qty"], 0)
                    stock_df.at[idx, "qty"] = str(cur + int(in_qty))
                    new_row = {
                        "run": f"IN-{datetime.now().strftime('%Y%m%d')}-{uuid.uuid4().hex[:6].upper()}",
                        "date": now_str(),
                        "branch_code": sel_branch,
                        "branch_name": code_to_name(sel_branch),
                        "receiver": receiver,
                        "item_code": srow["item_code"],
                        "item_name": srow["item_name"],
                        "qty": str(int(in_qty)),
                        "unit": srow.get("unit",""),
                        "note": note,
                        "ref_out_run": "",
                    }
                    in_df = pd.concat([in_df, pd.DataFrame([new_row])], ignore_index=True)
                    st.session_state["tables"] = (stock_df, OUTS, in_df, USERS, CATS)
                    write_table("stock", stock_df)
                    write_table("in", in_df)
                    st.success("‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")

def page_reports():
    section_title("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (PDF ‡πÑ‡∏ó‡∏¢ + ‡πÇ‡∏•‡πÇ‡∏Å‡πâ)", "üß∑")
    st.info("‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå TH Sarabun ‡∏´‡∏£‡∏∑‡∏≠ Noto Sans Thai ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô ./fonts)")

    report_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)"])
    limit = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", min_value=10, max_value=1000, value=200, step=10)

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏•‡πÇ‡∏Å‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô Settings ‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
    logo_path = CFG.get("logo_path", "")
    uploaded_logo = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ (PNG/JPG) ‚Äî ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ", type=["png","jpg","jpeg"])
    if uploaded_logo is not None:
        tmp_logo = os.path.join(DEFAULT_ASSETS_DIR, f"logo_tmp_{uuid.uuid4().hex[:6]}.png")
        with open(tmp_logo, "wb") as f:
            f.write(uploaded_logo.read())
        logo_path = tmp_logo

    df = pd.DataFrame()
    title = "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"

    if report_type == "‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å":
        df = STOCK.copy().head(limit)
        title = f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å ({len(STOCK):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)"
    elif report_type == "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)":
        df = OUTS.copy().sort_values("date", ascending=False).head(limit)
        title = f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)"
    elif report_type == "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)":
        df = INS.copy().sort_values("date", ascending=False).head(limit)
        title = f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)"

    st.dataframe(df, use_container_width=True, height=360)

    if st.button("üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô PDF", type="primary"):
        if not FONTS_READY:
            st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (TH Sarabun / Noto Sans Thai) ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö/‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ./fonts ‚Äî PDF ‡∏≠‡∏≤‡∏à‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‚ùó")

        pdf_bytes = generate_pdf_report(title, df, logo_path=logo_path)
        st.download_button(
            "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF",
            data=pdf_bytes,
            file_name=f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
            mime="application/pdf",
        )

def page_import():
    section_title("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ó‡πá‡∏ö)", "üì•")
    st.caption("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel/CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô stock, out, in, users, categories")
    st.write("**‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö/‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö**: `stock`, `out`, `in`, `users`, `categories`")

    tfile = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", type=["xlsx","xls","csv"])
    if tfile is not None:
        ext = pathlib.Path(tfile.name).suffix.lower()
        if ext == ".csv":
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏≠‡∏á
            name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏î", ["stock","out","in","users","categories"])
            df = pd.read_csv(tfile).fillna("")
            st.dataframe(df.head(50), use_container_width=True)
            if st.button(f"üîÑ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ó‡πá‡∏ö {name}"):
                # ensure schema
                schema_map = {"stock":SCHEMA_STOCK, "out":SCHEMA_OUT, "in":SCHEMA_IN, "users":SCHEMA_USERS, "categories":SCHEMA_CATEGORIES}
                df2 = ensure_columns(df, schema_map[name])[schema_map[name]]
                # save
                if name == "stock":
                    st.session_state["tables"] = (df2, OUTS, INS, USERS, CATS)
                elif name == "out":
                    st.session_state["tables"] = (STOCK, df2, INS, USERS, CATS)
                elif name == "in":
                    st.session_state["tables"] = (STOCK, OUTS, df2, USERS, CATS)
                elif name == "users":
                    st.session_state["tables"] = (STOCK, OUTS, INS, df2, CATS)
                elif name == "categories":
                    st.session_state["tables"] = (STOCK, OUTS, INS, USERS, df2)
                write_table(name, df2)
                st.success(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ó‡πá‡∏ö {name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
        else:
            # Excel ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏µ‡∏ó
            xls = pd.ExcelFile(tfile)
            for name in xls.sheet_names:
                if name.lower() not in ["stock","out","in","users","categories"]:
                    continue
                df = pd.read_excel(xls, sheet_name=name).fillna("")
                st.write(f"**‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö:** `{name}`")
                st.dataframe(df.head(30), use_container_width=True)
                if st.button(f"üîÑ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ó‡πá‡∏ö {name}", key=f"imp_{name}"):
                    schema_map = {"stock":SCHEMA_STOCK, "out":SCHEMA_OUT, "in":SCHEMA_IN, "users":SCHEMA_USERS, "categories":SCHEMA_CATEGORIES}
                    df2 = ensure_columns(df, schema_map[name])[schema_map[name]]
                    # save
                    if name == "stock":
                        st.session_state["tables"] = (df2, OUTS, INS, USERS, CATS)
                    elif name == "out":
                        st.session_state["tables"] = (STOCK, df2, INS, USERS, CATS)
                    elif name == "in":
                        st.session_state["tables"] = (STOCK, OUTS, df2, USERS, CATS)
                    elif name == "users":
                        st.session_state["tables"] = (STOCK, OUTS, INS, df2, CATS)
                    elif name == "categories":
                        st.session_state["tables"] = (STOCK, OUTS, INS, USERS, df2)
                    write_table(name, df2)
                    st.success(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ó‡πá‡∏ö {name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")

def page_users():
    section_title("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Users)", "üë•")
    st.caption("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏ä‡∏∑‡πà‡∏≠-‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó-‡∏™‡∏≤‡∏Ç‡∏≤)")
    editable = df_editor(USERS, key="user_editor")
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
        st.session_state["tables"] = (STOCK, OUTS, INS, editable, CATS)
        write_table("users", editable)
        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")

def page_settings():
    section_title("Settings", "‚öôÔ∏è")
    tabs = st.tabs(["Google Sheets", "Fonts/PDF", "Logo", "Branches", "Tools"])

    with tabs[0]:
        st.checkbox("‡πÉ‡∏ä‡πâ Google Sheets ‡πÅ‡∏ó‡∏ô CSV (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö)", key="use_gs_tmp", value=CFG["use_gsheets"])
        sheet_url = st.text_input("Sheet URL", value=CFG.get("sheet_url",""))
        st.caption("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö URL: https://docs.google.com/spreadsheets/d/xxxxxxx/edit#gid=0")

        up_json = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Service Account JSON (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1)", type=["json"], key="sa_json")
        if up_json is not None:
            CFG["service_account_json_text"] = up_json.read().decode("utf-8")
            st.success("‡πÇ‡∏´‡∏•‡∏î JSON (in-memory) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        json_file_path = st.text_input("‡∏´‡∏£‡∏∑‡∏≠ ‡πÉ‡∏™‡πà path ‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2)", value=CFG.get("service_account_json_file",""))

        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GSheets"):
            CFG["use_gsheets"] = bool(st.session_state.get("use_gs_tmp", False))
            CFG["sheet_url"] = sheet_url.strip()
            CFG["service_account_json_file"] = json_file_path.strip()
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")

        if not GS_AVAILABLE:
            st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ gspread / google-auth ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å requirements.txt")

    with tabs[1]:
        st.caption("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (PDF) ‚Äî ‡∏´‡∏≤‡∏Å‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        f_reg = st.text_input("Regular TTF path", value=CFG.get("pdf_font_regular",""))
        f_bold = st.text_input("Bold TTF path", value=CFG.get("pdf_font_bold",""))
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ü‡∏≠‡∏ô‡∏ï‡πå PDF"):
            CFG["pdf_font_regular"] = f_reg.strip()
            CFG["pdf_font_bold"] = f_bold.strip()
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")

        if FONTS_READY:
            st.success("‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF ‚úÖ")
        else:
            st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF ‚Äî ‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .ttf ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ./fonts (‡πÄ‡∏ä‡πà‡∏ô NotoSansThai-Regular.ttf)")

    with tabs[2]:
        st.caption("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏ï‡πà‡∏≤‡∏á‡πÜ")
        lp = st.text_input("Logo Path (‡πÄ‡∏ä‡πà‡∏ô ./assets/logo.png)", value=CFG.get("logo_path",""))
        up = st.file_uploader("‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏•‡πÇ‡∏Å‡πâ", type=["png","jpg","jpeg"])
        if up is not None:
            path = os.path.join(DEFAULT_ASSETS_DIR, f"logo_{uuid.uuid4().hex[:6]}.png")
            with open(path, "wb") as f:
                f.write(up.read())
            lp = path
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏•‡πÇ‡∏Å‡πâ"):
            CFG["logo_path"] = lp.strip()
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")

    with tabs[3]:
        st.caption("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÇ‡∏Ñ‡πâ‡∏î ‚Üí ‡∏ä‡∏∑‡πà‡∏≠)")
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏∞‡∏î‡∏ß‡∏Å
        bm = CFG["branch_code_name"]
        df = pd.DataFrame([{"branch_code":k, "branch_name":v} for k,v in bm.items()])
        df2 = st.data_editor(df, hide_index=True, num_rows="dynamic", use_container_width=True)
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤"):
            CFG["branch_code_name"] = {r["branch_code"]: r["branch_name"] for _, r in df2.iterrows() if r["branch_code"]}
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")

    with tabs[4]:
        st.caption("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")
        if st.button("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏•‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ CSV)"):
            for name in ["stock","out","in","users","categories"]:
                path = os.path.join(DEFAULT_DATA_DIR, f"{name}.csv")
                if os.path.exists(path):
                    os.remove(path)
            st.session_state["tables"] = load_all_tables()
            st.success("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# =======================================================
# Navigation
# =======================================================
PAGES = {
    "Dashboard": page_dashboard,
    "‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå": page_stock,
    "‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö": page_out_in,
    "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô": page_reports,
    "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤": page_import,
    "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ": page_users,
    "Settings": page_settings,
}

# Sidebar
with st.sidebar:
    st.markdown(f"### üß∞ IT Stock {APP_VERSION}")
    if CFG.get("logo_path") and os.path.exists(CFG["logo_path"]):
        st.image(CFG["logo_path"], use_container_width=True)
    choice = st.radio("‡πÄ‡∏°‡∏ô‡∏π", list(PAGES.keys()), index=0)
    st.caption("Tip: ‡πÉ‡∏ä‡πâ Google Sheets ‡πÑ‡∏î‡πâ‡πÉ‡∏ô Settings ‚Üí Google Sheets")

# Run Page
PAGES[choice]()

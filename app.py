# -*- coding: utf-8 -*-
"""
IT Stock (Streamlit + Google Sheets)
v11:
- ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ PDF ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
  * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (Sarabun / TH Sarabun New / Noto Sans Thai)
  * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ./fonts, Windows Fonts, ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ö‡∏ô Linux/Mac
  * ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏´‡∏ô‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå Bold
  * ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå ‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
- ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å v10 (Dashboard, Stock, ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö, ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô, Users, ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, Settings + Clear test data)
"""
import os, io, uuid, re
from datetime import datetime, timedelta, date, time as dtime
import pytz, pandas as pd, streamlit as st
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import gspread
from google.oauth2.service_account import Credentials
import bcrypt
import altair as alt

# ---- Compatibility helper for Streamlit rerun ----
def safe_rerun():
    import streamlit as st

# ----------------- Global UI Style -----------------
def inject_global_css():
    import streamlit as st
    st.markdown(
        """
        <style>
        html, body, [class*="css"]  {
            font-size: 14px !important;
        }
        /* Responsive adjustments for small screens */
        @media (max-width: 768px) {
            html, body, [class*="css"] {
                font-size: 13px !important;
            }
            h1 { font-size: 1.5rem !important; }
            h2 { font-size: 1.3rem !important; }
            h3 { font-size: 1.1rem !important; }
            .stButton>button {
                padding: 0.25rem 0.75rem;
                font-size: 0.9rem;
            }
            .stTextInput>div>div>input, .stTextArea>div>textarea {
                font-size: 0.9rem !important;
            }
            .stDataFrame { font-size: 0.85rem !important; }
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    if hasattr(st, "rerun"):
        st.rerun()
    elif hasattr(st, "experimental_rerun"):
        safe_rerun()


APP_TITLE = "IT Intelligent System"
APP_TAGLINE = "Minimal, Modern, and Practical"
DEFAULT_SHEET_URL = "https://docs.google.com/spreadsheets/d/1SGKzZ9WKkRtcmvN3vZj9w2yeM6xNoB6QV3-gtnJY-Bw/edit?gid=0#gid=0"
CREDENTIALS_FILE = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS", "service_account.json")

SHEET_ITEMS     = "Items"
SHEET_TXNS      = "Transactions"
SHEET_USERS     = "Users"
SHEET_CATS      = "Categories"
SHEET_BRANCHES  = "Branches"
SHEET_TICKETS   = "Tickets"
SHEET_TICKET_CATS = "TicketCategories"

ITEMS_HEADERS   = ["‡∏£‡∏´‡∏±‡∏™","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö","‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]
TXNS_HEADERS    = ["TxnID","‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó","‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô","‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
USERS_HEADERS   = ["Username","DisplayName","Role","PasswordHash","Active"]
CATS_HEADERS    = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]
BR_HEADERS      = ["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]

TICKETS_HEADERS = ["TicketID","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
TICKET_CAT_HEADERS = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]

TZ = pytz.timezone("Asia/Bangkok")

MINIMAL_CSS = """
<style>
:root { --radius: 16px; }
section.main > div { padding-top: 8px; }
.block-card { background: #fff; border:1px solid #eee; border-radius:16px; padding:16px; }
.kpi { display:grid; grid-template-columns: repeat(auto-fit,minmax(160px,1fr)); gap:12px; }
.danger { color:#b00020; }
</style>"""

RESPONSIVE_CSS = """
<style>
/* Base font sizing */
html, body, [data-testid="stAppViewContainer"] { font-size: 15px; }

/* Tablet and below */
@media (max-width: 768px){
  html, body, [data-testid="stAppViewContainer"]{ font-size: 14px; }
  h1{font-size:1.6rem;} h2{font-size:1.35rem;} h3{font-size:1.15rem;}
  .stMarkdown, label, .stTextInput label, .stSelectbox label, .stFileUploader label{ font-size:0.95rem; }
  .stTextInput input, .stTextArea textarea{ font-size:0.95rem; }
  .stButton button{ font-size:0.95rem; padding:0.45rem 0.8rem; border-radius:10px; }
  [data-testid="stDataFrame"] div, [data-testid="stDataFrame"] table{ font-size:0.92rem; }
}

/* Small phones */
@media (max-width: 480px){
  html, body, [data-testid="stAppViewContainer"]{ font-size: 13px; }
  h1{font-size:1.45rem;} h2{font-size:1.25rem;} h3{font-size:1.1rem;}
  .stMarkdown, label, .stTextInput label, .stSelectbox label, .stFileUploader label{ font-size:0.9rem; }
  .stTextInput input, .stTextArea textarea{ font-size:0.9rem; }
  .stButton button{ font-size:0.9rem; padding:0.4rem 0.75rem; border-radius:10px; }
  [data-testid="stDataFrame"] div, [data-testid="stDataFrame"] table{ font-size:0.88rem; }
}
</style>"""


def ensure_credentials_ui():
    if os.path.exists(CREDENTIALS_FILE): return True
    st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå service_account.json")
    up = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå service_account.json", type=["json"])
    if up is not None:
        with open(CREDENTIALS_FILE, "wb") as f: f.write(up.read())
        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä..."); st.rerun()
    st.stop()

@st.cache_resource(show_spinner=False)
def get_client():
    scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scopes)
    return gspread.authorize(creds)

def open_sheet_by_url(sheet_url: str):
    gc = get_client()
    return gc.open_by_url(sheet_url)

def ensure_sheets_exist(sh):
    titles = [ws.title for ws in sh.worksheets()]
    if SHEET_ITEMS not in titles:
        ws = sh.add_worksheet(SHEET_ITEMS, 1000, len(ITEMS_HEADERS)+5); ws.append_row(ITEMS_HEADERS)
    if SHEET_TXNS not in titles:
        ws = sh.add_worksheet(SHEET_TXNS, 2000, len(TXNS_HEADERS)+5); ws.append_row(TXNS_HEADERS)
    if SHEET_USERS not in titles:
        ws = sh.add_worksheet(SHEET_USERS, 100, len(USERS_HEADERS)+2); ws.append_row(USERS_HEADERS)
        default_pwd = bcrypt.hashpw("admin123".encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
        sh.worksheet(SHEET_USERS).append_row(["admin","Administrator","admin",default_pwd,"Y"])
    if SHEET_CATS not in titles:
        ws = sh.add_worksheet(SHEET_CATS, 200, len(CATS_HEADERS)+2); ws.append_row(CATS_HEADERS)
    if SHEET_BRANCHES not in titles:
        ws = sh.add_worksheet(SHEET_BRANCHES, 200, len(BR_HEADERS)+2); ws.append_row(BR_HEADERS)
    if SHEET_TICKETS not in titles:
        ws = sh.add_worksheet(SHEET_TICKETS, 1000, len(TICKETS_HEADERS)+5); ws.append_row(TICKETS_HEADERS)
    if SHEET_TICKET_CATS not in titles:
        ws = sh.add_worksheet(SHEET_TICKET_CATS, 200, len(TICKET_CAT_HEADERS)+2); ws.append_row(TICKET_CAT_HEADERS)

def read_df(sh, title, headers):
    ws = sh.worksheet(title); vals = ws.get_all_values()
    if not vals: return pd.DataFrame(columns=headers)
    df = pd.DataFrame(vals[1:], columns=vals[0])
    return df if not df.empty else pd.DataFrame(columns=headers)

def write_df(sh, title, df):
    if title==SHEET_ITEMS: cols=ITEMS_HEADERS
    elif title==SHEET_TXNS: cols=TXNS_HEADERS
    elif title==SHEET_USERS: cols=USERS_HEADERS
    elif title==SHEET_CATS: cols=CATS_HEADERS
    elif title==SHEET_BRANCHES: cols=BR_HEADERS
    else: cols = df.columns.tolist()
    for c in cols:
        if c not in df.columns: df[c] = ""
    df = df[cols]
    ws = sh.worksheet(title)
    ws.clear(); ws.update([df.columns.values.tolist()] + df.values.tolist())

def append_row(sh, title, row): sh.worksheet(title).append_row(row)

def auth_block(sh):
    st.session_state.setdefault("user", None); st.session_state.setdefault("role", None)
    if st.session_state.get("user"):
        with st.sidebar:
            st.markdown(f"**üë§ {st.session_state['user']}**"); st.caption(f"Role: {st.session_state['role']}")
            if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"): st.session_state["user"]=None; st.session_state["role"]=None; st.rerun()
        return True
    st.sidebar.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    u = st.sidebar.text_input("Username"); p = st.sidebar.text_input("Password", type="password")
    if st.sidebar.button("Login", use_container_width=True):
        users = read_df(sh, SHEET_USERS, USERS_HEADERS)
        row = users[(users["Username"]==u) & (users["Active"].str.upper()=="Y")]
        if not row.empty:
            ok = False
            try: ok = bcrypt.checkpw(p.encode("utf-8"), row.iloc[0]["PasswordHash"].encode("utf-8"))
            except: ok = False
            if ok: st.session_state["user"]=u; st.session_state["role"]=row.iloc[0]["Role"]; st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); st.rerun()
            else: st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else: st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    return False

# -------- Thai font registration --------
def register_thai_fonts() -> dict:
    """Try to register a Thai TTF font. Return {'normal': name, 'bold': name_or_None}"""
    candidates = [
        # local project fonts folder
        ("ThaiFont", "./fonts/Sarabun-Regular.ttf", "./fonts/Sarabun-Bold.ttf"),
        ("ThaiFont", "./fonts/THSarabunNew.ttf", "./fonts/THSarabunNew-Bold.ttf"),
        ("ThaiFont", "./fonts/NotoSansThai-Regular.ttf", "./fonts/NotoSansThai-Bold.ttf"),
        # Windows
        ("ThaiFont", "C:/Windows/Fonts/Sarabun-Regular.ttf", "C:/Windows/Fonts/Sarabun-Bold.ttf"),
        ("ThaiFont", "C:/Windows/Fonts/THSarabunNew.ttf", "C:/Windows/Fonts/THSarabunNew-Bold.ttf"),
        ("ThaiFont", "C:/Windows/Fonts/NotoSansThai-Regular.ttf", "C:/Windows/Fonts/NotoSansThai-Bold.ttf"),
        # Linux common
        ("ThaiFont", "/usr/share/fonts/truetype/noto/NotoSansThai-Regular.ttf", "/usr/share/fonts/truetype/noto/NotoSansThai-Bold.ttf"),
        ("ThaiFont", "/usr/share/fonts/truetype/sarabun/Sarabun-Regular.ttf", "/usr/share/fonts/truetype/sarabun/Sarabun-Bold.ttf"),
        # macOS
        ("ThaiFont", "/Library/Fonts/NotoSansThai-Regular.ttf", "/Library/Fonts/NotoSansThai-Bold.ttf"),
    ]
    chosen = None
    for fam, normal_path, bold_path in candidates:
        if os.path.exists(normal_path):
            try:
                pdfmetrics.registerFont(TTFont(fam, normal_path))
                bold_name = None
                if os.path.exists(bold_path):
                    bold_name = fam + "-Bold"
                    pdfmetrics.registerFont(TTFont(bold_name, bold_path))
                return {"normal": fam, "bold": bold_name}
            except Exception:
                continue
    return {"normal": None, "bold": None}

def df_to_pdf_bytes(df, title="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", subtitle=""):
    # Register Thai font (if available)
    f = register_thai_fonts()
    use_thai = f["normal"] is not None
    if not use_thai:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF (Sarabun / TH Sarabun New / Noto Sans Thai). ‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .ttf ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ./fonts ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.", icon="‚ö†Ô∏è")

    buf = io.BytesIO()
    doc = SimpleDocTemplate(
        buf,
        pagesize=landscape(A4),
        leftMargin=14, rightMargin=14, topMargin=14, bottomMargin=14
    )
    styles = getSampleStyleSheet()

    # Override to Thai font
    if use_thai:
        styles["Normal"].fontName = f["normal"]
        styles["Normal"].fontSize = 11
        styles["Normal"].leading = 14
        styles["Normal"].wordWrap = 'CJK'
        # Create a Thai Title style
        styles.add(ParagraphStyle(name="ThaiTitle", parent=styles["Title"],
                                  fontName=f["bold"] or f["normal"],
                                  fontSize=18, leading=22, wordWrap='CJK'))
        styles.add(ParagraphStyle(name="ThaiHeader", parent=styles["Normal"],
                                  fontName=f["bold"] or f["normal"],
                                  fontSize=12, leading=15, wordWrap='CJK'))
        title_style = styles["ThaiTitle"]
        header_style = styles["ThaiHeader"]
    else:
        title_style = styles["Title"]
        header_style = styles["Heading4"]

    story = []
    story.append(Paragraph(title, title_style))
    if subtitle:
        story.append(Paragraph(subtitle, styles["Normal"]))
    story.append(Spacer(1, 8))

    if df.empty:
        story.append(Paragraph("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", styles["Normal"]))
    else:
        # Ensure string & Thai-compatible data
        data = [df.columns.astype(str).tolist()] + df.astype(str).values.tolist()
        table = Table(data, repeatRows=1)

        # Table style
        ts = [
            ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#f2f2f2')),
            ('ALIGN', (0,0), (-1,-1), 'CENTER'),
            ('FONTSIZE', (0,0), (-1,-1), 9),
            ('GRID', (0,0), (-1,-1), 0.25, colors.HexColor('#5a5a5a')),
            ('TOPPADDING', (0,0), (-1,-1), 4),
            ('BOTTOMPADDING', (0,0), (-1,-1), 4),
        ]
        if use_thai:
            ts.append(('FONTNAME', (0,0), (-1,-1), f["normal"]))
            ts.append(('FONTNAME', (0,0), (-1,0), f["bold"] or f["normal"]))  # header row bold if available

        table.setStyle(TableStyle(ts))
        story.append(table)

    doc.build(story)
    pdf = buf.getvalue(); buf.close()
    return pdf

# ---------- (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô v10) ----------
def fmt_dt(dt_obj: datetime) -> str:
    return dt_obj.strftime("%Y-%m-%d %H:%M:%S")

def get_now_str(): 
    return fmt_dt(datetime.now(TZ))

def combine_date_time(d: date, t: dtime) -> datetime:
    naive = datetime.combine(d, t)
    return TZ.localize(naive)

def generate_item_code(sh, cat_code: str) -> str:
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    pattern = re.compile(rf"^{re.escape(cat_code)}-(\d+)$")
    max_num = 0
    for code in items["‡∏£‡∏´‡∏±‡∏™"].dropna().astype(str):
        m = pattern.match(code.strip())
        if m:
            try:
                num = int(m.group(1))
                if num > max_num: max_num = num
            except: pass
    next_num = max_num + 1
    return f"{cat_code}-{next_num:03d}"

def ensure_item_row(items_df, code): return (items_df["‡∏£‡∏´‡∏±‡∏™"]==code).any()

def adjust_stock(sh, code, delta, actor, branch="", note="", txn_type="OUT", ts_str=None):
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    if items.empty or not ensure_item_row(items, code): st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á"); return False
    row = items[items["‡∏£‡∏´‡∏±‡∏™"]==code].iloc[0]
    cur = int(float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"])) if str(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]).strip()!="" else 0
    if txn_type=="OUT" and cur+delta < 0: st.error("‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"); return False
    items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==code, "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = cur+delta; write_df(sh, SHEET_ITEMS, items)
    ts = ts_str if ts_str else get_now_str()
    append_row(sh, SHEET_TXNS, [str(uuid.uuid4())[:8], ts, txn_type, code, row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], branch, abs(delta), actor, note])
    return True

def make_pie(df: pd.DataFrame, label_col: str, value_col: str, top_n: int, title: str):
    if df.empty or (value_col in df.columns and pd.to_numeric(df[value_col], errors="coerce").fillna(0).sum() == 0):
        st.info(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü: {title}")
        return
    work = df.copy()
    if value_col in work.columns:
        work[value_col] = pd.to_numeric(work[value_col], errors="coerce").fillna(0)
    work = work.groupby(label_col, dropna=False)[value_col].sum().reset_index().rename(columns={value_col: "sum_val"})
    work[label_col] = work[label_col].replace("", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    work = work.sort_values("sum_val", ascending=False)
    if len(work) > top_n:
        top = work.head(top_n)
        others = pd.DataFrame({label_col:["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"], "sum_val":[work["sum_val"].iloc[top_n:].sum()]})
        work = pd.concat([top, others], ignore_index=True)
    total = work["sum_val"].sum()
    work["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå"] = (work["sum_val"] / total * 100).round(2) if total>0 else 0
    st.markdown(f"**{title}**")
    chart = alt.Chart(work).mark_arc(innerRadius=60).encode(
        theta="sum_val:Q",
        color=f"{label_col}:N",
        tooltip=[f"{label_col}:N","sum_val:Q","‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå:Q"]
    )
    st.altair_chart(chart, use_container_width=True)

def parse_range(choice: str, d1: date=None, d2: date=None):
    today = datetime.now(TZ).date()
    if choice == "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ":
        return today, today
    if choice == "7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
        return today - timedelta(days=6), today
    if choice == "30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
        return today - timedelta(days=29), today
    if choice == "90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î":
        return today - timedelta(days=89), today
    if choice == "‡∏õ‡∏µ‡∏ô‡∏µ‡πâ":
        return date(today.year, 1, 1), today
    if choice == "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á" and d1 and d2:
        return d1, d2
    return today - timedelta(days=29), today

def page_dashboard(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üìä Dashboard (‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ)")

    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
    txns  = read_df(sh, SHEET_TXNS, TXNS_HEADERS)

    total_items = len(items)
    total_qty = items["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].apply(lambda x: int(float(x)) if str(x).strip() != "" else 0).sum() if not items.empty else 0
    low_df = items[(items["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"].str.upper() == "Y") & (items["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].astype(str) != "")]
    if not low_df.empty:
        low_df = low_df[pd.to_numeric(low_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors='coerce').fillna(0) <= pd.to_numeric(low_df["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors='coerce').fillna(0)]
    low_count = len(low_df) if not low_df.empty else 0

    c1, c2, c3 = st.columns(3)
    with c1: st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"{total_items:,}")
    with c2: st.metric("‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏°", f"{total_qty:,}")
    with c3: st.metric("‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", f"{low_count:,}")

    st.markdown("### üéõÔ∏è ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
    colA, colB, colC = st.columns([2,1,1])
    with colA:
        chart_opts = st.multiselect(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á",
            options=[
                "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö",
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)",
                "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT)",
                "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT)",
                "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤",
            ],
            default=["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)","Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
        )
    with colB:
        top_n = st.slider("Top-N ‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü", min_value=3, max_value=20, value=10, step=1)
    with colC:
        per_row = st.selectbox("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß", [1,2,3,4], index=1)

    st.markdown("### ‚è±Ô∏è ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó '‡πÄ‡∏ö‡∏¥‡∏Å ... (OUT)' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
    colR1, colR2, colR3 = st.columns(3)
    with colR1:
        range_choice = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ","7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏õ‡∏µ‡∏ô‡∏µ‡πâ","‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"], index=2)
    with colR2:
        d1 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", value=datetime.now(TZ).date()-timedelta(days=29))
    with colR3:
        d2 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", value=datetime.now(TZ).date())
    start_date, end_date = parse_range(range_choice, d1, d2)

    if not txns.empty:
        tx = txns.copy()
        tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors='coerce')
        tx = tx.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        tx = tx[(tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= start_date) & (tx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= end_date)]
        tx["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] = pd.to_numeric(tx["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"], errors="coerce").fillna(0)
        tx_out = tx[tx["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]=="OUT"]
    else:
        tx_out = pd.DataFrame(columns=TXNS_HEADERS)

    charts = []
    if "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().reset_index()
        charts.append(("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"))

    if "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(tmp["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        tmp = tmp.groupby("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö")["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].sum().reset_index()
        charts.append(("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", tmp, "‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"))

    if "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" in chart_opts and not items.empty:
        tmp = items.copy()
        tmp["count"] = 1
        tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["count"].sum().reset_index()
        charts.append(("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "count"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT)" in chart_opts:
        if not tx_out.empty:
            tmp = tx_out.groupby("‡∏™‡∏≤‡∏Ç‡∏≤", dropna=False)["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏≤‡∏Ç‡∏≤":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT)" in chart_opts:
        if not tx_out.empty:
            tmp = tx_out.groupby("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if "‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT)" in chart_opts:
        if not tx_out.empty and not items.empty:
            it = items[["‡∏£‡∏´‡∏±‡∏™","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"]].copy()
            tmp = tx_out.merge(it, left_on="‡∏£‡∏´‡∏±‡∏™", right_on="‡∏£‡∏´‡∏±‡∏™", how="left")
            tmp = tmp.groupby("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"‡πÄ‡∏ö‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (OUT) {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))


    # ----- Tickets Summary (use the same date range based on '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á') -----
    tickets_df = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    if not tickets_df.empty:
        tdf = tickets_df.copy()
        tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        tdf = tdf.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        tdf = tdf[(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= start_date) & (tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= end_date)]
    else:
        tdf = tickets_df

    if "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" in chart_opts:
        if not tdf.empty:
            tmp = tdf.groupby("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"})
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if "Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤" in chart_opts:
        if not tdf.empty:
            tmp = tdf.groupby("‡∏™‡∏≤‡∏Ç‡∏≤", dropna=False)["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"})
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", tmp, "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))
        else:
            charts.append((f"Ticket ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ {start_date} ‡∏ñ‡∏∂‡∏á {end_date}", pd.DataFrame({"‡∏™‡∏≤‡∏Ç‡∏≤":[], "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":[]}), "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"))

    if len(charts)==0:
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
    else:
        rows = (len(charts) + per_row - 1) // per_row
        idx = 0
        for r in range(rows):
            cols = st.columns(per_row)
            for c in range(per_row):
                if idx >= len(charts): break
                title, df, label_col, value_col = charts[idx]
                with cols[c]:
                    make_pie(df, label_col, value_col, top_n, title)
                idx += 1

    items_num = items.copy()
    if not items_num.empty:
        items_num["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = pd.to_numeric(items_num["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"], errors="coerce").fillna(0)
        items_num["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"] = pd.to_numeric(items_num["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"], errors="coerce").fillna(0)
        low_df2 = items_num[(items_num["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"].str.upper()=="Y") & (items_num["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] <= items_num["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"])]
    else:
        low_df2 = pd.DataFrame(columns=ITEMS_HEADERS)
    if not low_df2.empty:
        with st.expander("‚ö†Ô∏è ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (Reorder)", expanded=False):
            st.dataframe(low_df2[["‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]], use_container_width=True, height=240)
            pdf = df_to_pdf_bytes(low_df2[["‡∏£‡∏´‡∏±‡∏™","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠","‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]], title="‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å", subtitle=get_now_str())
            st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î", data=pdf, file_name="low_stock.pdf", mime="application/pdf")

    st.markdown("</div>", unsafe_allow_html=True)

def get_unit_options(items_df):
    opts = sorted([x for x in items_df["‡∏´‡∏ô‡πà‡∏ß‡∏¢"].dropna().astype(str).unique() if x.strip()!=""])
    if "‡∏ä‡∏¥‡πâ‡∏ô" not in opts: opts = ["‡∏ä‡∏¥‡πâ‡∏ô"] + opts
    return opts + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]

def get_loc_options(items_df):
    opts = sorted([x for x in items_df["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"].dropna().astype(str).unique() if x.strip()!=""])
    if "IT Room" not in opts: opts = ["IT Room"] + opts
    return opts + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]


def generate_ticket_id() -> str:
    from datetime import datetime
    return "TCK-" + datetime.now(TZ).strftime("%Y%m%d-%H%M%S")

def page_tickets(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üõ†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏° / ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Tickets)")

    # Load data
    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
    branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    t_cats = read_df(sh, SHEET_TICKET_CATS, TICKET_CAT_HEADERS)

    # Filters
    st.markdown("### ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")
    f1, f2, f3, f4 = st.columns(4)
    with f1:
        statuses = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î","‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"]
        status_pick = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", statuses, index=0, key="tk_status")
    with f2:
        br_opts = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ((branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"] + " | " + branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() if not branches.empty else [])
        branch_pick = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", br_opts, index=0, key="tk_branch")
    with f3:
        cat_opts = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else [])
        cat_pick = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", cat_opts, index=0, key="tk_cat")
    with f4:
        q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á/‡∏´‡∏°‡∏ß‡∏î/‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)", key="tk_query")

    # Date filter
    dcol1, dcol2 = st.columns(2)
    with dcol1:
        d1 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", key="tk_d1")
    with dcol2:
        d2 = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", key="tk_d2")

    view = tickets.copy()
    if not view.empty:
        view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        view = view.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        if "tk_d1" in st.session_state and st.session_state.get("tk_d1"):
            view = view[view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= st.session_state["tk_d1"]]
        if "tk_d2" in st.session_state and st.session_state.get("tk_d2"):
            view = view[view["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= st.session_state["tk_d2"]]
        if status_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == status_pick]
        if branch_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏™‡∏≤‡∏Ç‡∏≤"] == branch_pick]
        if "cat_pick" in locals() and cat_pick != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            view = view[view["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"] == cat_pick]
        if q:
            mask = (view["‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"].str.contains(q, case=False, na=False) |
                    view["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].str.contains(q, case=False, na=False) |
                    view["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"].str.contains(q, case=False, na=False))
            view = view[mask]

    st.markdown("### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    st.dataframe(view.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", ascending=False) if not view.empty else view,
                 use_container_width=True, height=300)

    st.markdown("---")
    t_add, t_update = st.tabs(["‚ûï ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà","üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"])

    with t_add:
        with st.form("tk_new", clear_on_submit=True):
            c1,c2,c3 = st.columns(3)
            with c1:
                now_str = get_now_str()
                branch_sel = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤", br_opts[1:] if len(br_opts)>1 else ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"])
                if branch_sel == "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á":
                    branch_sel = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="")
                reporter = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value="")
            with c2:
                tkc_opts = ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else []) + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                pick_c = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤", options=tkc_opts if tkc_opts else ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"], key="tk_new_cat_sel")
                cate_custom = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="" if pick_c!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else "", disabled=(pick_c!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                cate = pick_c if pick_c != "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else cate_custom
                assignee = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö (IT)", value=st.session_state.get("user",""))
            with c3:
                detail = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", height=100)
                note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value="")
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", use_container_width=True)
        if s:
            tid = generate_ticket_id()
            row = [tid, get_now_str(), branch_sel, reporter, cate, detail, "‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á", assignee, get_now_str(), note]
            append_row(sh, SHEET_TICKETS, row)
            st.success(f"‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Ticket: {tid})")
            safe_rerun()

    with t_update:
        if tickets.empty:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï Tickets")
        else:
            ids = tickets["TicketID"].tolist()
            pick = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Ticket", options=["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"]+ids, key="tk_pick")
            if pick != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --":
                row = tickets[tickets["TicketID"]==pick].iloc[0]
                with st.form("tk_edit", clear_on_submit=False):
                    c1,c2,c3 = st.columns(3)
                    with c1:
                        branch = st.text_input("‡∏™‡∏≤‡∏Ç‡∏≤", value=row["‡∏™‡∏≤‡∏Ç‡∏≤"])
                        reporter = st.text_input("‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", value=row["‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"])
                    with c2:
                        tkc_opts2 = ((t_cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"] + " | " + t_cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤"]).tolist() if not t_cats.empty else []) + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                        default_index = tkc_opts2.index(row["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"]) if (row["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"] in tkc_opts2) else len(tkc_opts2)-1
                        pick_c2 = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", options=tkc_opts2, index=default_index, key="tk_edit_cat_sel")
                        cate_custom2 = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á)", value="" if pick_c2!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else row["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"], disabled=(pick_c2!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                        cate = pick_c2 if pick_c2 != "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else cate_custom2
                        status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"],
                                              index=["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"].index(row["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]) if row["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] in ["‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"] else 0)
                        assignee = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", value=row["‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"])
                    with c3:
                        detail = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", value=row["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"], height=100)
                        note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value=row["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"])
                    colA, colB, colC = st.columns([2,1,1])
                    save = colA.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True)
                    done = colB.form_submit_button("‚úÖ ‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô (‡πÄ‡∏™‡∏£‡πá‡∏à)", use_container_width=True)
                    delete = colC.form_submit_button("üóëÔ∏è ‡∏•‡∏ö Ticket", use_container_width=True)

                if save or done or delete:
                    df = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)
                    if delete:
                        df = df[df["TicketID"] != pick]
                        write_df(sh, SHEET_TICKETS, df)
                        st.success("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
                    else:
                        if done: status = "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"
                        df.loc[df["TicketID"]==pick, ["‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]] = \
                            [branch, reporter, cate, detail, status, assignee, get_now_str(), note]
                        write_df(sh, SHEET_TICKETS, df)
                        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

    st.markdown("</div>", unsafe_allow_html=True)


def render_categories_admin(sh):
    """UI ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (Categories) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô/‡∏™‡∏ï‡∏≤‡∏ü
    - ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    - ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ CSV/Excel
    - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á + ‡∏•‡∏ö (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Items)
    """
    st.markdown("#### üè∑Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
    cats = read_df(sh, SHEET_CATS, CATS_HEADERS)

    tab1, tab2, tab3 = st.tabs(["‚úèÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "üì• ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", "üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö (‡∏ï‡∏≤‡∏£‡∏≤‡∏á)"])

    # ---- TAB 1: Single add/update ----
    with tab1:
        c1, c2 = st.columns([1,2])
        with c1:
            code_in = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î", placeholder="‡πÄ‡∏ä‡πà‡∏ô PRT, KBD").upper().strip()
        with c2:
            name_in = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏∂‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå, ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î").strip()
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", use_container_width=True, key="cat_save_single"):
            if not code_in or not name_in:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                df = read_df(sh, SHEET_CATS, CATS_HEADERS)
                if (df["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == code_in).any():
                    df.loc[df["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == code_in, "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"] = name_in
                    msg = "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
                else:
                    df = pd.concat([df, pd.DataFrame([[code_in, name_in]], columns=CATS_HEADERS)], ignore_index=True)
                    msg = "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
                write_df(sh, SHEET_CATS, df); st.success(f"{msg}‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {code_in} ‚Äî {name_in}"); safe_rerun()

    # ---- TAB 2: Import many ----
    with tab2:
        with st.expander("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô/‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π)", expanded=False):
            st.markdown("""\
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå **‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î**
- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î** ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà** ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏î‡∏¥‡∏°
- ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î '‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï'
            """)
            tpl = """‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î,‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î
PRT,‡∏´‡∏°‡∏∂‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå
KBD,‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
"""
            st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï (CSV)", data=tpl.encode("utf-8-sig"),
                               file_name="template_categories.csv", mime="text/csv")

        cA, cB = st.columns([2,1])
        with cA:
            up = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå (.csv, .xlsx)", type=["csv","xlsx","xls"], key="cat_uploader_stocktab")
        with cB:
            replace_all = st.checkbox("‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï (‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏´‡∏°‡πà)", value=False)

        if up is not None:
            try:
                if up.name.lower().endswith(".csv"):
                    df_up = pd.read_csv(up, dtype=str)
                else:
                    df_up = pd.read_excel(up, dtype=str)
                df_up = df_up.fillna("").applymap(lambda x: str(x).strip())
            except Exception as e:
                st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"); return

            rename_map = {"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î","code":"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","name":"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î","category_code":"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","category_name":"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"}
            df_up.columns = [rename_map.get(c.strip(), c.strip()) for c in df_up.columns]
            missing = [c for c in ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"] if c not in df_up.columns]
            if missing:
                st.error(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö: {', '.join(missing)}"); return

            df_up["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] = df_up["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"].str.upper()
            df_up = df_up[df_up["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]!=""]
            df_up = df_up.drop_duplicates(subset=["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"], keep="last")

            st.success(f"‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß {len(df_up):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            st.dataframe(df_up, use_container_width=True, height=240)

            if st.button("üöÄ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", use_container_width=True, key="cat_do_import_stocktab"):
                base = read_df(sh, SHEET_CATS, CATS_HEADERS)
                if replace_all:
                    # ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô Items ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
                    used_cats = set(items["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].tolist()) if not items.empty else set()
                    new_cats = set(df_up["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"].tolist())
                    if used_cats - new_cats:
                        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï‡πÑ‡∏î‡πâ: ‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Items ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ"); return
                    write_df(sh, SHEET_CATS, df_up[CATS_HEADERS]); st.success(f"‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {len(df_up):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"); safe_rerun()
                else:
                    added, updated = 0, 0
                    for _, r in df_up.iterrows():
                        cd, nm = str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).strip().upper(), str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).strip()
                        if not cd or not nm: 
                            continue
                        if (base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == cd).any():
                            base.loc[base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == cd, "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"] = nm; updated += 1
                        else:
                            base = pd.concat([base, pd.DataFrame([[cd, nm]], columns=CATS_HEADERS)], ignore_index=True); added += 1
                    write_df(sh, SHEET_CATS, base); st.success(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà {added:,} ‚Ä¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {updated:,}"); safe_rerun()

    # ---- TAB 3: Search / inline edit / delete with protection ----
    with tab3:
        c1, c2 = st.columns([2,1])
        with c1:
            q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠)", key="cat_search_stocktab")
        with c2:
            st.caption("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

        view = cats.copy()
        if not view.empty and q:
            mask = view["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"].str.contains(q, case=False, na=False) | view["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"].str.contains(q, case=False, na=False)
            view = view[mask]

        edited = st.data_editor(
            view.sort_values("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"),
            use_container_width=True,
            height=360,
            disabled=["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"],
            key="cat_editor_stocktab"
        )

        cL, cM, cR = st.columns([1,1,1])
        with cL:
            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True, key="cat_save_table_stocktab"):
                base = read_df(sh, SHEET_CATS, CATS_HEADERS)
                for _, r in edited.iterrows():
                    base.loc[base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).strip().upper(), "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"] = str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).strip()
                write_df(sh, SHEET_CATS, base); st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"); safe_rerun()
        with cM:
            # Quick add
            with st.popover("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"):
                q_code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î (‡πÉ‡∏´‡∏°‡πà)", key="cat_quick_code_stocktab").upper().strip()
                q_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î", key="cat_quick_name_stocktab").strip()
                if st.button("‡πÄ‡∏û‡∏¥‡πà‡∏°", key="cat_quick_add_stocktab"):
                    if not q_code or not q_name:
                        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
                    else:
                        base = read_df(sh, SHEET_CATS, CATS_HEADERS)
                        if (base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == q_code).any():
                            st.error("‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"); st.stop()
                        base = pd.concat([base, pd.DataFrame([[q_code, q_name]], columns=CATS_HEADERS)], ignore_index=True)
                        write_df(sh, SHEET_CATS, base); st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
        with cR:
            # Delete selection with protection
            base = read_df(sh, SHEET_CATS, CATS_HEADERS)
            opts = (base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]+" | "+base["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).tolist() if not base.empty else []
            del_sel = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)", options=opts, key="cat_del_sel_stocktab")
            if st.button("üóëÔ∏è ‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", type="secondary", use_container_width=True, key="cat_do_delete_stocktab"):
                items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
                used = set(items["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].tolist()) if not items.empty else set()
                to_del_codes = {x.split(" | ")[0] for x in del_sel}
                blocked = sorted(list(used.intersection(to_del_codes)))
                if blocked:
                    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Items: " + ", ".join(blocked))
                else:
                    base = base[~base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"].isin(list(to_del_codes))]
                    write_df(sh, SHEET_CATS, base); st.success(f"‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß {len(to_del_codes):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"); safe_rerun()
def page_stock(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True); st.subheader("üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS); cats  = read_df(sh, SHEET_CATS, CATS_HEADERS)
    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏ß‡∏î)")
    view_df = items.copy()
    if q and not items.empty:
        mask = items["‡∏£‡∏´‡∏±‡∏™"].str.contains(q, case=False, na=False) | items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].str.contains(q, case=False, na=False) | items["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"].str.contains(q, case=False, na=False)
        view_df = items[mask]
    st.dataframe(view_df, use_container_width=True, height=320)

    unit_opts = get_unit_options(items)
    loc_opts  = get_loc_options(items)

    if st.session_state.get("role") in ("admin","staff"):
        t_add, t_edit, t_cat = st.tabs(["‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà)","‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°)","üè∑Ô∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"])

        with t_cat:
            render_categories_admin(sh)

        with t_add:
            with st.form("item_add", clear_on_submit=True):
                c1,c2,c3 = st.columns(3)
                with c1:
                    if cats.empty: st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï Categories (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°)"); cat_opt=""
                    else:
                        opts = (cats["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]+" | "+cats["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).tolist(); selected = st.selectbox("‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", options=opts)
                        cat_opt = selected.split(" | ")[0]
                    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
                with c2:
                    sel_unit = st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=unit_opts, index=0)
                    unit = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                    if sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": unit = sel_unit
                    qty = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=0, step=1)
                    rop = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=0, step=1)
                with c3:
                    sel_loc = st.selectbox("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=loc_opts, index=0)
                    loc = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                    if sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": loc = sel_loc
                    active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0)
                    auto_code = st.checkbox("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=True)
                    code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏≠‡πÇ‡∏ï‡πâ)", disabled=auto_code)
                    s_add = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", use_container_width=True)
            if s_add:
                if (auto_code and not cat_opt) or (not auto_code and code.strip()==""): st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î/‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™")
                else:
                    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS); gen_code = generate_item_code(sh, cat_opt) if auto_code else code.strip().upper()
                    if (items["‡∏£‡∏´‡∏±‡∏™"]==gen_code).any():
                        items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==gen_code, ITEMS_HEADERS] = [gen_code, cat_opt, name, unit, qty, rop, loc, active]
                    else:
                        items = pd.concat([items, pd.DataFrame([[gen_code, cat_opt, name, unit, qty, rop, loc, active]], columns=ITEMS_HEADERS)], ignore_index=True)
                    write_df(sh, SHEET_ITEMS, items); st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏£‡∏´‡∏±‡∏™: {gen_code})"); safe_rerun()

        with t_edit:
            st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏•‡∏ö")
            if items.empty:
                st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            else:
                codes = items["‡∏£‡∏´‡∏±‡∏™"].tolist()
                pick = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", options=["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"]+codes)
                if pick != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --":
                    row = items[items["‡∏£‡∏´‡∏±‡∏™"]==pick].iloc[0]
                    unit_opts_edit = unit_opts[:-1]
                    if row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"] not in unit_opts_edit and str(row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"]).strip()!="":
                        unit_opts_edit = [row["‡∏´‡∏ô‡πà‡∏ß‡∏¢"]] + unit_opts_edit
                    unit_opts_edit = unit_opts_edit + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                    loc_opts_edit = loc_opts[:-1]
                    if row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"] not in loc_opts_edit and str(row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]).strip()!="":
                        loc_opts_edit = [row["‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö"]] + loc_opts_edit
                    loc_opts_edit = loc_opts_edit + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]

                    with st.form("item_edit", clear_on_submit=False):
                        c1,c2,c3 = st.columns(3)
                        with c1:
                            name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", value=row["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])
                            sel_unit = st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=unit_opts_edit, index=0)
                            unit = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                            if sel_unit!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": unit = sel_unit
                        with c2:
                            qty = st.number_input("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, value=int(float(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]) if str(row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]).strip()!="" else 0), step=1)
                            rop = st.number_input("‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, value=int(float(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"]) if str(row["‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"]).strip()!="" else 0), step=1)
                        with c3:
                            sel_loc = st.selectbox("‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", options=loc_opts_edit, index=0)
                            loc = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà", value="", disabled=(sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"))
                            if sel_loc!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": loc = sel_loc
                            active = st.selectbox("‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", ["Y","N"], index=0 if str(row["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]).upper()=="Y" else 1)
                        col_save, col_delete = st.columns([3,1])
                        s_save = col_save.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", use_container_width=True)
                        s_del  = col_delete.form_submit_button("üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", use_container_width=True)
                    if s_save:
                        items.loc[items["‡∏£‡∏´‡∏±‡∏™"]==pick, ITEMS_HEADERS] = [pick, row["‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"], name, unit, qty, rop, loc, "Y" if active=="Y" else "N"]
                        write_df(sh, SHEET_ITEMS, items); st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()
                    if s_del:
                        items = items[items["‡∏£‡∏´‡∏±‡∏™"]!=pick]; write_df(sh, SHEET_ITEMS, items); st.success(f"‡∏•‡∏ö {pick} ‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

def group_period(df, period="ME"):
    dfx = df.copy(); dfx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(dfx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors='coerce'); dfx = dfx.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
    return dfx.groupby([pd.Grouper(key="‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", freq=period), "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'].sum().reset_index()

def page_issue_receive(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True); st.subheader("üßæ ‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
    if st.session_state.get("role") not in ("admin","staff"): st.info("‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏ä‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ"); st.markdown("</div>", unsafe_allow_html=True); return
    items = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS); branches = read_df(sh, SHEET_BRANCHES, BR_HEADERS)
    if items.empty: st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á"); st.markdown("</div>", unsafe_allow_html=True); return
    t1,t2 = st.tabs(["‡πÄ‡∏ö‡∏¥‡∏Å (OUT)","‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (IN)"])

    with t1:
        with st.form("issue", clear_on_submit=True):
            c1,c2 = st.columns([2,1])
            with c1: item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", options=items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])
            with c2: qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å", min_value=1, value=1, step=1)
            if branches.empty:
                branch_sel = st.text_input("‡∏™‡∏≤‡∏Ç‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≠ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤ ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà)")
            else:
                br_opts = (branches["‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤"] + " | " + branches["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤"]).tolist() + ["‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á"]
                br_pick = st.selectbox("‡∏™‡∏≤‡∏Ç‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏≠", options=br_opts)
                branch_sel = st.text_input("‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á ‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", value="" if br_pick!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á" else "")
                if br_pick!="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á": branch_sel = br_pick
            note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå")
            st.markdown("**‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å**")
            manual = st.checkbox("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á", value=False)
            if manual:
                d = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=datetime.now(TZ).date(), key="out_d")
                t = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤", value=datetime.now(TZ).time().replace(microsecond=0), key="out_t")
                ts_str = fmt_dt(combine_date_time(d, t))
            else:
                ts_str = None
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å", use_container_width=True)
        if s:
            code = item.split(" | ")[0]
            ok = adjust_stock(sh, code, -qty, st.session_state.get("user","unknown"), branch_sel, note, "OUT", ts_str=ts_str)
            if ok: st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

    with t2:
        with st.form("recv", clear_on_submit=True):
            c1,c2 = st.columns([2,1])
            with c1: item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", options=items["‡∏£‡∏´‡∏±‡∏™"]+" | "+items["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"], key="recv_item")
            with c2: qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", min_value=1, value=1, step=1, key="recv_qty")
            branch = st.text_input("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤/‡πÄ‡∏•‡∏Ç PO", key="recv_branch"); note = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤-‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å", key="recv_note")
            st.markdown("**‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤**")
            manual_in = st.checkbox("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á ", value=False, key="in_manual")
            if manual_in:
                d = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=datetime.now(TZ).date(), key="in_d")
                t = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤", value=datetime.now(TZ).time().replace(microsecond=0), key="in_t")
                ts_str = fmt_dt(combine_date_time(d, t))
            else:
                ts_str = None
            s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", use_container_width=True)
        if s:
            code = item.split(" | ")[0]
            ok = adjust_stock(sh, code, qty, st.session_state.get("user","unknown"), branch, note, "IN", ts_str=ts_str)
            if ok: st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()





def page_reports(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True)
    st.subheader("üìë ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô / ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")

    txns = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
    tickets = read_df(sh, SHEET_TICKETS, TICKETS_HEADERS)

    # ---------- Quick range state ----------
    if "report_d1" not in st.session_state or "report_d2" not in st.session_state:
        today = datetime.now(TZ).date()
        st.session_state["report_d1"] = today - timedelta(days=30)
        st.session_state["report_d2"] = today

    def _set_range(days=None, today=False, this_month=False, this_year=False):
        nowd = datetime.now(TZ).date()
        if today:
            st.session_state["report_d1"] = nowd
            st.session_state["report_d2"] = nowd
        elif this_month:
            st.session_state["report_d1"] = nowd.replace(day=1)
            st.session_state["report_d2"] = nowd
        elif this_year:
            st.session_state["report_d1"] = date(nowd.year, 1, 1)
            st.session_state["report_d2"] = nowd
        elif days is not None:
            st.session_state["report_d1"] = nowd - timedelta(days=days-1)
            st.session_state["report_d2"] = nowd

    st.markdown("### ‚è±Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß")
    bcols = st.columns(6)
    with bcols[0]:
        st.button("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", on_click=_set_range, kwargs=dict(today=True), key="btn_today_r")
    with bcols[1]:
        st.button("7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", on_click=_set_range, kwargs=dict(days=7), key="btn_7d_r")
    with bcols[2]:
        st.button("30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", on_click=_set_range, kwargs=dict(days=30), key="btn_30d_r")
    with bcols[3]:
        st.button("90 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", on_click=_set_range, kwargs=dict(days=90), key="btn_90d_r")
    with bcols[4]:
        st.button("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", on_click=_set_range, kwargs=dict(this_month=True), key="btn_month_r")
    with bcols[5]:
        st.button("‡∏õ‡∏µ‡∏ô‡∏µ‡πâ", on_click=_set_range, kwargs=dict(this_year=True), key="btn_year_r")

    with st.expander("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏á (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î '‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ')", expanded=False):
        d1m = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)", value=st.session_state["report_d1"], key="report_manual_d1_r")
        d2m = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)", value=st.session_state["report_d2"], key="report_manual_d2_r")
        st.button("‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ", on_click=lambda: (st.session_state.__setitem__("report_d1", d1m),
                                                st.session_state.__setitem__("report_d2", d2m)),
                  key="btn_apply_manual_r")

    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏´‡∏±‡∏™/‡∏™‡∏≤‡∏Ç‡∏≤/‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á)", key="report_query_r")

    d1 = st.session_state["report_d1"]
    d2 = st.session_state["report_d2"]
    st.caption(f"‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: **{d1} ‚Üí {d2}**")

    # ---------- Transactions (filter for existing tabs) ----------
    if not txns.empty:
        df_f = txns.copy()
        df_f["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(df_f["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors="coerce")
        df_f = df_f.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        df_f = df_f[(df_f["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date >= d1) & (df_f["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"].dt.date <= d2)]
        if q:
            mask_q = (
                df_f["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].str.contains(q, case=False, na=False) |
                df_f["‡∏£‡∏´‡∏±‡∏™"].str.contains(q, case=False, na=False) |
                df_f["‡∏™‡∏≤‡∏Ç‡∏≤"].str.contains(q, case=False, na=False)
            )
            df_f = df_f[mask_q]
    else:
        df_f = pd.DataFrame(columns=TXNS_HEADERS)

    # ---------- Tickets (filtered by ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á) ----------
    if not tickets.empty:
        tdf = tickets.copy()
        tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"] = pd.to_datetime(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"], errors="coerce")
        tdf = tdf.dropna(subset=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"])
        tdf = tdf[(tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date >= d1) & (tdf["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á"].dt.date <= d2)]
        if q:
            mask_t = (
                (tdf["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"].astype(str).str.contains(q, case=False, na=False)) |
                (tdf["‡∏™‡∏≤‡∏Ç‡∏≤"].astype(str).str.contains(q, case=False, na=False)) |
                (tdf["‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á"].astype(str).str.contains(q, case=False, na=False))
            )
            # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" ‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢
            if "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" in tdf.columns:
                mask_t = mask_t | tdf["‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"].astype(str).str.contains(q, case=False, na=False)
            tdf = tdf[mask_t]
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        if "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" not in tdf.columns:
            def _derive_subject(x):
                s = str(x or "").strip().splitlines()[0]
                return s[:60] if s else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
            tdf["‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"] = tdf["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"].apply(_derive_subject)
    else:
        tdf = pd.DataFrame(columns=TICKETS_HEADERS + ["‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"])

    # ---------- Tabs ----------
    tOut, tTickets, tW, tM, tY = st.tabs(["‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (OUT)", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤", "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏£‡∏≤‡∏¢‡∏õ‡∏µ"])

    # --- OUT detail ---
    with tOut:
        out_df = df_f[df_f["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "OUT"].copy().sort_values("‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", ascending=False)
        cols = [c for c in ["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "‡∏£‡∏´‡∏±‡∏™"] if c in out_df.columns]
        st.dataframe(out_df[cols], use_container_width=True, height=320)
        pdf = df_to_pdf_bytes(
            out_df[cols].rename(columns={"‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤":"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå":"‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å","‡∏™‡∏≤‡∏Ç‡∏≤":"‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"}),
            title="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (OUT)", subtitle=f"‡∏ä‡πà‡∏ß‡∏á {d1} ‡∏ñ‡∏∂‡∏á {d2}"
        )
        st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å", data=pdf, file_name="issue_detail_out.pdf", mime="application/pdf", key="dl_pdf_out_r")

    # --- Tickets detail + summary ---
    with tTickets:
        st.markdown("#### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        show_cols = [c for c in ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á","‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á","‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö","‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏","TicketID"] if c in tdf.columns]
        tdf_sorted = tdf.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á", ascending=False)
        st.dataframe(tdf_sorted[show_cols], use_container_width=True, height=320)

        st.markdown("#### ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏° '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á' ‡πÅ‡∏•‡∏∞ '‡∏™‡∏≤‡∏Ç‡∏≤'")
        if not tdf.empty:
            agg = tdf.groupby(["‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤"])["TicketID"].count().reset_index().rename(columns={"TicketID":"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á"})
        else:
            agg = pd.DataFrame(columns=["‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á"])
        st.dataframe(agg.sort_values(["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á","‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"], ascending=[False, True]), use_container_width=True, height=260)

        pdf_t = df_to_pdf_bytes(agg.rename(columns={"‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á":"‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"}), title="‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á √ó ‡∏™‡∏≤‡∏Ç‡∏≤", subtitle=f"‡∏ä‡πà‡∏ß‡∏á {d1} ‡∏ñ‡∏∂‡∏á {d2}")
        st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤", data=pdf_t, file_name="ticket_summary_subject_branch.pdf", mime="application/pdf", key="dl_pdf_ticket_r")

    # --- summaries by period (same as before) ---
    def group_period(df, period="ME"):
        dfx = df.copy()
        dfx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"] = pd.to_datetime(dfx["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"], errors='coerce')
        dfx = dfx.dropna(subset=["‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"])
        return dfx.groupby([pd.Grouper(key="‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤", freq=period), "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"])["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum().reset_index()

    with tW:
        g = group_period(df_f, "W")
        st.dataframe(g, use_container_width=True, height=220)
        st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", data=df_to_pdf_bytes(g, "‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", f"‡∏ä‡πà‡∏ß‡∏á {d1} ‡∏ñ‡∏∂‡∏á {d2}"), file_name="weekly_report.pdf", mime="application/pdf", key="dl_pdf_w_r")

    with tM:
        g = group_period(df_f, "ME")
        st.dataframe(g, use_container_width=True, height=220)
        st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", data=df_to_pdf_bytes(g, "‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", f"‡∏ä‡πà‡∏ß‡∏á {d1} ‡∏ñ‡∏∂‡∏á {d2}"), file_name="monthly_report.pdf", mime="application/pdf", key="dl_pdf_m_r")

    with tY:
        g = group_period(df_f, "YE")
        st.dataframe(g, use_container_width=True, height=220)
        st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ", data=df_to_pdf_bytes(g, "‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏õ‡∏µ", f"‡∏ä‡πà‡∏ß‡∏á {d1} ‡∏ñ‡∏∂‡∏á {d2}"), file_name="yearly_report.pdf", mime="application/pdf", key="dl_pdf_y_r")

    st.markdown("</div>", unsafe_allow_html=True)

def page_users_admin(sh):
    st.markdown("<div class='block-card'>", unsafe_allow_html=True); st.subheader("üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ & ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Admin)")
    if st.session_state.get("role") != "admin": st.info("‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (admin)"); st.markdown("</div>", unsafe_allow_html=True); return
    users = read_df(sh, SHEET_USERS, USERS_HEADERS); st.dataframe(users, use_container_width=True, height=260)
    st.markdown("### ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    with st.form("user_form", clear_on_submit=True):
        c1,c2,c3 = st.columns(3)
        with c1: uname = st.text_input("Username"); dname = st.text_input("Display Name")
        with c2: role = st.selectbox("Role", ["admin","staff","viewer"], index=1); active = st.selectbox("Active", ["Y","N"], index=0)
        with c3: pwd = st.text_input("‡∏ï‡∏±‡πâ‡∏á/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
        s = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", use_container_width=True)
    if s:
        if uname.strip()=="": st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Username")
        else:
            if pwd.strip(): hash_str = bcrypt.hashpw(pwd.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
            else:
                mask = users["Username"]==uname
                hash_str = users.loc[mask,"PasswordHash"].iloc[0] if mask.any() else bcrypt.hashpw("password123".encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
            if (users["Username"]==uname).any():
                users.loc[users["Username"]==uname, USERS_HEADERS] = [uname, dname, role, hash_str, active]
            else:
                users = pd.concat([users, pd.DataFrame([[uname, dname, role, hash_str, active]], columns=USERS_HEADERS)], ignore_index=True)
            write_df(sh, SHEET_USERS, users); st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß"); safe_rerun()

def is_test_text(s: str) -> bool:
    s = str(s).lower()
    return ("test" in s) or ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö" in s)

def page_settings():
    st.markdown("<div class='block-card'>", unsafe_allow_html=True); st.subheader("‚öôÔ∏è Settings"); st.caption("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏ä‡∏£‡πå Google Sheet ‡πÉ‡∏´‡πâ service account ‡πÅ‡∏•‡πâ‡∏ß")
    url = st.text_input("Google Sheet URL", value=st.session_state.get("sheet_url", DEFAULT_SHEET_URL))
    st.session_state["sheet_url"] = url
    if st.button("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠/‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô", use_container_width=True):
        try:
            sh = open_sheet_by_url(url); ensure_sheets_exist(sh); st.success("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        except Exception as e:
            st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    st.markdown("---")
    st.markdown("### üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)")
    role = st.session_state.get("role","viewer")
    if role != "admin":
        st.info("‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (admin) ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        st.markdown("</div>", unsafe_allow_html=True); return

    st.caption("‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡∏ó‡∏î‡∏™‡∏≠‡∏ö' ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö: Transactions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ **test/‡∏ó‡∏î‡∏™‡∏≠‡∏ö** ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏/‡∏™‡∏≤‡∏Ç‡∏≤/‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå/‡∏£‡∏´‡∏±‡∏™ ‡πÅ‡∏•‡∏∞ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) Items ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏µ test/‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô **TEST-/TST-**")
    include_items = st.checkbox("‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏ö Items ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö", value=False)
    with st.form("clear_test_confirm"):
        pwd = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô", type="password")
        confirm = st.text_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ CLEAR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", placeholder="CLEAR")
        submitted = st.form_submit_button("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö", use_container_width=True)
    if submitted:
        try:
            sh = open_sheet_by_url(st.session_state["sheet_url"])
        except Exception as e:
            st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            st.markdown("</div>", unsafe_allow_html=True); return

        users = read_df(sh, SHEET_USERS, USERS_HEADERS)
        row = users[users["Username"]==st.session_state.get("user")]
        if row.empty:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï Users"); st.markdown("</div>", unsafe_allow_html=True); return
        if not pwd:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"); st.markdown("</div>", unsafe_allow_html=True); return
        try:
            if not bcrypt.checkpw(pwd.encode("utf-8"), row.iloc[0]["PasswordHash"].encode("utf-8")):
                st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"); st.markdown("</div>", unsafe_allow_html=True); return
        except Exception:
            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ"); st.markdown("</div>", unsafe_allow_html=True); return
        if confirm.strip().upper() != "CLEAR":
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ CLEAR ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"); st.markdown("</div>", unsafe_allow_html=True); return

        removed_txn = 0; removed_items = 0
        tx = read_df(sh, SHEET_TXNS, TXNS_HEADERS)
        if not tx.empty:
            mask = (
                tx["‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"].apply(is_test_text) |
                tx["‡∏™‡∏≤‡∏Ç‡∏≤"].apply(is_test_text) |
                tx["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].apply(is_test_text) |
                tx["‡∏£‡∏´‡∏±‡∏™"].apply(is_test_text)
            )
            removed_txn = int(mask.sum())
            tx = tx[~mask]
            write_df(sh, SHEET_TXNS, tx)

        if include_items:
            it = read_df(sh, SHEET_ITEMS, ITEMS_HEADERS)
            if not it.empty:
                mask_items = (
                    it["‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"].apply(is_test_text) |
                    it["‡∏£‡∏´‡∏±‡∏™"].str.upper().str.startswith("TEST-", na=False) |
                    it["‡∏£‡∏´‡∏±‡∏™"].str.upper().str.startswith("TST-", na=False)
                )
                removed_items = int(mask_items.sum())
                it = it[~mask_items]
                write_df(sh, SHEET_ITEMS, it)

        st.success(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚Ä¢ Transactions: {removed_txn} ‡πÅ‡∏ñ‡∏ß ‚Ä¢ Items: {removed_items} ‡πÅ‡∏ñ‡∏ß")
    st.markdown("</div>", unsafe_allow_html=True)
# ---------- ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Page (Categories / Branches / Items) ----------
def _read_upload_df(file):
    if file is None: return None, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"
    name = file.name.lower()
    try:
        if name.endswith(".csv"):
            df = pd.read_csv(file, dtype=str).fillna("")
        elif name.endswith(".xlsx") or name.endswith(".xls"):
            df = pd.read_excel(file, dtype=str).fillna("")
        else:
            return None, "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ .csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx"
        # strip spaces
        df = df.applymap(lambda x: str(x).strip())
        return df, None
    except Exception as e:
        return None, f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"




def page_import(sh):
    """
    ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    - ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô 3 ‡πÅ‡∏ó‡πá‡∏ö: (1) ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, (2) ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, (3) ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    - ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ï SHEET_CATS ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå CATS_HEADERS = ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]
    """
    st.subheader("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
    cats = read_df(sh, SHEET_CATS, CATS_HEADERS)

    tab1, tab2, tab3 = st.tabs(["‚úèÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "üì• ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)", "üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á"])

    # ---------------- TAB 1: Single add/update ----------------
    with tab1:
        st.caption("‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' ‡∏ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà' ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö")
        c1, c2 = st.columns([1,2])
        with c1:
            code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î", placeholder="‡πÄ‡∏ä‡πà‡∏ô PRT, KBD").upper().strip()
        with c2:
            name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î", placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏∂‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå, ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î").strip()
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", use_container_width=True, key="save_single"):
            if not code or not name:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                df = read_df(sh, SHEET_CATS, CATS_HEADERS)
                if (df["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == code).any():
                    df.loc[df["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == code, "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"] = name
                    msg = "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
                else:
                    df = pd.concat([df, pd.DataFrame([[code, name]], columns=CATS_HEADERS)], ignore_index=True)
                    msg = "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
                write_df(sh, SHEET_CATS, df)
                st.success(f"{msg}‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {code} ‚Äî {name}")
                safe_rerun()

    # ---------------- TAB 2: Import many ----------------
    with tab2:
        with st.expander("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô/‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π)", expanded=False):
            st.markdown("""\
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå **‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î, ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î**
- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î** ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞ **‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà** ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏î‡∏¥‡∏°
- ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î '‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï'
            """)
            tpl = """‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î,‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î
PRT,‡∏´‡∏°‡∏∂‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå
KBD,‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
"""
            st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï (CSV)", data=tpl.encode("utf-8-sig"),
                               file_name="template_categories.csv", mime="text/csv")

        cA, cB = st.columns([2,1])
        with cA:
            up = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå (.csv, .xlsx)", type=["csv","xlsx","xls"], key="cat_uploader_v2")
        with cB:
            replace_all = st.checkbox("‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï (‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏´‡∏°‡πà)", value=False)

        if up is not None:
            try:
                if up.name.lower().endswith(".csv"):
                    df_up = pd.read_csv(up, dtype=str)
                else:
                    df_up = pd.read_excel(up, dtype=str)
                df_up = df_up.fillna("").applymap(lambda x: str(x).strip())
            except Exception as e:
                st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                return

            rename_map = {"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î","code":"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","name":"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î","category_code":"‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","category_name":"‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"}
            df_up.columns = [rename_map.get(c.strip(), c.strip()) for c in df_up.columns]
            missing = [c for c in ["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"] if c not in df_up.columns]
            if missing:
                st.error(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö: {', '.join(missing)}"); return

            df_up["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] = df_up["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"].str.upper()
            df_up = df_up[df_up["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]!=""]
            df_up = df_up.drop_duplicates(subset=["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"], keep="last")

            st.success(f"‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß {len(df_up):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            st.dataframe(df_up, use_container_width=True, height=240)

            if st.button("üöÄ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", use_container_width=True, key="do_import"):
                base = read_df(sh, SHEET_CATS, CATS_HEADERS)
                if replace_all:
                    write_df(sh, SHEET_CATS, df_up[CATS_HEADERS])
                    st.success(f"‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Ä¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {len(df_up):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"); safe_rerun()
                else:
                    added, updated = 0, 0
                    for _, r in df_up.iterrows():
                        code, name = str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).strip().upper(), str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).strip()
                        if not code or not name: 
                            continue
                        if (base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == code).any():
                            base.loc[base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == code, "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"] = name; updated += 1
                        else:
                            base = pd.concat([base, pd.DataFrame([[code, name]], columns=CATS_HEADERS)], ignore_index=True); added += 1
                    write_df(sh, SHEET_CATS, base)
                    st.success(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà {added:,} ‚Ä¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {updated:,}"); safe_rerun()

    # ---------------- TAB 3: Search & inline edit ----------------
    with tab3:
        c1, c2 = st.columns([2,1])
        with c1:
            q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏´‡∏±‡∏™/‡∏ä‡∏∑‡πà‡∏≠)", key="cat_search_v2")
        with c2:
            st.caption("‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")

        view = cats.copy()
        if not view.empty and q:
            mask = view["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"].str.contains(q, case=False, na=False) | view["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"].str.contains(q, case=False, na=False)
            view = view[mask]

        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
        edited = st.data_editor(
            view.sort_values("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"),
            use_container_width=True,
            height=360,
            disabled=["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"],
            key="cat_editor"
        )

        cL, cR = st.columns([1,1])
        with cL:
            if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á", use_container_width=True, key="save_table"):
                base = read_df(sh, SHEET_CATS, CATS_HEADERS)
                # sync: update name for matching codes; ignore codes‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô
                for _, r in edited.iterrows():
                    base.loc[base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == str(r["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"]).strip().upper(), "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"] = str(r["‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î"]).strip()
                write_df(sh, SHEET_CATS, base)
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                safe_rerun()
        with cR:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡∏ô‡∏µ‡πâ
            with st.popover("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡πá‡∏ß"):
                code2 = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î (‡πÉ‡∏´‡∏°‡πà)", key="quick_code").upper().strip()
                name2 = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î", key="quick_name").strip()
                if st.button("‡πÄ‡∏û‡∏¥‡πà‡∏°", key="quick_add"):
                    if not code2 or not name2:
                        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
                    else:
                        base = read_df(sh, SHEET_CATS, CATS_HEADERS)
                        if (base["‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î"] == code2).any():
                            st.error("‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"); st.stop()
                        base = pd.concat([base, pd.DataFrame([[code2, name2]], columns=CATS_HEADERS)], ignore_index=True)
                        write_df(sh, SHEET_CATS, base)
                        st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß")
                        safe_rerun()


def main():
    st.set_page_config(page_title=APP_TITLE, page_icon="üß∞", layout="wide"); st.markdown(MINIMAL_CSS, unsafe_allow_html=True); st.markdown(RESPONSIVE_CSS, unsafe_allow_html=True)
    st.title(APP_TITLE); st.caption(APP_TAGLINE)
    ensure_credentials_ui()
    if "sheet_url" not in st.session_state or not st.session_state.get("sheet_url"): st.session_state["sheet_url"] = DEFAULT_SHEET_URL
    with st.sidebar:
        st.markdown("---")
        page = st.radio("‡πÄ‡∏°‡∏ô‡∏π", ["Dashboard","Stock","‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤","‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤","‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô","‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","Settings"], index=0)
    if page == "Settings":
        page_settings(); st.caption("¬© 2025 IT Stock ¬∑ Streamlit + Google Sheets"); return
    sheet_url = st.session_state.get("sheet_url", DEFAULT_SHEET_URL)
    if not sheet_url:
        st.info("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π **Settings** ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏≤‡∏á Google Sheet URL ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"); return
    try:
        sh = open_sheet_by_url(sheet_url)
    except Exception as e:
        st.error(f"‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"); return
    ensure_sheets_exist(sh)
    auth_block(sh)
    if page=="Dashboard": page_dashboard(sh)
    elif page=="Stock": page_stock(sh)
    elif page=="‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤": page_tickets(sh)
    elif page=="‡πÄ‡∏ö‡∏¥‡∏Å/‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤": page_issue_receive(sh)
    elif page=="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô": page_reports(sh)
    elif page=="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ": page_users_admin(sh)
    elif page=="‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà": page_import(sh)
    st.caption("¬© 2025 IT Stock ¬∑ Streamlit + Google Sheets")

if __name__ == "__main__":
    main()
